//-----------------------------------mssql(express)----------------------------------------
connStr="DSN=mssql-employees;Server=192.168.1.35;Uid=sa;Pwd=sa;Database=employees";
databaseType="mssql";


@testing:case=databaseType+"odbc_connect_normal";
c=odbc::connect(connStr);
assert 1, isNull(c) == 0;

@testing:case=databaseType+"odbc_connect_fail", exception=1
c=odbc::connect("gibberish");
assert 1, isNull(c) == 0;

@testing:case=databaseType+"odbc_query_connection_string"
assert 1, isNull(c) == 0;
t=odbc::query(connStr, "select * from employees");
assert 2, t.rows() == 300024;
assert 3, t.cols() == 6;
t = select * from t order by emp_no
assert 4, t.emp_no[0] == 10001
assert 5, typestr(t.emp_no[0]) == "INT"
assert 5, typestr(t.hire_date[0]) == "DATE"

@testing:case=databaseType+"odbc_query_connection_handle"
c=odbc::connect(connStr);
assert 1, isNull(c) == 0;
t=odbc::query(c, "select * from employees");
assert 2, t.rows() == 300024;
assert 3, t.cols() == 6;
t = select * from t order by emp_no
assert 4, t.emp_no[0] == 10001
assert 5, typestr(t.emp_no[0]) == "INT"
assert 5, typestr(t.hire_date[0]) == "DATE"

@testing:case=databaseType+"odbc_query_after_close", exception=1
c=odbc::connect(connStr);
t=odbc::query(c, "select * from innodb_index_stats");
odbc::close(c);
t=odbc::query(c, "select * from innodb_index_stats");

@testing:case=databaseType+"odbc_close"
c=odbc::connect(connStr);
odbc::close(c);

@testing:case=databaseType+"odbc_query_employees"
c=odbc::connect(connStr);
assert 1, isNull(c) == 0;
t = odbc::query(c, "select * from employees");
assert 2, (exec count(emp_no) from t) == 300024;
t = odbc::query(c, "select top(1025) * from employees");
assert 3, (exec count(emp_no) from t) == 1025;
t = odbc::query(c, "select top(1023) * from employees");
assert 4, (exec count(emp_no) from t) == 1023;
t = odbc::query(c, "select top(0) * from employees");
assert 5, (exec count(emp_no) from t) == 0;

// assume unixODBC is installed and data source is properly configured
@testing:case=databaseType+"odbc_query_employees_append"
c=odbc::connect(connStr);

assert 1, isNull(c) == 0;
t = odbc::query(c, "select * from employees")
assert 2, (exec count(emp_no) from t) == 300024;
odbc::query(c, "select top(1000) * from employees", t)
assert 3, (exec count(emp_no) from t) == 301024;
odbc::query(c, "select top(1025) * from employees", t)
assert 4, (exec count(emp_no) from t) == 302049;
t = odbc::query(c, "select top(1000) * from employees", t)
assert 5, (exec count(emp_no) from t) == 303049;
t = odbc::query(c, "select top(0) * from employees", t)
assert 6, (exec count(emp_no) from t) == 303049;
t = odbc::query(c, "select * from salaries order by from_date");
assert 7, (exec count(emp_no) from t) == 2844047;
assert 8, typestr(t.from_date[0]) == "DATE"

@testing:case=databaseType+"odbc_test_datatypes"
c=odbc::connect(connStr);
t = odbc::query(c, "select * from test_datatypes where id=1");
assert 1, t.timestamp == 2017.06.15T13:29:34.001;
assert 2, t.date==2017.06.16
assert 3, eqObj(t.float[0], double(21312.1), 1)
assert 4, eqObj(double(t.numeric[0]), double(1234213), 0)
assert 5, eqObj(t.double[0], double(5498498.498498498), 4)
assert 6, eqObj(t.int[0], 1)
assert 7, eqObj(t.varchar[0], "gibberish jabberish")
assert 8, eqObj(t.char[0], 'a')
assert 9, eqObj(t.tinyint[0], 127)
assert 10, eqObj(t.smallint[0], 32767)
assert 11,  eqObj(t.bigint[0], 9223372036854775807l)

t = odbc::query(c, "select * from test_datatypes where id=2");
assert 12, t.timestamp[0] == 2017.06.15T13:30:41.000;
assert 13, t.date==0001.01.01
assert 14, eqObj(t.float[0], double(-31231.2), 1)
assert 15, eqObj(double(t.numeric[0]), double(-224.5), 1)
assert 16, eqObj(t.double[0], double(-5498498.498498498), 4)
assert 17, eqObj(t.int[0], 2)
assert 18, eqObj(t.varchar[0], "asd")
assert 19, eqObj(t.char[0], 'b')
assert 20, eqObj(t.tinyint[0], short(-128))
assert 21, isNull(t.smallint[0])
assert 22, eqObj(t.bigint[0], -9223372036854775808l)

t = odbc::query(c, "select * from test_datatypes where id=3");
assert 23, t.timestamp[0] == 2017.06.15T11:47:37.989;
assert 24, t.date==date("1000.01.01")
assert 25, eqObj(t.float[0], double(0), 1)
assert 26, eqObj(double(t.numeric[0]), double(0), 0)
assert 27, eqObj(t.double[0], double(0), 4)
assert 28, eqObj(t.int[0], 3)
assert 29, eqObj(t.varchar[0], "ss121")
assert 30, eqObj(t.char[0], 'c')
assert 31, eqObj(t.tinyint[0], 0)
assert 32, eqObj(t.smallint[0], 0)
assert 33, eqObj(t.bigint[0], 0)

t = odbc::query(c, "select * from test_datatypes")
assert 34, type(t.timestamp[0]) == 12
assert 35, type(t.tinyint[0]) == 3
assert 36, type(t.smallint[0]) == 3
assert 37, type(t.int[0]) == 4
assert 38, type(t.bigint[0]) == 5
assert 39, type(t.float[0]) == 14
assert 40, type(double(t.numeric[0])) == 14
assert 41, type(t.double[0]) == 14
assert 42, type(t.char[0]) == 2
assert 43, type(t.varchar[0]) == 16

@testing:case=databaseType+"odbc_test_symbol"
c=odbc::connect(connStr);
t = odbc::query(c, "select * from test_symbols order by id");
assert 1, type(t.symbol1) == 15
assert 2, type(t.notSymbol1) == 16
assert 3, type(t.symbol2) == 15
assert 4, type(t.notSymbol2) == 16
assert 5, trim(t.symbol1[0]) == "abc"
assert 6, trim(t.notSymbol1[0]) == "abcd"
assert 7, trim(t.symbol2[0]) == "aaaaaa"
assert 8, trim(t.notSymbol2[0]) == "bbbbbb"
assert 9, trim(t.symbol1[1]) == "def"
assert 10, trim(t.notSymbol1[1]) == "defdefdef"
assert 11, trim(t.symbol2[1]) == "ddd"
assert 12, trim(t.notSymbol2[1]) == "dddas"



@testing:case=databaseType+"odbc_test_compatibility_symbol", exception=0
c=odbc::connect(connStr);
id=[11121]
ts=[1]$timestamp
int1=[1]
tinyint=[1]$short
smallint=[1]$short
bigint=[1]$long
double1=[1.1]$double
double2=[1.1]$double
char1=['c']
varchar=[""]
double3=[1.1]$double
date1=[1]$date
t = table(id,ts,int1,tinyint,smallint,bigint,double1,double2,char1,varchar,double3,date1);
[typestr t.id, typestr t.ts, typestr t.int1,typestr t.tinyint,typestr t.smallint,typestr t.bigint,typestr t.double1,typestr t.double2,typestr t.char1,typestr t.varchar,typestr t.double3,typestr t.date1];
odbc::query(c, "select * from test_datatypes order by id", t)
assert 1, t.ts[1] == 2017.06.15T13:29:34.001;
assert 2, t.date1[1]==2017.06.16
assert 3, eqObj(t.double1[1], double(21312.1), 1)
assert 4, eqObj(double(t.double2[1]), double(1234213), 0)
assert 5, eqObj(t.double3[1], double(5498498.498498498), 4)
assert 6, eqObj(t.int1[1], 1)
assert 7, eqObj(t.varchar[1], "gibberish jabberish")
assert 8, eqObj(t.char1[1], 'a')
assert 9, eqObj(t.tinyint[1], 127)
assert 10, eqObj(t.smallint[1], 32767)
assert 11,  eqObj(t.bigint[1], 9223372036854775807l)

symbol1 = symbol(varchar);
t = table(id,ts,int1,tinyint,smallint,bigint,double1,double2,char1,symbol1,double3,date1);
[typestr t.id, typestr t.ts, typestr t.int1,typestr t.tinyint,typestr t.smallint,typestr t.bigint,typestr t.double1,typestr t.double2,typestr t.char1,typestr t.symbol1,typestr t.double3,typestr t.date1];
odbc::query(c, "select * from test_datatypes", t)
assert 12, t.ts[1] == 2017.06.15T13:29:34.001;
assert 13, t.date1[1]==2017.06.16
assert 14, eqObj(t.double1[1], double(21312.1), 1)
assert 15, eqObj(double(t.double2[1]), double(1234213), 0)
assert 16, eqObj(t.double3[1], double(5498498.498498498), 4)
assert 17, eqObj(t.int1[1], 1)
assert 18, eqObj(t.symbol1[1], "gibberish jabberish")
assert 19, eqObj(t.char1[1], 'a')
assert 21, eqObj(t.tinyint[1], 127)
assert 22, eqObj(t.smallint[1], 32767)
assert 23,  eqObj(t.bigint[1], 9223372036854775807l)


@testing:case=databaseType+"odbc_test_compatibility_upcast_int", exception=0
id=[11121]$int
ts=[1]$timestamp
int1=[1]$int
tinyint=[1]$int
smallint=[1]$int
bigint=[1]$long
double1=[1.1]$double
double2=[1.1]$double
char1=['c']
varchar=[""]
double3=[1.1]$double
date1=[1]$date
t = table(id,ts,int1,tinyint,smallint,bigint,double1,double2,char1,varchar,double3,date1);
[typestr t.id, typestr t.ts, typestr t.int1,typestr t.tinyint,typestr t.smallint,typestr t.bigint,typestr t.double1,typestr t.double2,typestr t.char1,typestr t.varchar,typestr t.double3,typestr t.date1];
t1 = odbc::query(c, "select * from test_datatypes order by id", t)
assert 1, t.ts[1] == 2017.06.15T13:29:34.001;
assert 2, t.date1[1]==2017.06.16
assert 3, eqObj(t.double1[1], double(21312.1), 1)
assert 4, eqObj(double(t.double2[1]), double(1234213), 0)
assert 5, eqObj(t.double3[1], double(5498498.498498498), 4)
assert 6, eqObj(t.int1[1], 1)
assert 7, eqObj(t.varchar[1], "gibberish jabberish")
assert 8, eqObj(t.char1[1], 'a')
assert 9, eqObj(t.tinyint[1], 127)
assert 10, eqObj(t.smallint[1], 32767)
assert 11,  eqObj(t.bigint[1], 9223372036854775807l)

@testing:case=databaseType+"odbc_test_compatibility_upcast_long", exception=0
id=[11121]$long
ts=[1]$timestamp
int1=[1]$long
tinyint=[1]$long
smallint=[1]$long
bigint=[1]$long
double1=[1.1]$double
double2=[1.1]$double
char1=['c']
varchar=[""]
double3=[1.1]$double
date1=[1]$date
t = table(id,ts,int1,tinyint,smallint,bigint,double1,double2,char1,varchar,double3,date1);

odbc::query(c, "select * from test_datatypes order by id", t)
assert 1, t.ts[1] == 2017.06.15T13:29:34.001;
assert 2, t.date1[1]==2017.06.16
assert 3, eqObj(t.double1[1], double(21312.1), 1)
assert 4, eqObj(double(t.double2[1]), double(1234213), 0)
assert 5, eqObj(t.double3[1], double(5498498.498498498), 4)
assert 6, eqObj(t.int1[1], long(1))
assert 7, eqObj(t.varchar[1], "gibberish jabberish")
assert 8, eqObj(t.char1[1], 'a')
assert 9, eqObj(t.tinyint[1], long(127))
assert 10, eqObj(t.smallint[1], long(32767))
assert 11,  eqObj(t.bigint[1], long(9223372036854775807l))
[typestr t.id, typestr t.ts, typestr t.int1,typestr t.tinyint,typestr t.smallint,typestr t.bigint,typestr t.double1,typestr t.double2,typestr t.char1,typestr t.varchar,typestr t.double3,typestr t.date1];

@testing:case=databaseType+"odbc_test_compatibility_upcast_double", exception=0
id=[11121]$double
ts=[1]$timestamp
int1=[1]$double
tinyint=[1]$double
smallint=[1]$double
bigint=[1]$double
double1=[1.1]$double
double2=[1.1]$double
char1=['c']
varchar=[""]
double3=[1.1]$double
date1=[1]$date
t = table(id,ts,int1,tinyint,smallint,bigint,double1,double2,char1,varchar,double3,date1);

odbc::query(c, "select * from test_datatypes order by id", t)
assert 1, t.ts[1] == 2017.06.15T13:29:34.001;
assert 2, t.date1[1]==2017.06.16
assert 3, eqObj(t.double1[1], double(21312.1), 1)
assert 4, eqObj(double(t.double2[1]), double(1234213), 0)
assert 5, eqObj(t.double3[1], double(5498498.498498498), 4)
assert 6, eqObj(t.int1[1], double(1), 4)
assert 7, eqObj(t.varchar[1], "gibberish jabberish")
assert 8, eqObj(t.char1[1], 'a')
assert 9, eqObj(t.tinyint[1], double(127), 4)
assert 10, eqObj(t.smallint[1], double(32767), 4)
assert 11,  eqObj(t.bigint[1], double(9223372036854775807l), 4)
[typestr t.id, typestr t.ts, typestr t.int1,typestr t.tinyint,typestr t.smallint,typestr t.bigint,typestr t.double1,typestr t.double2,typestr t.char1,typestr t.varchar,typestr t.double3,typestr t.date1];

@testing:case=databaseType+"odbc_test_compatibility_upcast_timestamp", exception=0
id=[11121]$double
ts=[1]$timestamp
int1=[1]$double
tinyint=[1]$double
smallint=[1]$double
bigint=[1]$double
double1=[1.1]$double
double2=[1.1]$double
char1=['c']
varchar=[""]
double3=[1.1]$double
date1=[1]$timestamp
t = table(id,ts,int1,tinyint,smallint,bigint,double1,double2,char1,varchar,double3,date1);
odbc::query(c, "select * from test_datatypes order by id", t)
assert 1, t.ts[1] == 2017.06.15T13:29:34.001;
assert 2, t.date1[1]==2017.06.16T00:00:00.000
assert 3, eqObj(t.double1[1], double(21312.1), 1)
assert 4, eqObj(double(t.double2[1]), double(1234213), 0)
assert 5, eqObj(t.double3[1], double(5498498.498498498), 4)
assert 6, eqObj(t.int1[1], double(1), 4)
assert 7, eqObj(t.varchar[1], "gibberish jabberish")
assert 8, eqObj(t.char1[1], 'a')
assert 9, eqObj(t.tinyint[1], double(127), 4)
assert 10, eqObj(t.smallint[1], double(32767), 4)
assert 11,  eqObj(t.bigint[1], double(9223372036854775807l), 4)
[typestr t.id, typestr t.ts, typestr t.int1,typestr t.tinyint,typestr t.smallint,typestr t.bigint,typestr t.double1,typestr t.double2,typestr t.char1,typestr t.varchar,typestr t.double3,typestr t.date1];


@testing:case=databaseType+"odbc_test_compatibility_cast_string", exception=0
id=[""]
ts=[""]
int1=[""]
tinyint=[""]
smallint=[""]
bigint=[""]
double1=[""]
double2=[""]
char1=[""]
varchar=[""]
double3=[""]
date1=[""]
t = table(id,ts,int1,tinyint,smallint,bigint,double1,double2,char1,varchar,double3,date1);
odbc::query(c, "select * from test_datatypes order by id", t)
assert 1, t.id[1] == "1";
assert 1, t.ts[1] == "2017-06-15 13:29:34 +0000";
assert 2, t.int1[1]== "1";
assert 3, t.tinyint[1] == "127";
assert 4, t.smallint[1] == "32767";
assert 5, t.bigint[1] == "9223372036854775807";
assert 6, eqObj(double(t.double1[1]), double("21312"), 0);
assert 7, eqObj(double(t.double2[1]), double("1234213.1"), 0);
assert 8, t.char1[1] == "a";
assert 9, t.varchar[1] == "gibberish jabberish";
assert 10, eqObj(double(t.double3[1]), double("5498498"), 0);
assert 11,  t.date1[1] == "2017-06-16"
assert 12, t.id[2] == "2";
assert 13, t.ts[2] == "2017-06-15 13:30:41 +0000";
assert 14, t.int1[2]== "2";
assert 15, t.tinyint[2] == "-128";
assert 16, t.smallint[2] == "-32768";
assert 17, t.bigint[2] == "-9223372036854775808";
assert 18,  eqObj(double(t.double1[2]), double("-31231"), 0);
assert 19, eqObj(double(t.double2[2]), double("-224.5"), 0);
assert 20, t.char1[2] == "b";
assert 21, t.varchar[2] == "asd";
assert 22, eqObj(double(t.double3[2]), double("-5498498"), 0);
assert 23,  t.date1[2] == "1-01-01"

@testing:case=databaseType+"odbc_test_compatibility_downcast_bool", exception=0
id=[false]$bool
ts=[1]$timestamp
int1=[false]$bool
tinyint= [false]$bool
smallint=[false]$bool
bigint=[false]$bool
double1=[false]$bool
double2=[false]$bool
char1=[false]$bool
varchar=[""]
double3=[false]$bool
date1=[1]$date
t = table(id,ts,int1,tinyint,smallint,bigint,double1,double2,char1,varchar,double3,date1);
[typestr t.id, typestr t.ts, typestr t.int1,typestr t.tinyint,typestr t.smallint,typestr t.bigint,typestr t.double1,typestr t.double2,typestr t.char1,typestr t.varchar,typestr t.double3,typestr t.date1];
odbc::query(c, "select * from test_datatypes order by id", t)
assert 1, t.id[1] == true
assert 2, t.int1[1] == true
assert 3, t.tinyint[1] == true
assert 4, t.smallint[1] == true
assert 5, t.bigint[1] == true
assert 6, t.double1[1] == true
assert 7, t.double3[1] == true
assert 8, t.tinyint[3] == false
assert 9, t.smallint[3] == false
assert 10, t.bigint[3] == false

@testing:case=databaseType+"odbc_test_compatibility_downcast_short", exception=0
id=[false]$short
ts=[1]$timestamp
int1=[false]$short
tinyint= [false]$short
smallint=[false]$short
bigint=[false]$short
double1=[false]$short
double2=[1]$short // nanodbc stores decimal & numeric values as chars
char1=[false]$short
varchar=[""]
double3=[false]$short
date1=[1]$date
t = table(id,ts,int1,tinyint,smallint,bigint,double1,double2,char1,varchar,double3,date1);
[typestr t.id, typestr t.ts, typestr t.int1,typestr t.tinyint,typestr t.smallint,typestr t.bigint,typestr t.double1,typestr t.double2,typestr t.char1,typestr t.varchar,typestr t.double3,typestr t.date1];

odbc::query(c, "select * from test_datatypes order by id", t)
assert 1, t.id[1] == 1
assert 2, t.int1[1] == 1
assert 3, t.tinyint[1] == 127
assert 4, t.smallint[1] == 32767
assert 5, t.bigint[1] == -1
//assert 6, t.double1[1] == 21312 // casting floats to ints is undefined behavior --  C99 spec, section 6.3.1.4 Real floating and integer.
//assert 8, t.double3[1] == -6526

@testing:case=databaseType+"odbc_test_compatibility_downcast_int", exception=0
id=[0]$int
ts=[1]$timestamp
int1=[0]$int
tinyint= [0]$int
smallint=[0]$int
bigint=[0]$int
double1=[0]$int
double2=[1]$int
char1=[false]$int
varchar=[""]
double3=[false]$int
date1=[1]$date
t = table(id,ts,int1,tinyint,smallint,bigint,double1,double2,char1,varchar,double3,date1);
odbc::query(c, "select * from test_datatypes order by id", t)
assert 1, t.id[1] == 1
assert 2, t.int1[1] == 1
assert 3, t.tinyint[1] == 127
assert 4, t.smallint[1] == 32767
assert 5, t.bigint[1] == -1
//assert 6, t.double1[1] == 21312 // casting floats to ints is undefined behavior --  C99 spec, section 6.3.1.4 Real floating and integer.
//assert 8, t.double3[1] == 1618375405

@testing:case=databaseType+"odbc_test_compatibility_downcast_date", exception=0
id=[0]$int
ts=[1]$date
int1=[0]$int
tinyint= [0]$int
smallint=[0]$int
bigint=[0]$int
double1=[0]$int
double2=[1]$int
char1=[false]$int
varchar=[""]
double3=[false]$int
date1=[1]$date
t = table(id,ts,int1,tinyint,smallint,bigint,double1,double2,char1,varchar,double3,date1);
odbc::query(c, "select * from test_datatypes order by id", t)
assert 1, t.ts[1]==2017.06.15

@testing:case=databaseType+"odbc_test_compatibility_wrong_column_count", exception=1
t = table(1 as id);
odbc::query(c, "select * from test_datatypes order by id", t)

@testing:case=databaseType+"odbc_test_compatibility_wrong_type1", exception=1
id=[11121]$int
ts=[1]$int // timestamp => int, should be incompatible
int1=[1]$double
tinyint=[1]$double
smallint=[1]$double
bigint=[1]$double
double1=[1.1]$double
double2=[1.1]$double
char1=['c']
varchar=[""]
double3=[1.1]$double
date1=[1]$timestamp
t = table(id,ts,int1,tinyint,smallint,bigint,double1,double2,char1,varchar,double3,date1);
odbc::query(c, "select * from test_datatypes order by id", t)

@testing:case=databaseType+"odbc_test_compatibility_wrong_type2", exception=1
id=[11121]$int
ts=[1]$timestamp
int1=[1]$double
tinyint=[1]$double
smallint=[1]$double
bigint=[1]$double
double1=[1.1]$double
double2=[1.1]$double
char1=['c']
varchar=[1] // string => int, should be incompatible
double3=[1.1]$double
date1=[1]$timestamp
t = table(id,ts,int1,tinyint,smallint,bigint,double1,double2,char1,varchar,double3,date1);
odbc::query(c, "select * from test_datatypes order by id", t)

@testing:case=databaseType+"odbc_test_compatibility_wrong_type3", exception=1
id=[11121]$int
ts=[1]$timestamp
int1=[1]$double
tinyint=[1]$double
smallint=[1]$double
bigint=[1]$double
double1=[1.1]$double
double2=[1.1]$double
char1=['c']
varchar=[1]$timestamp // string => timestamp, should be incompatible
double3=[1.1]$double
date1=[1]$timestamp
t = table(id,ts,int1,tinyint,smallint,bigint,double1,double2,char1,varchar,double3,date1);
odbc::query(c, "select * from test_datatypes order by id", t)


@testing:case=databaseType+"odbc_query_employees_append_empty",exception=1
odbc::query(c, "", t);

@testing:case=databaseType+"odbc_connect_invalid_arg",exception=1
c=odbc::connect(connStr);
c=odbc::connect(c);
