#include "setup/settings.txt"

try{loadPlugin("plugins/xgboost/PluginXgboost.txt")}catch(ex){print ex}
go

// ------------ xgboost::train argument validation --------------
@testing:case="test_function_xgboost_train_args_ex1", exception=1
xgboost::train("1..3", 1..3$3:1)

@testing:case="test_function_xgboost_train_args_ex1_scalar", exception=1
xgboost::train(1, 1..3$3:1)

@testing:case="test_function_xgboost_train_args_ex1_not_numeric", exception=1
xgboost::train(`a`b`c, 1..3$3:1)

@testing:case="test_function_xgboost_train_args_ex2", exception=1
xgboost::train(1..3, 1..3)

@testing:case="test_function_xgboost_train_args_ex2_not_match", exception=1
xgboost::train(1..3, 1..3$1:3)

@testing:case="test_function_xgboost_train_args_ex2_non_basic_table", exception=1
db = database("", VALUE, 1..3)
t = db.createPartitionedTable(table(1..3 as id), `tb, `id)
xgboost::train(1..3, t)

@testing:case="test_function_xgboost_train_args_ex2_table_contain_non_numeric_col", exception=1
xgboost::train(1..3, table(1..3 as id, `1`2`3 as val))

@testing:case="test_function_xgboost_train_args_ex3", exception=1
xgboost::train(1..3, 1..3$3:1, 1 2)

@testing:case="test_function_xgboost_train_args_ex3_dict_type", exception=1
model = xgboost::train(1..3, 1..3$3:1, dict(INT, INT))

@testing:case="test_function_xgboost_train_args_ex4_nonpositive", exception=1
xgboost::train(1..3, 1..3$3:1, {objective: "reg:linear"}, 0)

@testing:case="test_function_xgboost_train_args_ex4_vector", exception=1
xgboost::train(1..3, 1..3$3:1, {objective: "reg:linear"}, 2 3)

@testing:case="test_function_xgboost_train_args_ex4_non_integer", exception=1
xgboost::train(1..3, 1..3$3:1, {objective: "reg:linear"}, `0)

@testing:case="test_function_xgboost_train_args_ex5", exception=1
xgboost::train(1..3, 1..3$3:1, {objective: "reg:linear"}, 2, 1)

// ------------ xgboost::predict argument validation --------------
@testing:case="test_function_xgboost_predict_args_ex1", exception=1
xgboost::predict(2, 1..3$3:1)

@testing:case="test_function_xgboost_predict_args_ex2", exception=1
model = xgboost::train(1..3, 1..3$3:1)
xgboost::predict(model, 1..3)

@testing:case="test_function_xgboost_train_args_ex2_non_basic_table", exception=1
model = xgboost::train(1..3, 1..3$3:1)
db = database("", VALUE, 1..3)
t = db.createPartitionedTable(table(1..3 as id), `tb, `id)
xgboost::predict(model, t)

@testing:case="test_function_xgboost_train_args_ex2_table_contain_non_numeric_col", exception=1
model = xgboost::train(1..3, 1..3$3:1)
xgboost::predict(model, table(1..3 as id, `1`2`3 as val))

@testing:case="test_function_xgboost_predict_args_ex3", exception=1
model = xgboost::train(1..3, 1..3$3:1)
xgboost::predict(model, 1..3$3:1, 2)

@testing:case="test_function_xgboost_predict_args_ex3_vector", exception=1
model = xgboost::train(1..3, 1..3$3:1)
xgboost::predict(model, 1..3$3:1, true true)

@testing:case="test_function_xgboost_predict_args_ex4", exception=1
model = xgboost::train(1..3, 1..3$3:1)
xgboost::predict(model, 1..3$3:1, , `0)

@testing:case="test_function_xgboost_predict_args_ex4_negative", exception=1
model = xgboost::train(1..3, 1..3$3:1)
xgboost::predict(model, 1..3$3:1, , -1)

@testing:case="test_function_xgboost_predict_args_ex4_vector", exception=1
model = xgboost::train(1..3, 1..3$3:1)
xgboost::predict(model, 1..3$3:1, , 1 2)

@testing:case="test_function_xgboost_predict_args_ex5", exception=1
model = xgboost::train(1..3, 1..3$3:1)
xgboost::predict(model, 1..3$3:1, , 0, 2)

@testing:case="test_function_xgboost_predict_args_ex5_vector", exception=1
model = xgboost::train(1..3, 1..3$3:1)
xgboost::predict(model, 1..3$3:1, , 0, true true)

@testing:case="test_function_xgboost_predict_args_ex6", exception=1
model = xgboost::train(1..3, 1..3$3:1)
xgboost::predict(model, 1..3$3:1, , 0, false, 1)

@testing:case="test_function_xgboost_predict_args_ex6_vector", exception=1
model = xgboost::train(1..3, 1..3$3:1)
xgboost::predict(model, 1..3$3:1, , 0, false, false false)

@testing:case="test_function_xgboost_predict_args_ex7", exception=1
model = xgboost::train(1..3, 1..3$3:1)
xgboost::predict(model, 1..3$3:1, , 0, false, , 0)

@testing:case="test_function_xgboost_predict_args_ex7_vector", exception=1
model = xgboost::train(1..3, 1..3$3:1)
xgboost::predict(model, 1..3$3:1, , 0, false, , false false)

// --------- xgboost::saveModel and xgboost::loadModel argument validation ----------
@testing:case="test_function_xgboost_saveModel_args_ex1", exception=1
xgboost::saveModel(1, "test.model")

@testing:case="test_function_xgboost_saveModel_args_ex2", exception=1
model = xgboost::train(1..3, 1..3$3:1)
xgboost::saveModel(model, 2)

@testing:case="test_function_xgboost_saveModel_args_ex2_vector", exception=1
model = xgboost::train(1..3, 1..3$3:1)
xgboost::saveModel(model, `a`b)

@testing:case="test_function_xgboost_loadModel_args_ex1", exception=1
xgboost::loadModel(1)

@testing:case="test_function_xgboost_loadModel_args_ex1", exception=1
xgboost::loadModel(`1`2)

@testing:case="test_function_xgboost_loadModel_args_ex1", exception=1
xgboost::loadModel("foo.bar")

@testing:case="test_xgboost_train_more"
t = table(1..5 as c1, 1..5 * 2 as c2, 1..5 * 3 as c3)
label = 1 2 9 28 65
params = {objective: "reg:linear", max_depth: 5, eta: 0.1, min_child_weight: 1, subsample: 0.5, colsample_bytree: 1, num_parallel_tree: 1}
model = xgboost::train(label, t, params, 100)
res=xgboost::predict(model, t)
assert 1, eqObj(res, [0.960063,1.918349,7.039501,32.694199,58.885143],6)

model = xgboost::train(label, t, params, 100, model)
res=xgboost::predict(model, t)
assert 2, eqObj(res,[0.810127,2.14585,7.755153,29.555456,63.833134],6)

@testing:case="test_xgboost_train_param_ex1",exception=1
t = table(1..5 as c1, 1..5 * 2 as c2, 1..5 * 3 as c3)
label = 1 2 9 28 65
params = {objective: "reg:xxx", max_depth: 5, eta: 0.1, min_child_weight: 1, subsample: 0.5, colsample_bytree: 1, num_parallel_tree: 1}
model = xgboost::train(label, t, params, 100)

@testing:case="test_xgboost_train_param_ex2",exception=1
t = table(1..5 as c1, 1..5 * 2 as c2, 1..5 * 3 as c3)
label = 1 2 9 28 65
params = {objective: "reg:linear", max_depth: `abc, eta: 0.1, min_child_weight: 1, subsample: 0.5, colsample_bytree: 1, num_parallel_tree: 1}
model = xgboost::train(label, t, params, 100)


@testing:case="test_xgboost_train_param_ex3",exception=1
t = table(1..5 as c1, 1..5 * 2 as c2, 1..5 * 3 as c3)
label = 1 2 9 28 65
params = {objective: "reg:linear", max_depth: 5, eta: `abc, min_child_weight: 1, subsample: 0.5, colsample_bytree: 1, num_parallel_tree: 1}
model = xgboost::train(label, t, params, 100)

@testing:case="test_xgboost_train_param_ex4",exception=1
t = table(1..5 as c1, 1..5 * 2 as c2, 1..5 * 3 as c3)
label = 1 2 9 28 65
params = {objective: "reg:linear", max_depth: 5, eta: 0.2, min_child_weight: `abc, subsample: 0.5, colsample_bytree: 1, num_parallel_tree: 1}
model = xgboost::train(label, t, params, 100)

@testing:case="test_xgboost_train_param_ex5",exception=1
t = table(1..5 as c1, 1..5 * 2 as c2, 1..5 * 3 as c3)
label = 1 2 9 28 65
params = {objective: "reg:linear", max_depth: 5, eta: 0.2, min_child_weight: 1, subsample: `abc, colsample_bytree: 1, num_parallel_tree: 1}
model = xgboost::train(label, t, params, 100)


@testing:case="test_xgboost_train_param_ex6",exception=1
t = table(1..5 as c1, 1..5 * 2 as c2, 1..5 * 3 as c3)
label = 1 2 9 28 65
params = {objective: "reg:linear", max_depth: 5, eta: 0.2, min_child_weight: 1, subsample: 0.5, colsample_bytree: `abc, num_parallel_tree: 1}
model = xgboost::train(label, t, params, 100)

@testing:case="test_xgboost_train_param_ex7",exception=1
t = table(1..5 as c1, 1..5 * 2 as c2, 1..5 * 3 as c3)
label = 1 2 9 28 65
params = {objective: "reg:linear", max_depth: 5, eta: 0.2, min_child_weight: 1, subsample: 0.5, colsample_bytree: 1, num_parallel_tree: `abc}
model = xgboost::train(label, t, params, 100)

// ----------------- Test correctness -----------------------
@testing:case="test_function_xgboost_train_predict"
X = 1 2 3 4 5 2 4 6 8 10 3 6 9 12 15$5:3
Y = 1 2 9 28 65
model = xgboost::train(Y, X)
res = xgboost::predict(model, X)
assert 1, eqObj(res, [0.9432226, 1.8570193, 8.413501, 24.921408, 51.936802], 5)

model = xgboost::train(Y, X, , 100)
res = xgboost::predict(model, X)
assert 2, eqObj(res, [1.0008556, 2.0002477, 8.999961, 28.000086, 64.99885], 5)

model = xgboost::train(Y, table(X), , 100)
res = xgboost::predict(model, X)
assert 3, eqObj(res, [1.0008556, 2.0002477, 8.999961, 28.000086, 64.99885], 5)

model = xgboost::train(Y, X, , 100)
res = xgboost::predict(model, table(X))
assert 3, eqObj(res, [1.0008556, 2.0002477, 8.999961, 28.000086, 64.99885], 5)

@testing:case="test_function_xgboost_train_predict_params"
params = {objective: "reg:linear", max_depth: 5, eta: 0.1, min_child_weight: 1, subsample: 0.5, colsample_bytree: 1, num_parallel_tree: 1}
model = xgboost::train(Y, X, params)
res = xgboost::predict(model, X)
assert 1, eqObj(res, [1.9051162, 2.0026162, 6.5048714, 13.966722, 13.966722], 5)

model = xgboost::train(Y, X, params, 100)
res = xgboost::predict(model, X)
assert 2, eqObj(res, [0.96006227, 1.9183493, 7.0395026, 32.694195, 58.885143], 5)

params = {objective: "reg:squarederror", max_depth: 10, eta: 0.01, min_child_weight: 1, subsample: 0.5, colsample_bytree: 1, num_parallel_tree: 1}
model = xgboost::train(Y, X, params, 50)
res = xgboost::predict(model, X)
assert 3, eqObj(res, [1.4511688, 1.634087, 4.1526937, 8.712539, 8.712539], 5)

@testing:case="test_function_xgboost_train_predict_return_matrix"
model = xgboost::train(Y, X)
res = xgboost::predict(model, X, , , true)
assert 1, res == ([3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 6, 6, 6, 6, 6, 6, 6, 6, 5, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]$10:5).transpose()

model = xgboost::train(Y, X)
res = xgboost::predict(model, X, , 2, true)
assert 1, res == 3 3 4 2 2 5 6 4 2 2$5:2

@testing:case="test_function_xgboost_saveModel_loadModel"
model = xgboost::train(Y, X)
xgboost::saveModel(model, WORK_DIR + "/xgboost001.model")
model = xgboost::loadModel(WORK_DIR + "/xgboost001.model")
res = xgboost::predict(model, X)
assert 1, eqObj(res, [0.9432226, 1.8570193, 8.413501, 24.921408, 51.936802], 5)

@testing:case="test_function_xgboost_train_continue"
model = xgboost::train(Y, X)
xgboost::saveModel(model, WORK_DIR + "/xgboost001.model")
model = xgboost::loadModel(WORK_DIR + "/xgboost001.model")
model = xgboost::train(Y, X, , , model)
res = xgboost::predict(model, X)
assert 1, eqObj(res, [0.99432653, 1.9708369, 8.884533, 27.393906, 62.428192], 5)

// classifier
X = take(1..10, 50)$10:5
params = {objective: "binary:hinge"}
model = xgboost::train(0 0 0 0 0 1 1 1 1 1, X, params)
res = xgboost::predict(model, X)
assert 4, res == 0 0 0 0 0 1 1 1 1 1

// multiclass
X = take(1..10, 50)$10:5
params = {objective: "multi:softmax", num_class: 4}
model = xgboost::train(0 0 1 1 1 2 2 2 3 3, X, params)
res = xgboost::predict(model, X)
assert 5, res == 0 0 0 1 1 2 2 3 3 3

// ----------- Test correctness bigarray -------------
n = 3000000
x1 = take(1..44101, n)
x2 = take(1..58169, n)
X = table(x1, x2)
Y = -0.5 * x1 + 0.7 * x2 - 0.3
params = {objective: "reg:squarederror"}
model = xgboost::train(Y, X, params)
res = xgboost::predict(model, X)
assert 6, eqObj(res[[0,1000,10000,2000000]], [12.839462, 110.50454, 1788.3998, 7618.66], 2)
