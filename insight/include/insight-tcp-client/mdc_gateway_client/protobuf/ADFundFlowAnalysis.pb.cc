// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ADFundFlowAnalysis.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ADFundFlowAnalysis.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

namespace {

const ::google::protobuf::Descriptor* ADFundFlowAnalysis_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ADFundFlowAnalysis_reflection_ = NULL;
const ::google::protobuf::Descriptor* ADFundFlowDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ADFundFlowDetail_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ADFundFlowAnalysis_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ADFundFlowAnalysis_2eproto() {
  protobuf_AddDesc_ADFundFlowAnalysis_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ADFundFlowAnalysis.proto");
  GOOGLE_CHECK(file != NULL);
  ADFundFlowAnalysis_descriptor_ = file->message_type(0);
  static const int ADFundFlowAnalysis_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADFundFlowAnalysis, htscsecurityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADFundFlowAnalysis, mddate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADFundFlowAnalysis, mdtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADFundFlowAnalysis, datatimestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADFundFlowAnalysis, securityidsource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADFundFlowAnalysis, securitytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADFundFlowAnalysis, superlargeorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADFundFlowAnalysis, largeorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADFundFlowAnalysis, mediumorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADFundFlowAnalysis, smallorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADFundFlowAnalysis, mainorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADFundFlowAnalysis, thelast5daysmain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADFundFlowAnalysis, thelast10daysmain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADFundFlowAnalysis, thelast20daysmain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADFundFlowAnalysis, thelast60daysmain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADFundFlowAnalysis, thelast5daysmainlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADFundFlowAnalysis, exchangedate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADFundFlowAnalysis, exchangetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADFundFlowAnalysis, datamultiplepowerof10_),
  };
  ADFundFlowAnalysis_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ADFundFlowAnalysis_descriptor_,
      ADFundFlowAnalysis::internal_default_instance(),
      ADFundFlowAnalysis_offsets_,
      -1,
      -1,
      -1,
      sizeof(ADFundFlowAnalysis),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADFundFlowAnalysis, _internal_metadata_));
  ADFundFlowDetail_descriptor_ = file->message_type(1);
  static const int ADFundFlowDetail_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADFundFlowDetail, outflowvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADFundFlowDetail, inflowvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADFundFlowDetail, outflowqty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADFundFlowDetail, inflowqty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADFundFlowDetail, mddate_),
  };
  ADFundFlowDetail_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ADFundFlowDetail_descriptor_,
      ADFundFlowDetail::internal_default_instance(),
      ADFundFlowDetail_offsets_,
      -1,
      -1,
      -1,
      sizeof(ADFundFlowDetail),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADFundFlowDetail, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ADFundFlowAnalysis_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ADFundFlowAnalysis_descriptor_, ADFundFlowAnalysis::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ADFundFlowDetail_descriptor_, ADFundFlowDetail::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ADFundFlowAnalysis_2eproto() {
  ADFundFlowAnalysis_default_instance_.Shutdown();
  delete ADFundFlowAnalysis_reflection_;
  ADFundFlowDetail_default_instance_.Shutdown();
  delete ADFundFlowDetail_reflection_;
}

void protobuf_InitDefaults_ADFundFlowAnalysis_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::com::htsc::mdc::model::protobuf_InitDefaults_ESecurityType_2eproto();
  ::com::htsc::mdc::model::protobuf_InitDefaults_ESecurityIDSource_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  ADFundFlowAnalysis_default_instance_.DefaultConstruct();
  ADFundFlowDetail_default_instance_.DefaultConstruct();
  ADFundFlowAnalysis_default_instance_.get_mutable()->InitAsDefaultInstance();
  ADFundFlowDetail_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_ADFundFlowAnalysis_2eproto_once_);
void protobuf_InitDefaults_ADFundFlowAnalysis_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_ADFundFlowAnalysis_2eproto_once_,
                 &protobuf_InitDefaults_ADFundFlowAnalysis_2eproto_impl);
}
void protobuf_AddDesc_ADFundFlowAnalysis_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_ADFundFlowAnalysis_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030ADFundFlowAnalysis.proto\022\032com.htsc.mdc"
    ".insight.model\032\023ESecurityType.proto\032\027ESe"
    "curityIDSource.proto\"\346\007\n\022ADFundFlowAnaly"
    "sis\022\026\n\016HTSCSecurityID\030\001 \001(\t\022\016\n\006MDDate\030\002 "
    "\001(\005\022\016\n\006MDTime\030\003 \001(\005\022\025\n\rDataTimestamp\030\004 \001"
    "(\003\022\?\n\020securityIDSource\030\005 \001(\0162%.com.htsc."
    "mdc.model.ESecurityIDSource\0227\n\014securityT"
    "ype\030\006 \001(\0162!.com.htsc.mdc.model.ESecurity"
    "Type\022E\n\017SuperLargeOrder\030\007 \001(\0132,.com.htsc"
    ".mdc.insight.model.ADFundFlowDetail\022@\n\nL"
    "argeOrder\030\010 \001(\0132,.com.htsc.mdc.insight.m"
    "odel.ADFundFlowDetail\022A\n\013MediumOrder\030\t \001"
    "(\0132,.com.htsc.mdc.insight.model.ADFundFl"
    "owDetail\022@\n\nSmallOrder\030\n \001(\0132,.com.htsc."
    "mdc.insight.model.ADFundFlowDetail\022\?\n\tMa"
    "inOrder\030\013 \001(\0132,.com.htsc.mdc.insight.mod"
    "el.ADFundFlowDetail\022F\n\020TheLast5DaysMain\030"
    "\014 \001(\0132,.com.htsc.mdc.insight.model.ADFun"
    "dFlowDetail\022G\n\021TheLast10DaysMain\030\r \001(\0132,"
    ".com.htsc.mdc.insight.model.ADFundFlowDe"
    "tail\022G\n\021TheLast20DaysMain\030\016 \001(\0132,.com.ht"
    "sc.mdc.insight.model.ADFundFlowDetail\022G\n"
    "\021TheLast60DaysMain\030\017 \001(\0132,.com.htsc.mdc."
    "insight.model.ADFundFlowDetail\022J\n\024TheLas"
    "t5DaysMainList\030\020 \003(\0132,.com.htsc.mdc.insi"
    "ght.model.ADFundFlowDetail\022\024\n\014ExchangeDa"
    "te\030\021 \001(\005\022\024\n\014ExchangeTime\030\022 \001(\005\022\035\n\025DataMu"
    "ltiplePowerOf10\030\023 \001(\005\"t\n\020ADFundFlowDetai"
    "l\022\024\n\014OutflowValue\030\001 \001(\003\022\023\n\013InflowValue\030\002"
    " \001(\003\022\022\n\nOutflowQty\030\003 \001(\003\022\021\n\tInflowQty\030\004 "
    "\001(\003\022\016\n\006MDDate\030\005 \001(\005B;\n\032com.htsc.mdc.insi"
    "ght.modelB\030ADFundFlowAnalysisProtosH\001\240\001\001"
    "b\006proto3", 1288);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ADFundFlowAnalysis.proto", &protobuf_RegisterTypes);
  ::com::htsc::mdc::model::protobuf_AddDesc_ESecurityType_2eproto();
  ::com::htsc::mdc::model::protobuf_AddDesc_ESecurityIDSource_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ADFundFlowAnalysis_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ADFundFlowAnalysis_2eproto_once_);
void protobuf_AddDesc_ADFundFlowAnalysis_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ADFundFlowAnalysis_2eproto_once_,
                 &protobuf_AddDesc_ADFundFlowAnalysis_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ADFundFlowAnalysis_2eproto {
  StaticDescriptorInitializer_ADFundFlowAnalysis_2eproto() {
    protobuf_AddDesc_ADFundFlowAnalysis_2eproto();
  }
} static_descriptor_initializer_ADFundFlowAnalysis_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADFundFlowAnalysis::kHTSCSecurityIDFieldNumber;
const int ADFundFlowAnalysis::kMDDateFieldNumber;
const int ADFundFlowAnalysis::kMDTimeFieldNumber;
const int ADFundFlowAnalysis::kDataTimestampFieldNumber;
const int ADFundFlowAnalysis::kSecurityIDSourceFieldNumber;
const int ADFundFlowAnalysis::kSecurityTypeFieldNumber;
const int ADFundFlowAnalysis::kSuperLargeOrderFieldNumber;
const int ADFundFlowAnalysis::kLargeOrderFieldNumber;
const int ADFundFlowAnalysis::kMediumOrderFieldNumber;
const int ADFundFlowAnalysis::kSmallOrderFieldNumber;
const int ADFundFlowAnalysis::kMainOrderFieldNumber;
const int ADFundFlowAnalysis::kTheLast5DaysMainFieldNumber;
const int ADFundFlowAnalysis::kTheLast10DaysMainFieldNumber;
const int ADFundFlowAnalysis::kTheLast20DaysMainFieldNumber;
const int ADFundFlowAnalysis::kTheLast60DaysMainFieldNumber;
const int ADFundFlowAnalysis::kTheLast5DaysMainListFieldNumber;
const int ADFundFlowAnalysis::kExchangeDateFieldNumber;
const int ADFundFlowAnalysis::kExchangeTimeFieldNumber;
const int ADFundFlowAnalysis::kDataMultiplePowerOf10FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADFundFlowAnalysis::ADFundFlowAnalysis()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ADFundFlowAnalysis_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.ADFundFlowAnalysis)
}

void ADFundFlowAnalysis::InitAsDefaultInstance() {
  superlargeorder_ = const_cast< ::com::htsc::mdc::insight::model::ADFundFlowDetail*>(
      ::com::htsc::mdc::insight::model::ADFundFlowDetail::internal_default_instance());
  largeorder_ = const_cast< ::com::htsc::mdc::insight::model::ADFundFlowDetail*>(
      ::com::htsc::mdc::insight::model::ADFundFlowDetail::internal_default_instance());
  mediumorder_ = const_cast< ::com::htsc::mdc::insight::model::ADFundFlowDetail*>(
      ::com::htsc::mdc::insight::model::ADFundFlowDetail::internal_default_instance());
  smallorder_ = const_cast< ::com::htsc::mdc::insight::model::ADFundFlowDetail*>(
      ::com::htsc::mdc::insight::model::ADFundFlowDetail::internal_default_instance());
  mainorder_ = const_cast< ::com::htsc::mdc::insight::model::ADFundFlowDetail*>(
      ::com::htsc::mdc::insight::model::ADFundFlowDetail::internal_default_instance());
  thelast5daysmain_ = const_cast< ::com::htsc::mdc::insight::model::ADFundFlowDetail*>(
      ::com::htsc::mdc::insight::model::ADFundFlowDetail::internal_default_instance());
  thelast10daysmain_ = const_cast< ::com::htsc::mdc::insight::model::ADFundFlowDetail*>(
      ::com::htsc::mdc::insight::model::ADFundFlowDetail::internal_default_instance());
  thelast20daysmain_ = const_cast< ::com::htsc::mdc::insight::model::ADFundFlowDetail*>(
      ::com::htsc::mdc::insight::model::ADFundFlowDetail::internal_default_instance());
  thelast60daysmain_ = const_cast< ::com::htsc::mdc::insight::model::ADFundFlowDetail*>(
      ::com::htsc::mdc::insight::model::ADFundFlowDetail::internal_default_instance());
}

ADFundFlowAnalysis::ADFundFlowAnalysis(const ADFundFlowAnalysis& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADFundFlowAnalysis)
}

void ADFundFlowAnalysis::SharedCtor() {
  htscsecurityid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  superlargeorder_ = NULL;
  largeorder_ = NULL;
  mediumorder_ = NULL;
  smallorder_ = NULL;
  mainorder_ = NULL;
  thelast5daysmain_ = NULL;
  thelast10daysmain_ = NULL;
  thelast20daysmain_ = NULL;
  thelast60daysmain_ = NULL;
  ::memset(&mddate_, 0, reinterpret_cast<char*>(&datamultiplepowerof10_) -
    reinterpret_cast<char*>(&mddate_) + sizeof(datamultiplepowerof10_));
  _cached_size_ = 0;
}

ADFundFlowAnalysis::~ADFundFlowAnalysis() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADFundFlowAnalysis)
  SharedDtor();
}

void ADFundFlowAnalysis::SharedDtor() {
  htscsecurityid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &ADFundFlowAnalysis_default_instance_.get()) {
    delete superlargeorder_;
    delete largeorder_;
    delete mediumorder_;
    delete smallorder_;
    delete mainorder_;
    delete thelast5daysmain_;
    delete thelast10daysmain_;
    delete thelast20daysmain_;
    delete thelast60daysmain_;
  }
}

void ADFundFlowAnalysis::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ADFundFlowAnalysis::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ADFundFlowAnalysis_descriptor_;
}

const ADFundFlowAnalysis& ADFundFlowAnalysis::default_instance() {
  protobuf_InitDefaults_ADFundFlowAnalysis_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ADFundFlowAnalysis> ADFundFlowAnalysis_default_instance_;

ADFundFlowAnalysis* ADFundFlowAnalysis::New(::google::protobuf::Arena* arena) const {
  ADFundFlowAnalysis* n = new ADFundFlowAnalysis;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ADFundFlowAnalysis::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADFundFlowAnalysis)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ADFundFlowAnalysis, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ADFundFlowAnalysis*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mddate_, securitytype_);
  htscsecurityid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && superlargeorder_ != NULL) delete superlargeorder_;
  superlargeorder_ = NULL;
  if (GetArenaNoVirtual() == NULL && largeorder_ != NULL) delete largeorder_;
  largeorder_ = NULL;
  if (GetArenaNoVirtual() == NULL && mediumorder_ != NULL) delete mediumorder_;
  mediumorder_ = NULL;
  if (GetArenaNoVirtual() == NULL && smallorder_ != NULL) delete smallorder_;
  smallorder_ = NULL;
  if (GetArenaNoVirtual() == NULL && mainorder_ != NULL) delete mainorder_;
  mainorder_ = NULL;
  if (GetArenaNoVirtual() == NULL && thelast5daysmain_ != NULL) delete thelast5daysmain_;
  thelast5daysmain_ = NULL;
  if (GetArenaNoVirtual() == NULL && thelast10daysmain_ != NULL) delete thelast10daysmain_;
  thelast10daysmain_ = NULL;
  if (GetArenaNoVirtual() == NULL && thelast20daysmain_ != NULL) delete thelast20daysmain_;
  thelast20daysmain_ = NULL;
  if (GetArenaNoVirtual() == NULL && thelast60daysmain_ != NULL) delete thelast60daysmain_;
  thelast60daysmain_ = NULL;
  ZR_(exchangedate_, datamultiplepowerof10_);

#undef ZR_HELPER_
#undef ZR_

  thelast5daysmainlist_.Clear();
}

bool ADFundFlowAnalysis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.ADFundFlowAnalysis)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string HTSCSecurityID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_htscsecurityid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->htscsecurityid().data(), this->htscsecurityid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.ADFundFlowAnalysis.HTSCSecurityID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MDDate;
        break;
      }

      // optional int32 MDDate = 2;
      case 2: {
        if (tag == 16) {
         parse_MDDate:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mddate_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MDTime;
        break;
      }

      // optional int32 MDTime = 3;
      case 3: {
        if (tag == 24) {
         parse_MDTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mdtime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_DataTimestamp;
        break;
      }

      // optional int64 DataTimestamp = 4;
      case 4: {
        if (tag == 32) {
         parse_DataTimestamp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &datatimestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_securityIDSource;
        break;
      }

      // optional .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
      case 5: {
        if (tag == 40) {
         parse_securityIDSource:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_securityidsource(static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_securityType;
        break;
      }

      // optional .com.htsc.mdc.model.ESecurityType securityType = 6;
      case 6: {
        if (tag == 48) {
         parse_securityType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_securitytype(static_cast< ::com::htsc::mdc::model::ESecurityType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_SuperLargeOrder;
        break;
      }

      // optional .com.htsc.mdc.insight.model.ADFundFlowDetail SuperLargeOrder = 7;
      case 7: {
        if (tag == 58) {
         parse_SuperLargeOrder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_superlargeorder()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_LargeOrder;
        break;
      }

      // optional .com.htsc.mdc.insight.model.ADFundFlowDetail LargeOrder = 8;
      case 8: {
        if (tag == 66) {
         parse_LargeOrder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_largeorder()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_MediumOrder;
        break;
      }

      // optional .com.htsc.mdc.insight.model.ADFundFlowDetail MediumOrder = 9;
      case 9: {
        if (tag == 74) {
         parse_MediumOrder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mediumorder()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_SmallOrder;
        break;
      }

      // optional .com.htsc.mdc.insight.model.ADFundFlowDetail SmallOrder = 10;
      case 10: {
        if (tag == 82) {
         parse_SmallOrder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_smallorder()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_MainOrder;
        break;
      }

      // optional .com.htsc.mdc.insight.model.ADFundFlowDetail MainOrder = 11;
      case 11: {
        if (tag == 90) {
         parse_MainOrder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mainorder()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_TheLast5DaysMain;
        break;
      }

      // optional .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast5DaysMain = 12;
      case 12: {
        if (tag == 98) {
         parse_TheLast5DaysMain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_thelast5daysmain()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_TheLast10DaysMain;
        break;
      }

      // optional .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast10DaysMain = 13;
      case 13: {
        if (tag == 106) {
         parse_TheLast10DaysMain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_thelast10daysmain()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_TheLast20DaysMain;
        break;
      }

      // optional .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast20DaysMain = 14;
      case 14: {
        if (tag == 114) {
         parse_TheLast20DaysMain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_thelast20daysmain()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_TheLast60DaysMain;
        break;
      }

      // optional .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast60DaysMain = 15;
      case 15: {
        if (tag == 122) {
         parse_TheLast60DaysMain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_thelast60daysmain()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_TheLast5DaysMainList;
        break;
      }

      // repeated .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast5DaysMainList = 16;
      case 16: {
        if (tag == 130) {
         parse_TheLast5DaysMainList:
          DO_(input->IncrementRecursionDepth());
         parse_loop_TheLast5DaysMainList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_thelast5daysmainlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_loop_TheLast5DaysMainList;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(136)) goto parse_ExchangeDate;
        break;
      }

      // optional int32 ExchangeDate = 17;
      case 17: {
        if (tag == 136) {
         parse_ExchangeDate:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchangedate_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_ExchangeTime;
        break;
      }

      // optional int32 ExchangeTime = 18;
      case 18: {
        if (tag == 144) {
         parse_ExchangeTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchangetime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_DataMultiplePowerOf10;
        break;
      }

      // optional int32 DataMultiplePowerOf10 = 19;
      case 19: {
        if (tag == 152) {
         parse_DataMultiplePowerOf10:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datamultiplepowerof10_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.ADFundFlowAnalysis)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.ADFundFlowAnalysis)
  return false;
#undef DO_
}

void ADFundFlowAnalysis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.ADFundFlowAnalysis)
  // optional string HTSCSecurityID = 1;
  if (this->htscsecurityid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->htscsecurityid().data(), this->htscsecurityid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADFundFlowAnalysis.HTSCSecurityID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->htscsecurityid(), output);
  }

  // optional int32 MDDate = 2;
  if (this->mddate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mddate(), output);
  }

  // optional int32 MDTime = 3;
  if (this->mdtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mdtime(), output);
  }

  // optional int64 DataTimestamp = 4;
  if (this->datatimestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->datatimestamp(), output);
  }

  // optional .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  if (this->securityidsource() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->securityidsource(), output);
  }

  // optional .com.htsc.mdc.model.ESecurityType securityType = 6;
  if (this->securitytype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->securitytype(), output);
  }

  // optional .com.htsc.mdc.insight.model.ADFundFlowDetail SuperLargeOrder = 7;
  if (this->has_superlargeorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->superlargeorder_, output);
  }

  // optional .com.htsc.mdc.insight.model.ADFundFlowDetail LargeOrder = 8;
  if (this->has_largeorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->largeorder_, output);
  }

  // optional .com.htsc.mdc.insight.model.ADFundFlowDetail MediumOrder = 9;
  if (this->has_mediumorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->mediumorder_, output);
  }

  // optional .com.htsc.mdc.insight.model.ADFundFlowDetail SmallOrder = 10;
  if (this->has_smallorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->smallorder_, output);
  }

  // optional .com.htsc.mdc.insight.model.ADFundFlowDetail MainOrder = 11;
  if (this->has_mainorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->mainorder_, output);
  }

  // optional .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast5DaysMain = 12;
  if (this->has_thelast5daysmain()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->thelast5daysmain_, output);
  }

  // optional .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast10DaysMain = 13;
  if (this->has_thelast10daysmain()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->thelast10daysmain_, output);
  }

  // optional .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast20DaysMain = 14;
  if (this->has_thelast20daysmain()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->thelast20daysmain_, output);
  }

  // optional .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast60DaysMain = 15;
  if (this->has_thelast60daysmain()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->thelast60daysmain_, output);
  }

  // repeated .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast5DaysMainList = 16;
  for (unsigned int i = 0, n = this->thelast5daysmainlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->thelast5daysmainlist(i), output);
  }

  // optional int32 ExchangeDate = 17;
  if (this->exchangedate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->exchangedate(), output);
  }

  // optional int32 ExchangeTime = 18;
  if (this->exchangetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->exchangetime(), output);
  }

  // optional int32 DataMultiplePowerOf10 = 19;
  if (this->datamultiplepowerof10() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->datamultiplepowerof10(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.ADFundFlowAnalysis)
}

::google::protobuf::uint8* ADFundFlowAnalysis::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADFundFlowAnalysis)
  // optional string HTSCSecurityID = 1;
  if (this->htscsecurityid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->htscsecurityid().data(), this->htscsecurityid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADFundFlowAnalysis.HTSCSecurityID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->htscsecurityid(), target);
  }

  // optional int32 MDDate = 2;
  if (this->mddate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mddate(), target);
  }

  // optional int32 MDTime = 3;
  if (this->mdtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mdtime(), target);
  }

  // optional int64 DataTimestamp = 4;
  if (this->datatimestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->datatimestamp(), target);
  }

  // optional .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  if (this->securityidsource() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->securityidsource(), target);
  }

  // optional .com.htsc.mdc.model.ESecurityType securityType = 6;
  if (this->securitytype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->securitytype(), target);
  }

  // optional .com.htsc.mdc.insight.model.ADFundFlowDetail SuperLargeOrder = 7;
  if (this->has_superlargeorder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->superlargeorder_, false, target);
  }

  // optional .com.htsc.mdc.insight.model.ADFundFlowDetail LargeOrder = 8;
  if (this->has_largeorder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->largeorder_, false, target);
  }

  // optional .com.htsc.mdc.insight.model.ADFundFlowDetail MediumOrder = 9;
  if (this->has_mediumorder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->mediumorder_, false, target);
  }

  // optional .com.htsc.mdc.insight.model.ADFundFlowDetail SmallOrder = 10;
  if (this->has_smallorder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->smallorder_, false, target);
  }

  // optional .com.htsc.mdc.insight.model.ADFundFlowDetail MainOrder = 11;
  if (this->has_mainorder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->mainorder_, false, target);
  }

  // optional .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast5DaysMain = 12;
  if (this->has_thelast5daysmain()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->thelast5daysmain_, false, target);
  }

  // optional .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast10DaysMain = 13;
  if (this->has_thelast10daysmain()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->thelast10daysmain_, false, target);
  }

  // optional .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast20DaysMain = 14;
  if (this->has_thelast20daysmain()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->thelast20daysmain_, false, target);
  }

  // optional .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast60DaysMain = 15;
  if (this->has_thelast60daysmain()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->thelast60daysmain_, false, target);
  }

  // repeated .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast5DaysMainList = 16;
  for (unsigned int i = 0, n = this->thelast5daysmainlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, this->thelast5daysmainlist(i), false, target);
  }

  // optional int32 ExchangeDate = 17;
  if (this->exchangedate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->exchangedate(), target);
  }

  // optional int32 ExchangeTime = 18;
  if (this->exchangetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->exchangetime(), target);
  }

  // optional int32 DataMultiplePowerOf10 = 19;
  if (this->datamultiplepowerof10() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->datamultiplepowerof10(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADFundFlowAnalysis)
  return target;
}

size_t ADFundFlowAnalysis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADFundFlowAnalysis)
  size_t total_size = 0;

  // optional string HTSCSecurityID = 1;
  if (this->htscsecurityid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->htscsecurityid());
  }

  // optional int32 MDDate = 2;
  if (this->mddate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mddate());
  }

  // optional int32 MDTime = 3;
  if (this->mdtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mdtime());
  }

  // optional int64 DataTimestamp = 4;
  if (this->datatimestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->datatimestamp());
  }

  // optional .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  if (this->securityidsource() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->securityidsource());
  }

  // optional .com.htsc.mdc.model.ESecurityType securityType = 6;
  if (this->securitytype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->securitytype());
  }

  // optional .com.htsc.mdc.insight.model.ADFundFlowDetail SuperLargeOrder = 7;
  if (this->has_superlargeorder()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->superlargeorder_);
  }

  // optional .com.htsc.mdc.insight.model.ADFundFlowDetail LargeOrder = 8;
  if (this->has_largeorder()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->largeorder_);
  }

  // optional .com.htsc.mdc.insight.model.ADFundFlowDetail MediumOrder = 9;
  if (this->has_mediumorder()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->mediumorder_);
  }

  // optional .com.htsc.mdc.insight.model.ADFundFlowDetail SmallOrder = 10;
  if (this->has_smallorder()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->smallorder_);
  }

  // optional .com.htsc.mdc.insight.model.ADFundFlowDetail MainOrder = 11;
  if (this->has_mainorder()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->mainorder_);
  }

  // optional .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast5DaysMain = 12;
  if (this->has_thelast5daysmain()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->thelast5daysmain_);
  }

  // optional .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast10DaysMain = 13;
  if (this->has_thelast10daysmain()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->thelast10daysmain_);
  }

  // optional .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast20DaysMain = 14;
  if (this->has_thelast20daysmain()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->thelast20daysmain_);
  }

  // optional .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast60DaysMain = 15;
  if (this->has_thelast60daysmain()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->thelast60daysmain_);
  }

  // optional int32 ExchangeDate = 17;
  if (this->exchangedate() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exchangedate());
  }

  // optional int32 ExchangeTime = 18;
  if (this->exchangetime() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exchangetime());
  }

  // optional int32 DataMultiplePowerOf10 = 19;
  if (this->datamultiplepowerof10() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->datamultiplepowerof10());
  }

  // repeated .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast5DaysMainList = 16;
  {
    unsigned int count = this->thelast5daysmainlist_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->thelast5daysmainlist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ADFundFlowAnalysis::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.ADFundFlowAnalysis)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ADFundFlowAnalysis* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ADFundFlowAnalysis>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.ADFundFlowAnalysis)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.ADFundFlowAnalysis)
    UnsafeMergeFrom(*source);
  }
}

void ADFundFlowAnalysis::MergeFrom(const ADFundFlowAnalysis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADFundFlowAnalysis)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ADFundFlowAnalysis::UnsafeMergeFrom(const ADFundFlowAnalysis& from) {
  GOOGLE_DCHECK(&from != this);
  thelast5daysmainlist_.MergeFrom(from.thelast5daysmainlist_);
  if (from.htscsecurityid().size() > 0) {

    htscsecurityid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.htscsecurityid_);
  }
  if (from.mddate() != 0) {
    set_mddate(from.mddate());
  }
  if (from.mdtime() != 0) {
    set_mdtime(from.mdtime());
  }
  if (from.datatimestamp() != 0) {
    set_datatimestamp(from.datatimestamp());
  }
  if (from.securityidsource() != 0) {
    set_securityidsource(from.securityidsource());
  }
  if (from.securitytype() != 0) {
    set_securitytype(from.securitytype());
  }
  if (from.has_superlargeorder()) {
    mutable_superlargeorder()->::com::htsc::mdc::insight::model::ADFundFlowDetail::MergeFrom(from.superlargeorder());
  }
  if (from.has_largeorder()) {
    mutable_largeorder()->::com::htsc::mdc::insight::model::ADFundFlowDetail::MergeFrom(from.largeorder());
  }
  if (from.has_mediumorder()) {
    mutable_mediumorder()->::com::htsc::mdc::insight::model::ADFundFlowDetail::MergeFrom(from.mediumorder());
  }
  if (from.has_smallorder()) {
    mutable_smallorder()->::com::htsc::mdc::insight::model::ADFundFlowDetail::MergeFrom(from.smallorder());
  }
  if (from.has_mainorder()) {
    mutable_mainorder()->::com::htsc::mdc::insight::model::ADFundFlowDetail::MergeFrom(from.mainorder());
  }
  if (from.has_thelast5daysmain()) {
    mutable_thelast5daysmain()->::com::htsc::mdc::insight::model::ADFundFlowDetail::MergeFrom(from.thelast5daysmain());
  }
  if (from.has_thelast10daysmain()) {
    mutable_thelast10daysmain()->::com::htsc::mdc::insight::model::ADFundFlowDetail::MergeFrom(from.thelast10daysmain());
  }
  if (from.has_thelast20daysmain()) {
    mutable_thelast20daysmain()->::com::htsc::mdc::insight::model::ADFundFlowDetail::MergeFrom(from.thelast20daysmain());
  }
  if (from.has_thelast60daysmain()) {
    mutable_thelast60daysmain()->::com::htsc::mdc::insight::model::ADFundFlowDetail::MergeFrom(from.thelast60daysmain());
  }
  if (from.exchangedate() != 0) {
    set_exchangedate(from.exchangedate());
  }
  if (from.exchangetime() != 0) {
    set_exchangetime(from.exchangetime());
  }
  if (from.datamultiplepowerof10() != 0) {
    set_datamultiplepowerof10(from.datamultiplepowerof10());
  }
}

void ADFundFlowAnalysis::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.ADFundFlowAnalysis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADFundFlowAnalysis::CopyFrom(const ADFundFlowAnalysis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADFundFlowAnalysis)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ADFundFlowAnalysis::IsInitialized() const {

  return true;
}

void ADFundFlowAnalysis::Swap(ADFundFlowAnalysis* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADFundFlowAnalysis::InternalSwap(ADFundFlowAnalysis* other) {
  htscsecurityid_.Swap(&other->htscsecurityid_);
  std::swap(mddate_, other->mddate_);
  std::swap(mdtime_, other->mdtime_);
  std::swap(datatimestamp_, other->datatimestamp_);
  std::swap(securityidsource_, other->securityidsource_);
  std::swap(securitytype_, other->securitytype_);
  std::swap(superlargeorder_, other->superlargeorder_);
  std::swap(largeorder_, other->largeorder_);
  std::swap(mediumorder_, other->mediumorder_);
  std::swap(smallorder_, other->smallorder_);
  std::swap(mainorder_, other->mainorder_);
  std::swap(thelast5daysmain_, other->thelast5daysmain_);
  std::swap(thelast10daysmain_, other->thelast10daysmain_);
  std::swap(thelast20daysmain_, other->thelast20daysmain_);
  std::swap(thelast60daysmain_, other->thelast60daysmain_);
  thelast5daysmainlist_.UnsafeArenaSwap(&other->thelast5daysmainlist_);
  std::swap(exchangedate_, other->exchangedate_);
  std::swap(exchangetime_, other->exchangetime_);
  std::swap(datamultiplepowerof10_, other->datamultiplepowerof10_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ADFundFlowAnalysis::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ADFundFlowAnalysis_descriptor_;
  metadata.reflection = ADFundFlowAnalysis_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ADFundFlowAnalysis

// optional string HTSCSecurityID = 1;
void ADFundFlowAnalysis::clear_htscsecurityid() {
  htscsecurityid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ADFundFlowAnalysis::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.HTSCSecurityID)
  return htscsecurityid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ADFundFlowAnalysis::set_htscsecurityid(const ::std::string& value) {
  
  htscsecurityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowAnalysis.HTSCSecurityID)
}
void ADFundFlowAnalysis::set_htscsecurityid(const char* value) {
  
  htscsecurityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.ADFundFlowAnalysis.HTSCSecurityID)
}
void ADFundFlowAnalysis::set_htscsecurityid(const char* value, size_t size) {
  
  htscsecurityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.ADFundFlowAnalysis.HTSCSecurityID)
}
::std::string* ADFundFlowAnalysis::mutable_htscsecurityid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADFundFlowAnalysis.HTSCSecurityID)
  return htscsecurityid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ADFundFlowAnalysis::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADFundFlowAnalysis.HTSCSecurityID)
  
  return htscsecurityid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ADFundFlowAnalysis::set_allocated_htscsecurityid(::std::string* htscsecurityid) {
  if (htscsecurityid != NULL) {
    
  } else {
    
  }
  htscsecurityid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), htscsecurityid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADFundFlowAnalysis.HTSCSecurityID)
}

// optional int32 MDDate = 2;
void ADFundFlowAnalysis::clear_mddate() {
  mddate_ = 0;
}
::google::protobuf::int32 ADFundFlowAnalysis::mddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MDDate)
  return mddate_;
}
void ADFundFlowAnalysis::set_mddate(::google::protobuf::int32 value) {
  
  mddate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MDDate)
}

// optional int32 MDTime = 3;
void ADFundFlowAnalysis::clear_mdtime() {
  mdtime_ = 0;
}
::google::protobuf::int32 ADFundFlowAnalysis::mdtime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MDTime)
  return mdtime_;
}
void ADFundFlowAnalysis::set_mdtime(::google::protobuf::int32 value) {
  
  mdtime_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MDTime)
}

// optional int64 DataTimestamp = 4;
void ADFundFlowAnalysis::clear_datatimestamp() {
  datatimestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADFundFlowAnalysis::datatimestamp() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.DataTimestamp)
  return datatimestamp_;
}
void ADFundFlowAnalysis::set_datatimestamp(::google::protobuf::int64 value) {
  
  datatimestamp_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowAnalysis.DataTimestamp)
}

// optional .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
void ADFundFlowAnalysis::clear_securityidsource() {
  securityidsource_ = 0;
}
::com::htsc::mdc::model::ESecurityIDSource ADFundFlowAnalysis::securityidsource() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.securityIDSource)
  return static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(securityidsource_);
}
void ADFundFlowAnalysis::set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  
  securityidsource_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowAnalysis.securityIDSource)
}

// optional .com.htsc.mdc.model.ESecurityType securityType = 6;
void ADFundFlowAnalysis::clear_securitytype() {
  securitytype_ = 0;
}
::com::htsc::mdc::model::ESecurityType ADFundFlowAnalysis::securitytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.securityType)
  return static_cast< ::com::htsc::mdc::model::ESecurityType >(securitytype_);
}
void ADFundFlowAnalysis::set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  
  securitytype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowAnalysis.securityType)
}

// optional .com.htsc.mdc.insight.model.ADFundFlowDetail SuperLargeOrder = 7;
bool ADFundFlowAnalysis::has_superlargeorder() const {
  return this != internal_default_instance() && superlargeorder_ != NULL;
}
void ADFundFlowAnalysis::clear_superlargeorder() {
  if (GetArenaNoVirtual() == NULL && superlargeorder_ != NULL) delete superlargeorder_;
  superlargeorder_ = NULL;
}
const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::superlargeorder() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.SuperLargeOrder)
  return superlargeorder_ != NULL ? *superlargeorder_
                         : *::com::htsc::mdc::insight::model::ADFundFlowDetail::internal_default_instance();
}
::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::mutable_superlargeorder() {
  
  if (superlargeorder_ == NULL) {
    superlargeorder_ = new ::com::htsc::mdc::insight::model::ADFundFlowDetail;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADFundFlowAnalysis.SuperLargeOrder)
  return superlargeorder_;
}
::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::release_superlargeorder() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADFundFlowAnalysis.SuperLargeOrder)
  
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* temp = superlargeorder_;
  superlargeorder_ = NULL;
  return temp;
}
void ADFundFlowAnalysis::set_allocated_superlargeorder(::com::htsc::mdc::insight::model::ADFundFlowDetail* superlargeorder) {
  delete superlargeorder_;
  superlargeorder_ = superlargeorder;
  if (superlargeorder) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADFundFlowAnalysis.SuperLargeOrder)
}

// optional .com.htsc.mdc.insight.model.ADFundFlowDetail LargeOrder = 8;
bool ADFundFlowAnalysis::has_largeorder() const {
  return this != internal_default_instance() && largeorder_ != NULL;
}
void ADFundFlowAnalysis::clear_largeorder() {
  if (GetArenaNoVirtual() == NULL && largeorder_ != NULL) delete largeorder_;
  largeorder_ = NULL;
}
const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::largeorder() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.LargeOrder)
  return largeorder_ != NULL ? *largeorder_
                         : *::com::htsc::mdc::insight::model::ADFundFlowDetail::internal_default_instance();
}
::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::mutable_largeorder() {
  
  if (largeorder_ == NULL) {
    largeorder_ = new ::com::htsc::mdc::insight::model::ADFundFlowDetail;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADFundFlowAnalysis.LargeOrder)
  return largeorder_;
}
::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::release_largeorder() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADFundFlowAnalysis.LargeOrder)
  
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* temp = largeorder_;
  largeorder_ = NULL;
  return temp;
}
void ADFundFlowAnalysis::set_allocated_largeorder(::com::htsc::mdc::insight::model::ADFundFlowDetail* largeorder) {
  delete largeorder_;
  largeorder_ = largeorder;
  if (largeorder) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADFundFlowAnalysis.LargeOrder)
}

// optional .com.htsc.mdc.insight.model.ADFundFlowDetail MediumOrder = 9;
bool ADFundFlowAnalysis::has_mediumorder() const {
  return this != internal_default_instance() && mediumorder_ != NULL;
}
void ADFundFlowAnalysis::clear_mediumorder() {
  if (GetArenaNoVirtual() == NULL && mediumorder_ != NULL) delete mediumorder_;
  mediumorder_ = NULL;
}
const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::mediumorder() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MediumOrder)
  return mediumorder_ != NULL ? *mediumorder_
                         : *::com::htsc::mdc::insight::model::ADFundFlowDetail::internal_default_instance();
}
::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::mutable_mediumorder() {
  
  if (mediumorder_ == NULL) {
    mediumorder_ = new ::com::htsc::mdc::insight::model::ADFundFlowDetail;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MediumOrder)
  return mediumorder_;
}
::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::release_mediumorder() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MediumOrder)
  
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* temp = mediumorder_;
  mediumorder_ = NULL;
  return temp;
}
void ADFundFlowAnalysis::set_allocated_mediumorder(::com::htsc::mdc::insight::model::ADFundFlowDetail* mediumorder) {
  delete mediumorder_;
  mediumorder_ = mediumorder;
  if (mediumorder) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MediumOrder)
}

// optional .com.htsc.mdc.insight.model.ADFundFlowDetail SmallOrder = 10;
bool ADFundFlowAnalysis::has_smallorder() const {
  return this != internal_default_instance() && smallorder_ != NULL;
}
void ADFundFlowAnalysis::clear_smallorder() {
  if (GetArenaNoVirtual() == NULL && smallorder_ != NULL) delete smallorder_;
  smallorder_ = NULL;
}
const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::smallorder() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.SmallOrder)
  return smallorder_ != NULL ? *smallorder_
                         : *::com::htsc::mdc::insight::model::ADFundFlowDetail::internal_default_instance();
}
::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::mutable_smallorder() {
  
  if (smallorder_ == NULL) {
    smallorder_ = new ::com::htsc::mdc::insight::model::ADFundFlowDetail;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADFundFlowAnalysis.SmallOrder)
  return smallorder_;
}
::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::release_smallorder() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADFundFlowAnalysis.SmallOrder)
  
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* temp = smallorder_;
  smallorder_ = NULL;
  return temp;
}
void ADFundFlowAnalysis::set_allocated_smallorder(::com::htsc::mdc::insight::model::ADFundFlowDetail* smallorder) {
  delete smallorder_;
  smallorder_ = smallorder;
  if (smallorder) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADFundFlowAnalysis.SmallOrder)
}

// optional .com.htsc.mdc.insight.model.ADFundFlowDetail MainOrder = 11;
bool ADFundFlowAnalysis::has_mainorder() const {
  return this != internal_default_instance() && mainorder_ != NULL;
}
void ADFundFlowAnalysis::clear_mainorder() {
  if (GetArenaNoVirtual() == NULL && mainorder_ != NULL) delete mainorder_;
  mainorder_ = NULL;
}
const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::mainorder() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MainOrder)
  return mainorder_ != NULL ? *mainorder_
                         : *::com::htsc::mdc::insight::model::ADFundFlowDetail::internal_default_instance();
}
::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::mutable_mainorder() {
  
  if (mainorder_ == NULL) {
    mainorder_ = new ::com::htsc::mdc::insight::model::ADFundFlowDetail;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MainOrder)
  return mainorder_;
}
::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::release_mainorder() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MainOrder)
  
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* temp = mainorder_;
  mainorder_ = NULL;
  return temp;
}
void ADFundFlowAnalysis::set_allocated_mainorder(::com::htsc::mdc::insight::model::ADFundFlowDetail* mainorder) {
  delete mainorder_;
  mainorder_ = mainorder;
  if (mainorder) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MainOrder)
}

// optional .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast5DaysMain = 12;
bool ADFundFlowAnalysis::has_thelast5daysmain() const {
  return this != internal_default_instance() && thelast5daysmain_ != NULL;
}
void ADFundFlowAnalysis::clear_thelast5daysmain() {
  if (GetArenaNoVirtual() == NULL && thelast5daysmain_ != NULL) delete thelast5daysmain_;
  thelast5daysmain_ = NULL;
}
const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::thelast5daysmain() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast5DaysMain)
  return thelast5daysmain_ != NULL ? *thelast5daysmain_
                         : *::com::htsc::mdc::insight::model::ADFundFlowDetail::internal_default_instance();
}
::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::mutable_thelast5daysmain() {
  
  if (thelast5daysmain_ == NULL) {
    thelast5daysmain_ = new ::com::htsc::mdc::insight::model::ADFundFlowDetail;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast5DaysMain)
  return thelast5daysmain_;
}
::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::release_thelast5daysmain() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast5DaysMain)
  
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* temp = thelast5daysmain_;
  thelast5daysmain_ = NULL;
  return temp;
}
void ADFundFlowAnalysis::set_allocated_thelast5daysmain(::com::htsc::mdc::insight::model::ADFundFlowDetail* thelast5daysmain) {
  delete thelast5daysmain_;
  thelast5daysmain_ = thelast5daysmain;
  if (thelast5daysmain) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast5DaysMain)
}

// optional .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast10DaysMain = 13;
bool ADFundFlowAnalysis::has_thelast10daysmain() const {
  return this != internal_default_instance() && thelast10daysmain_ != NULL;
}
void ADFundFlowAnalysis::clear_thelast10daysmain() {
  if (GetArenaNoVirtual() == NULL && thelast10daysmain_ != NULL) delete thelast10daysmain_;
  thelast10daysmain_ = NULL;
}
const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::thelast10daysmain() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast10DaysMain)
  return thelast10daysmain_ != NULL ? *thelast10daysmain_
                         : *::com::htsc::mdc::insight::model::ADFundFlowDetail::internal_default_instance();
}
::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::mutable_thelast10daysmain() {
  
  if (thelast10daysmain_ == NULL) {
    thelast10daysmain_ = new ::com::htsc::mdc::insight::model::ADFundFlowDetail;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast10DaysMain)
  return thelast10daysmain_;
}
::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::release_thelast10daysmain() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast10DaysMain)
  
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* temp = thelast10daysmain_;
  thelast10daysmain_ = NULL;
  return temp;
}
void ADFundFlowAnalysis::set_allocated_thelast10daysmain(::com::htsc::mdc::insight::model::ADFundFlowDetail* thelast10daysmain) {
  delete thelast10daysmain_;
  thelast10daysmain_ = thelast10daysmain;
  if (thelast10daysmain) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast10DaysMain)
}

// optional .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast20DaysMain = 14;
bool ADFundFlowAnalysis::has_thelast20daysmain() const {
  return this != internal_default_instance() && thelast20daysmain_ != NULL;
}
void ADFundFlowAnalysis::clear_thelast20daysmain() {
  if (GetArenaNoVirtual() == NULL && thelast20daysmain_ != NULL) delete thelast20daysmain_;
  thelast20daysmain_ = NULL;
}
const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::thelast20daysmain() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast20DaysMain)
  return thelast20daysmain_ != NULL ? *thelast20daysmain_
                         : *::com::htsc::mdc::insight::model::ADFundFlowDetail::internal_default_instance();
}
::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::mutable_thelast20daysmain() {
  
  if (thelast20daysmain_ == NULL) {
    thelast20daysmain_ = new ::com::htsc::mdc::insight::model::ADFundFlowDetail;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast20DaysMain)
  return thelast20daysmain_;
}
::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::release_thelast20daysmain() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast20DaysMain)
  
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* temp = thelast20daysmain_;
  thelast20daysmain_ = NULL;
  return temp;
}
void ADFundFlowAnalysis::set_allocated_thelast20daysmain(::com::htsc::mdc::insight::model::ADFundFlowDetail* thelast20daysmain) {
  delete thelast20daysmain_;
  thelast20daysmain_ = thelast20daysmain;
  if (thelast20daysmain) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast20DaysMain)
}

// optional .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast60DaysMain = 15;
bool ADFundFlowAnalysis::has_thelast60daysmain() const {
  return this != internal_default_instance() && thelast60daysmain_ != NULL;
}
void ADFundFlowAnalysis::clear_thelast60daysmain() {
  if (GetArenaNoVirtual() == NULL && thelast60daysmain_ != NULL) delete thelast60daysmain_;
  thelast60daysmain_ = NULL;
}
const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::thelast60daysmain() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast60DaysMain)
  return thelast60daysmain_ != NULL ? *thelast60daysmain_
                         : *::com::htsc::mdc::insight::model::ADFundFlowDetail::internal_default_instance();
}
::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::mutable_thelast60daysmain() {
  
  if (thelast60daysmain_ == NULL) {
    thelast60daysmain_ = new ::com::htsc::mdc::insight::model::ADFundFlowDetail;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast60DaysMain)
  return thelast60daysmain_;
}
::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::release_thelast60daysmain() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast60DaysMain)
  
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* temp = thelast60daysmain_;
  thelast60daysmain_ = NULL;
  return temp;
}
void ADFundFlowAnalysis::set_allocated_thelast60daysmain(::com::htsc::mdc::insight::model::ADFundFlowDetail* thelast60daysmain) {
  delete thelast60daysmain_;
  thelast60daysmain_ = thelast60daysmain;
  if (thelast60daysmain) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast60DaysMain)
}

// repeated .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast5DaysMainList = 16;
int ADFundFlowAnalysis::thelast5daysmainlist_size() const {
  return thelast5daysmainlist_.size();
}
void ADFundFlowAnalysis::clear_thelast5daysmainlist() {
  thelast5daysmainlist_.Clear();
}
const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::thelast5daysmainlist(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast5DaysMainList)
  return thelast5daysmainlist_.Get(index);
}
::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::mutable_thelast5daysmainlist(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast5DaysMainList)
  return thelast5daysmainlist_.Mutable(index);
}
::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::add_thelast5daysmainlist() {
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast5DaysMainList)
  return thelast5daysmainlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADFundFlowDetail >*
ADFundFlowAnalysis::mutable_thelast5daysmainlist() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast5DaysMainList)
  return &thelast5daysmainlist_;
}
const ::google::protobuf::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADFundFlowDetail >&
ADFundFlowAnalysis::thelast5daysmainlist() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast5DaysMainList)
  return thelast5daysmainlist_;
}

// optional int32 ExchangeDate = 17;
void ADFundFlowAnalysis::clear_exchangedate() {
  exchangedate_ = 0;
}
::google::protobuf::int32 ADFundFlowAnalysis::exchangedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.ExchangeDate)
  return exchangedate_;
}
void ADFundFlowAnalysis::set_exchangedate(::google::protobuf::int32 value) {
  
  exchangedate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowAnalysis.ExchangeDate)
}

// optional int32 ExchangeTime = 18;
void ADFundFlowAnalysis::clear_exchangetime() {
  exchangetime_ = 0;
}
::google::protobuf::int32 ADFundFlowAnalysis::exchangetime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.ExchangeTime)
  return exchangetime_;
}
void ADFundFlowAnalysis::set_exchangetime(::google::protobuf::int32 value) {
  
  exchangetime_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowAnalysis.ExchangeTime)
}

// optional int32 DataMultiplePowerOf10 = 19;
void ADFundFlowAnalysis::clear_datamultiplepowerof10() {
  datamultiplepowerof10_ = 0;
}
::google::protobuf::int32 ADFundFlowAnalysis::datamultiplepowerof10() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.DataMultiplePowerOf10)
  return datamultiplepowerof10_;
}
void ADFundFlowAnalysis::set_datamultiplepowerof10(::google::protobuf::int32 value) {
  
  datamultiplepowerof10_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowAnalysis.DataMultiplePowerOf10)
}

inline const ADFundFlowAnalysis* ADFundFlowAnalysis::internal_default_instance() {
  return &ADFundFlowAnalysis_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADFundFlowDetail::kOutflowValueFieldNumber;
const int ADFundFlowDetail::kInflowValueFieldNumber;
const int ADFundFlowDetail::kOutflowQtyFieldNumber;
const int ADFundFlowDetail::kInflowQtyFieldNumber;
const int ADFundFlowDetail::kMDDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADFundFlowDetail::ADFundFlowDetail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ADFundFlowAnalysis_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.ADFundFlowDetail)
}

void ADFundFlowDetail::InitAsDefaultInstance() {
}

ADFundFlowDetail::ADFundFlowDetail(const ADFundFlowDetail& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADFundFlowDetail)
}

void ADFundFlowDetail::SharedCtor() {
  ::memset(&outflowvalue_, 0, reinterpret_cast<char*>(&mddate_) -
    reinterpret_cast<char*>(&outflowvalue_) + sizeof(mddate_));
  _cached_size_ = 0;
}

ADFundFlowDetail::~ADFundFlowDetail() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADFundFlowDetail)
  SharedDtor();
}

void ADFundFlowDetail::SharedDtor() {
}

void ADFundFlowDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ADFundFlowDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ADFundFlowDetail_descriptor_;
}

const ADFundFlowDetail& ADFundFlowDetail::default_instance() {
  protobuf_InitDefaults_ADFundFlowAnalysis_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ADFundFlowDetail> ADFundFlowDetail_default_instance_;

ADFundFlowDetail* ADFundFlowDetail::New(::google::protobuf::Arena* arena) const {
  ADFundFlowDetail* n = new ADFundFlowDetail;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ADFundFlowDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADFundFlowDetail)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ADFundFlowDetail, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ADFundFlowDetail*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(outflowvalue_, mddate_);

#undef ZR_HELPER_
#undef ZR_

}

bool ADFundFlowDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.ADFundFlowDetail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 OutflowValue = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &outflowvalue_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_InflowValue;
        break;
      }

      // optional int64 InflowValue = 2;
      case 2: {
        if (tag == 16) {
         parse_InflowValue:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &inflowvalue_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_OutflowQty;
        break;
      }

      // optional int64 OutflowQty = 3;
      case 3: {
        if (tag == 24) {
         parse_OutflowQty:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &outflowqty_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_InflowQty;
        break;
      }

      // optional int64 InflowQty = 4;
      case 4: {
        if (tag == 32) {
         parse_InflowQty:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &inflowqty_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_MDDate;
        break;
      }

      // optional int32 MDDate = 5;
      case 5: {
        if (tag == 40) {
         parse_MDDate:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mddate_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.ADFundFlowDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.ADFundFlowDetail)
  return false;
#undef DO_
}

void ADFundFlowDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.ADFundFlowDetail)
  // optional int64 OutflowValue = 1;
  if (this->outflowvalue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->outflowvalue(), output);
  }

  // optional int64 InflowValue = 2;
  if (this->inflowvalue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->inflowvalue(), output);
  }

  // optional int64 OutflowQty = 3;
  if (this->outflowqty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->outflowqty(), output);
  }

  // optional int64 InflowQty = 4;
  if (this->inflowqty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->inflowqty(), output);
  }

  // optional int32 MDDate = 5;
  if (this->mddate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mddate(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.ADFundFlowDetail)
}

::google::protobuf::uint8* ADFundFlowDetail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADFundFlowDetail)
  // optional int64 OutflowValue = 1;
  if (this->outflowvalue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->outflowvalue(), target);
  }

  // optional int64 InflowValue = 2;
  if (this->inflowvalue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->inflowvalue(), target);
  }

  // optional int64 OutflowQty = 3;
  if (this->outflowqty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->outflowqty(), target);
  }

  // optional int64 InflowQty = 4;
  if (this->inflowqty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->inflowqty(), target);
  }

  // optional int32 MDDate = 5;
  if (this->mddate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mddate(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADFundFlowDetail)
  return target;
}

size_t ADFundFlowDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADFundFlowDetail)
  size_t total_size = 0;

  // optional int64 OutflowValue = 1;
  if (this->outflowvalue() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->outflowvalue());
  }

  // optional int64 InflowValue = 2;
  if (this->inflowvalue() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->inflowvalue());
  }

  // optional int64 OutflowQty = 3;
  if (this->outflowqty() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->outflowqty());
  }

  // optional int64 InflowQty = 4;
  if (this->inflowqty() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->inflowqty());
  }

  // optional int32 MDDate = 5;
  if (this->mddate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mddate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ADFundFlowDetail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.ADFundFlowDetail)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ADFundFlowDetail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ADFundFlowDetail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.ADFundFlowDetail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.ADFundFlowDetail)
    UnsafeMergeFrom(*source);
  }
}

void ADFundFlowDetail::MergeFrom(const ADFundFlowDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADFundFlowDetail)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ADFundFlowDetail::UnsafeMergeFrom(const ADFundFlowDetail& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.outflowvalue() != 0) {
    set_outflowvalue(from.outflowvalue());
  }
  if (from.inflowvalue() != 0) {
    set_inflowvalue(from.inflowvalue());
  }
  if (from.outflowqty() != 0) {
    set_outflowqty(from.outflowqty());
  }
  if (from.inflowqty() != 0) {
    set_inflowqty(from.inflowqty());
  }
  if (from.mddate() != 0) {
    set_mddate(from.mddate());
  }
}

void ADFundFlowDetail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.ADFundFlowDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADFundFlowDetail::CopyFrom(const ADFundFlowDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADFundFlowDetail)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ADFundFlowDetail::IsInitialized() const {

  return true;
}

void ADFundFlowDetail::Swap(ADFundFlowDetail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADFundFlowDetail::InternalSwap(ADFundFlowDetail* other) {
  std::swap(outflowvalue_, other->outflowvalue_);
  std::swap(inflowvalue_, other->inflowvalue_);
  std::swap(outflowqty_, other->outflowqty_);
  std::swap(inflowqty_, other->inflowqty_);
  std::swap(mddate_, other->mddate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ADFundFlowDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ADFundFlowDetail_descriptor_;
  metadata.reflection = ADFundFlowDetail_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ADFundFlowDetail

// optional int64 OutflowValue = 1;
void ADFundFlowDetail::clear_outflowvalue() {
  outflowvalue_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADFundFlowDetail::outflowvalue() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowDetail.OutflowValue)
  return outflowvalue_;
}
void ADFundFlowDetail::set_outflowvalue(::google::protobuf::int64 value) {
  
  outflowvalue_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowDetail.OutflowValue)
}

// optional int64 InflowValue = 2;
void ADFundFlowDetail::clear_inflowvalue() {
  inflowvalue_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADFundFlowDetail::inflowvalue() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowDetail.InflowValue)
  return inflowvalue_;
}
void ADFundFlowDetail::set_inflowvalue(::google::protobuf::int64 value) {
  
  inflowvalue_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowDetail.InflowValue)
}

// optional int64 OutflowQty = 3;
void ADFundFlowDetail::clear_outflowqty() {
  outflowqty_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADFundFlowDetail::outflowqty() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowDetail.OutflowQty)
  return outflowqty_;
}
void ADFundFlowDetail::set_outflowqty(::google::protobuf::int64 value) {
  
  outflowqty_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowDetail.OutflowQty)
}

// optional int64 InflowQty = 4;
void ADFundFlowDetail::clear_inflowqty() {
  inflowqty_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADFundFlowDetail::inflowqty() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowDetail.InflowQty)
  return inflowqty_;
}
void ADFundFlowDetail::set_inflowqty(::google::protobuf::int64 value) {
  
  inflowqty_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowDetail.InflowQty)
}

// optional int32 MDDate = 5;
void ADFundFlowDetail::clear_mddate() {
  mddate_ = 0;
}
::google::protobuf::int32 ADFundFlowDetail::mddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowDetail.MDDate)
  return mddate_;
}
void ADFundFlowDetail::set_mddate(::google::protobuf::int32 value) {
  
  mddate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowDetail.MDDate)
}

inline const ADFundFlowDetail* ADFundFlowDetail::internal_default_instance() {
  return &ADFundFlowDetail_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)
