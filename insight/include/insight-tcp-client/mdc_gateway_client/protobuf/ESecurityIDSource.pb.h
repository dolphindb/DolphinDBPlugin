// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ESecurityIDSource.proto

#ifndef PROTOBUF_ESecurityIDSource_2eproto__INCLUDED
#define PROTOBUF_ESecurityIDSource_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace htsc {
namespace mdc {
namespace model {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ESecurityIDSource_2eproto();
void protobuf_InitDefaults_ESecurityIDSource_2eproto();
void protobuf_AssignDesc_ESecurityIDSource_2eproto();
void protobuf_ShutdownFile_ESecurityIDSource_2eproto();


enum ESecurityIDSource {
  DefaultSecurityIDSource = 0,
  XSHG = 101,
  XSHE = 102,
  NEEQ = 103,
  XSHGFI = 104,
  XSHECA = 105,
  XBSE = 106,
  XSHGFC = 107,
  XSHEFC = 108,
  XHKG = 203,
  HKSC = 204,
  HGHQ = 205,
  CCFX = 301,
  XSGE = 302,
  INE = 303,
  SGEX = 401,
  XCFE = 501,
  CCDC = 502,
  CNEX = 503,
  XDCE = 601,
  XZCE = 602,
  SWS = 701,
  CNI = 702,
  CSI = 703,
  HTIS = 801,
  MORN = 802,
  QB = 803,
  SPDB = 804,
  HTSM = 805,
  SCB = 806,
  CUBE = 807,
  LSE = 901,
  LME = 902,
  LIFFE = 903,
  ICEU = 904,
  BSE = 905,
  NSE = 906,
  NEX = 907,
  APEX = 908,
  ICE_SG = 909,
  SGX = 910,
  TSE = 911,
  TOCOM = 912,
  OSE = 913,
  EUREX = 914,
  ICE = 915,
  CME = 916,
  CBOT = 917,
  CBOE = 918,
  AMEX = 919,
  US = 920,
  NYSE = 921,
  NYMEX = 922,
  COMEX = 923,
  ICUS = 924,
  NASDAQ = 925,
  BBG = 926,
  BMD = 927,
  LUXSE = 928,
  KRX = 929,
  MICEX = 930,
  ASE = 931,
  ISE = 932,
  DME = 933,
  IHK = 934,
  STOXX = 935,
  SPI = 936,
  NIKKEI = 937,
  DJI = 938,
  BATS = 939,
  IEX = 940,
  OPRA = 941,
  ESecurityIDSource_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ESecurityIDSource_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ESecurityIDSource_IsValid(int value);
const ESecurityIDSource ESecurityIDSource_MIN = DefaultSecurityIDSource;
const ESecurityIDSource ESecurityIDSource_MAX = OPRA;
const int ESecurityIDSource_ARRAYSIZE = ESecurityIDSource_MAX + 1;

const ::google::protobuf::EnumDescriptor* ESecurityIDSource_descriptor();
inline const ::std::string& ESecurityIDSource_Name(ESecurityIDSource value) {
  return ::google::protobuf::internal::NameOfEnum(
    ESecurityIDSource_descriptor(), value);
}
inline bool ESecurityIDSource_Parse(
    const ::std::string& name, ESecurityIDSource* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ESecurityIDSource>(
    ESecurityIDSource_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace mdc
}  // namespace htsc
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::htsc::mdc::model::ESecurityIDSource> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::htsc::mdc::model::ESecurityIDSource>() {
  return ::com::htsc::mdc::model::ESecurityIDSource_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ESecurityIDSource_2eproto__INCLUDED
