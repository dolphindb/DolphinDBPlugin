// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ADFundFlowAnalysis.proto

#ifndef PROTOBUF_ADFundFlowAnalysis_2eproto__INCLUDED
#define PROTOBUF_ADFundFlowAnalysis_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ESecurityType.pb.h"
#include "ESecurityIDSource.pb.h"
// @@protoc_insertion_point(includes)

namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ADFundFlowAnalysis_2eproto();
void protobuf_InitDefaults_ADFundFlowAnalysis_2eproto();
void protobuf_AssignDesc_ADFundFlowAnalysis_2eproto();
void protobuf_ShutdownFile_ADFundFlowAnalysis_2eproto();

class ADFundFlowAnalysis;
class ADFundFlowDetail;

// ===================================================================

class ADFundFlowAnalysis : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.ADFundFlowAnalysis) */ {
 public:
  ADFundFlowAnalysis();
  virtual ~ADFundFlowAnalysis();

  ADFundFlowAnalysis(const ADFundFlowAnalysis& from);

  inline ADFundFlowAnalysis& operator=(const ADFundFlowAnalysis& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ADFundFlowAnalysis& default_instance();

  static const ADFundFlowAnalysis* internal_default_instance();

  void Swap(ADFundFlowAnalysis* other);

  // implements Message ----------------------------------------------

  inline ADFundFlowAnalysis* New() const { return New(NULL); }

  ADFundFlowAnalysis* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ADFundFlowAnalysis& from);
  void MergeFrom(const ADFundFlowAnalysis& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ADFundFlowAnalysis* other);
  void UnsafeMergeFrom(const ADFundFlowAnalysis& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string HTSCSecurityID = 1;
  void clear_htscsecurityid();
  static const int kHTSCSecurityIDFieldNumber = 1;
  const ::std::string& htscsecurityid() const;
  void set_htscsecurityid(const ::std::string& value);
  void set_htscsecurityid(const char* value);
  void set_htscsecurityid(const char* value, size_t size);
  ::std::string* mutable_htscsecurityid();
  ::std::string* release_htscsecurityid();
  void set_allocated_htscsecurityid(::std::string* htscsecurityid);

  // optional int32 MDDate = 2;
  void clear_mddate();
  static const int kMDDateFieldNumber = 2;
  ::google::protobuf::int32 mddate() const;
  void set_mddate(::google::protobuf::int32 value);

  // optional int32 MDTime = 3;
  void clear_mdtime();
  static const int kMDTimeFieldNumber = 3;
  ::google::protobuf::int32 mdtime() const;
  void set_mdtime(::google::protobuf::int32 value);

  // optional int64 DataTimestamp = 4;
  void clear_datatimestamp();
  static const int kDataTimestampFieldNumber = 4;
  ::google::protobuf::int64 datatimestamp() const;
  void set_datatimestamp(::google::protobuf::int64 value);

  // optional .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  void clear_securityidsource();
  static const int kSecurityIDSourceFieldNumber = 5;
  ::com::htsc::mdc::model::ESecurityIDSource securityidsource() const;
  void set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);

  // optional .com.htsc.mdc.model.ESecurityType securityType = 6;
  void clear_securitytype();
  static const int kSecurityTypeFieldNumber = 6;
  ::com::htsc::mdc::model::ESecurityType securitytype() const;
  void set_securitytype(::com::htsc::mdc::model::ESecurityType value);

  // optional .com.htsc.mdc.insight.model.ADFundFlowDetail SuperLargeOrder = 7;
  bool has_superlargeorder() const;
  void clear_superlargeorder();
  static const int kSuperLargeOrderFieldNumber = 7;
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail& superlargeorder() const;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* mutable_superlargeorder();
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* release_superlargeorder();
  void set_allocated_superlargeorder(::com::htsc::mdc::insight::model::ADFundFlowDetail* superlargeorder);

  // optional .com.htsc.mdc.insight.model.ADFundFlowDetail LargeOrder = 8;
  bool has_largeorder() const;
  void clear_largeorder();
  static const int kLargeOrderFieldNumber = 8;
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail& largeorder() const;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* mutable_largeorder();
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* release_largeorder();
  void set_allocated_largeorder(::com::htsc::mdc::insight::model::ADFundFlowDetail* largeorder);

  // optional .com.htsc.mdc.insight.model.ADFundFlowDetail MediumOrder = 9;
  bool has_mediumorder() const;
  void clear_mediumorder();
  static const int kMediumOrderFieldNumber = 9;
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail& mediumorder() const;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* mutable_mediumorder();
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* release_mediumorder();
  void set_allocated_mediumorder(::com::htsc::mdc::insight::model::ADFundFlowDetail* mediumorder);

  // optional .com.htsc.mdc.insight.model.ADFundFlowDetail SmallOrder = 10;
  bool has_smallorder() const;
  void clear_smallorder();
  static const int kSmallOrderFieldNumber = 10;
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail& smallorder() const;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* mutable_smallorder();
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* release_smallorder();
  void set_allocated_smallorder(::com::htsc::mdc::insight::model::ADFundFlowDetail* smallorder);

  // optional .com.htsc.mdc.insight.model.ADFundFlowDetail MainOrder = 11;
  bool has_mainorder() const;
  void clear_mainorder();
  static const int kMainOrderFieldNumber = 11;
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail& mainorder() const;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* mutable_mainorder();
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* release_mainorder();
  void set_allocated_mainorder(::com::htsc::mdc::insight::model::ADFundFlowDetail* mainorder);

  // optional .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast5DaysMain = 12;
  bool has_thelast5daysmain() const;
  void clear_thelast5daysmain();
  static const int kTheLast5DaysMainFieldNumber = 12;
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail& thelast5daysmain() const;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* mutable_thelast5daysmain();
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* release_thelast5daysmain();
  void set_allocated_thelast5daysmain(::com::htsc::mdc::insight::model::ADFundFlowDetail* thelast5daysmain);

  // optional .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast10DaysMain = 13;
  bool has_thelast10daysmain() const;
  void clear_thelast10daysmain();
  static const int kTheLast10DaysMainFieldNumber = 13;
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail& thelast10daysmain() const;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* mutable_thelast10daysmain();
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* release_thelast10daysmain();
  void set_allocated_thelast10daysmain(::com::htsc::mdc::insight::model::ADFundFlowDetail* thelast10daysmain);

  // optional .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast20DaysMain = 14;
  bool has_thelast20daysmain() const;
  void clear_thelast20daysmain();
  static const int kTheLast20DaysMainFieldNumber = 14;
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail& thelast20daysmain() const;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* mutable_thelast20daysmain();
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* release_thelast20daysmain();
  void set_allocated_thelast20daysmain(::com::htsc::mdc::insight::model::ADFundFlowDetail* thelast20daysmain);

  // optional .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast60DaysMain = 15;
  bool has_thelast60daysmain() const;
  void clear_thelast60daysmain();
  static const int kTheLast60DaysMainFieldNumber = 15;
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail& thelast60daysmain() const;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* mutable_thelast60daysmain();
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* release_thelast60daysmain();
  void set_allocated_thelast60daysmain(::com::htsc::mdc::insight::model::ADFundFlowDetail* thelast60daysmain);

  // repeated .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast5DaysMainList = 16;
  int thelast5daysmainlist_size() const;
  void clear_thelast5daysmainlist();
  static const int kTheLast5DaysMainListFieldNumber = 16;
  const ::com::htsc::mdc::insight::model::ADFundFlowDetail& thelast5daysmainlist(int index) const;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* mutable_thelast5daysmainlist(int index);
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* add_thelast5daysmainlist();
  ::google::protobuf::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADFundFlowDetail >*
      mutable_thelast5daysmainlist();
  const ::google::protobuf::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADFundFlowDetail >&
      thelast5daysmainlist() const;

  // optional int32 ExchangeDate = 17;
  void clear_exchangedate();
  static const int kExchangeDateFieldNumber = 17;
  ::google::protobuf::int32 exchangedate() const;
  void set_exchangedate(::google::protobuf::int32 value);

  // optional int32 ExchangeTime = 18;
  void clear_exchangetime();
  static const int kExchangeTimeFieldNumber = 18;
  ::google::protobuf::int32 exchangetime() const;
  void set_exchangetime(::google::protobuf::int32 value);

  // optional int32 DataMultiplePowerOf10 = 19;
  void clear_datamultiplepowerof10();
  static const int kDataMultiplePowerOf10FieldNumber = 19;
  ::google::protobuf::int32 datamultiplepowerof10() const;
  void set_datamultiplepowerof10(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.ADFundFlowAnalysis)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADFundFlowDetail > thelast5daysmainlist_;
  ::google::protobuf::internal::ArenaStringPtr htscsecurityid_;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* superlargeorder_;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* largeorder_;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* mediumorder_;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* smallorder_;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* mainorder_;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* thelast5daysmain_;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* thelast10daysmain_;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* thelast20daysmain_;
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* thelast60daysmain_;
  ::google::protobuf::int32 mddate_;
  ::google::protobuf::int32 mdtime_;
  ::google::protobuf::int64 datatimestamp_;
  int securityidsource_;
  int securitytype_;
  ::google::protobuf::int32 exchangedate_;
  ::google::protobuf::int32 exchangetime_;
  ::google::protobuf::int32 datamultiplepowerof10_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_ADFundFlowAnalysis_2eproto_impl();
  friend void  protobuf_AddDesc_ADFundFlowAnalysis_2eproto_impl();
  friend void protobuf_AssignDesc_ADFundFlowAnalysis_2eproto();
  friend void protobuf_ShutdownFile_ADFundFlowAnalysis_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ADFundFlowAnalysis> ADFundFlowAnalysis_default_instance_;

// -------------------------------------------------------------------

class ADFundFlowDetail : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.ADFundFlowDetail) */ {
 public:
  ADFundFlowDetail();
  virtual ~ADFundFlowDetail();

  ADFundFlowDetail(const ADFundFlowDetail& from);

  inline ADFundFlowDetail& operator=(const ADFundFlowDetail& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ADFundFlowDetail& default_instance();

  static const ADFundFlowDetail* internal_default_instance();

  void Swap(ADFundFlowDetail* other);

  // implements Message ----------------------------------------------

  inline ADFundFlowDetail* New() const { return New(NULL); }

  ADFundFlowDetail* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ADFundFlowDetail& from);
  void MergeFrom(const ADFundFlowDetail& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ADFundFlowDetail* other);
  void UnsafeMergeFrom(const ADFundFlowDetail& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 OutflowValue = 1;
  void clear_outflowvalue();
  static const int kOutflowValueFieldNumber = 1;
  ::google::protobuf::int64 outflowvalue() const;
  void set_outflowvalue(::google::protobuf::int64 value);

  // optional int64 InflowValue = 2;
  void clear_inflowvalue();
  static const int kInflowValueFieldNumber = 2;
  ::google::protobuf::int64 inflowvalue() const;
  void set_inflowvalue(::google::protobuf::int64 value);

  // optional int64 OutflowQty = 3;
  void clear_outflowqty();
  static const int kOutflowQtyFieldNumber = 3;
  ::google::protobuf::int64 outflowqty() const;
  void set_outflowqty(::google::protobuf::int64 value);

  // optional int64 InflowQty = 4;
  void clear_inflowqty();
  static const int kInflowQtyFieldNumber = 4;
  ::google::protobuf::int64 inflowqty() const;
  void set_inflowqty(::google::protobuf::int64 value);

  // optional int32 MDDate = 5;
  void clear_mddate();
  static const int kMDDateFieldNumber = 5;
  ::google::protobuf::int32 mddate() const;
  void set_mddate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.ADFundFlowDetail)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 outflowvalue_;
  ::google::protobuf::int64 inflowvalue_;
  ::google::protobuf::int64 outflowqty_;
  ::google::protobuf::int64 inflowqty_;
  ::google::protobuf::int32 mddate_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_ADFundFlowAnalysis_2eproto_impl();
  friend void  protobuf_AddDesc_ADFundFlowAnalysis_2eproto_impl();
  friend void protobuf_AssignDesc_ADFundFlowAnalysis_2eproto();
  friend void protobuf_ShutdownFile_ADFundFlowAnalysis_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ADFundFlowDetail> ADFundFlowDetail_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ADFundFlowAnalysis

// optional string HTSCSecurityID = 1;
inline void ADFundFlowAnalysis::clear_htscsecurityid() {
  htscsecurityid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ADFundFlowAnalysis::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.HTSCSecurityID)
  return htscsecurityid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADFundFlowAnalysis::set_htscsecurityid(const ::std::string& value) {
  
  htscsecurityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowAnalysis.HTSCSecurityID)
}
inline void ADFundFlowAnalysis::set_htscsecurityid(const char* value) {
  
  htscsecurityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.ADFundFlowAnalysis.HTSCSecurityID)
}
inline void ADFundFlowAnalysis::set_htscsecurityid(const char* value, size_t size) {
  
  htscsecurityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.ADFundFlowAnalysis.HTSCSecurityID)
}
inline ::std::string* ADFundFlowAnalysis::mutable_htscsecurityid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADFundFlowAnalysis.HTSCSecurityID)
  return htscsecurityid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ADFundFlowAnalysis::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADFundFlowAnalysis.HTSCSecurityID)
  
  return htscsecurityid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADFundFlowAnalysis::set_allocated_htscsecurityid(::std::string* htscsecurityid) {
  if (htscsecurityid != NULL) {
    
  } else {
    
  }
  htscsecurityid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), htscsecurityid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADFundFlowAnalysis.HTSCSecurityID)
}

// optional int32 MDDate = 2;
inline void ADFundFlowAnalysis::clear_mddate() {
  mddate_ = 0;
}
inline ::google::protobuf::int32 ADFundFlowAnalysis::mddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MDDate)
  return mddate_;
}
inline void ADFundFlowAnalysis::set_mddate(::google::protobuf::int32 value) {
  
  mddate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MDDate)
}

// optional int32 MDTime = 3;
inline void ADFundFlowAnalysis::clear_mdtime() {
  mdtime_ = 0;
}
inline ::google::protobuf::int32 ADFundFlowAnalysis::mdtime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MDTime)
  return mdtime_;
}
inline void ADFundFlowAnalysis::set_mdtime(::google::protobuf::int32 value) {
  
  mdtime_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MDTime)
}

// optional int64 DataTimestamp = 4;
inline void ADFundFlowAnalysis::clear_datatimestamp() {
  datatimestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ADFundFlowAnalysis::datatimestamp() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.DataTimestamp)
  return datatimestamp_;
}
inline void ADFundFlowAnalysis::set_datatimestamp(::google::protobuf::int64 value) {
  
  datatimestamp_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowAnalysis.DataTimestamp)
}

// optional .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
inline void ADFundFlowAnalysis::clear_securityidsource() {
  securityidsource_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityIDSource ADFundFlowAnalysis::securityidsource() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.securityIDSource)
  return static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(securityidsource_);
}
inline void ADFundFlowAnalysis::set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  
  securityidsource_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowAnalysis.securityIDSource)
}

// optional .com.htsc.mdc.model.ESecurityType securityType = 6;
inline void ADFundFlowAnalysis::clear_securitytype() {
  securitytype_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityType ADFundFlowAnalysis::securitytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.securityType)
  return static_cast< ::com::htsc::mdc::model::ESecurityType >(securitytype_);
}
inline void ADFundFlowAnalysis::set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  
  securitytype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowAnalysis.securityType)
}

// optional .com.htsc.mdc.insight.model.ADFundFlowDetail SuperLargeOrder = 7;
inline bool ADFundFlowAnalysis::has_superlargeorder() const {
  return this != internal_default_instance() && superlargeorder_ != NULL;
}
inline void ADFundFlowAnalysis::clear_superlargeorder() {
  if (GetArenaNoVirtual() == NULL && superlargeorder_ != NULL) delete superlargeorder_;
  superlargeorder_ = NULL;
}
inline const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::superlargeorder() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.SuperLargeOrder)
  return superlargeorder_ != NULL ? *superlargeorder_
                         : *::com::htsc::mdc::insight::model::ADFundFlowDetail::internal_default_instance();
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::mutable_superlargeorder() {
  
  if (superlargeorder_ == NULL) {
    superlargeorder_ = new ::com::htsc::mdc::insight::model::ADFundFlowDetail;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADFundFlowAnalysis.SuperLargeOrder)
  return superlargeorder_;
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::release_superlargeorder() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADFundFlowAnalysis.SuperLargeOrder)
  
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* temp = superlargeorder_;
  superlargeorder_ = NULL;
  return temp;
}
inline void ADFundFlowAnalysis::set_allocated_superlargeorder(::com::htsc::mdc::insight::model::ADFundFlowDetail* superlargeorder) {
  delete superlargeorder_;
  superlargeorder_ = superlargeorder;
  if (superlargeorder) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADFundFlowAnalysis.SuperLargeOrder)
}

// optional .com.htsc.mdc.insight.model.ADFundFlowDetail LargeOrder = 8;
inline bool ADFundFlowAnalysis::has_largeorder() const {
  return this != internal_default_instance() && largeorder_ != NULL;
}
inline void ADFundFlowAnalysis::clear_largeorder() {
  if (GetArenaNoVirtual() == NULL && largeorder_ != NULL) delete largeorder_;
  largeorder_ = NULL;
}
inline const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::largeorder() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.LargeOrder)
  return largeorder_ != NULL ? *largeorder_
                         : *::com::htsc::mdc::insight::model::ADFundFlowDetail::internal_default_instance();
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::mutable_largeorder() {
  
  if (largeorder_ == NULL) {
    largeorder_ = new ::com::htsc::mdc::insight::model::ADFundFlowDetail;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADFundFlowAnalysis.LargeOrder)
  return largeorder_;
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::release_largeorder() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADFundFlowAnalysis.LargeOrder)
  
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* temp = largeorder_;
  largeorder_ = NULL;
  return temp;
}
inline void ADFundFlowAnalysis::set_allocated_largeorder(::com::htsc::mdc::insight::model::ADFundFlowDetail* largeorder) {
  delete largeorder_;
  largeorder_ = largeorder;
  if (largeorder) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADFundFlowAnalysis.LargeOrder)
}

// optional .com.htsc.mdc.insight.model.ADFundFlowDetail MediumOrder = 9;
inline bool ADFundFlowAnalysis::has_mediumorder() const {
  return this != internal_default_instance() && mediumorder_ != NULL;
}
inline void ADFundFlowAnalysis::clear_mediumorder() {
  if (GetArenaNoVirtual() == NULL && mediumorder_ != NULL) delete mediumorder_;
  mediumorder_ = NULL;
}
inline const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::mediumorder() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MediumOrder)
  return mediumorder_ != NULL ? *mediumorder_
                         : *::com::htsc::mdc::insight::model::ADFundFlowDetail::internal_default_instance();
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::mutable_mediumorder() {
  
  if (mediumorder_ == NULL) {
    mediumorder_ = new ::com::htsc::mdc::insight::model::ADFundFlowDetail;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MediumOrder)
  return mediumorder_;
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::release_mediumorder() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MediumOrder)
  
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* temp = mediumorder_;
  mediumorder_ = NULL;
  return temp;
}
inline void ADFundFlowAnalysis::set_allocated_mediumorder(::com::htsc::mdc::insight::model::ADFundFlowDetail* mediumorder) {
  delete mediumorder_;
  mediumorder_ = mediumorder;
  if (mediumorder) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MediumOrder)
}

// optional .com.htsc.mdc.insight.model.ADFundFlowDetail SmallOrder = 10;
inline bool ADFundFlowAnalysis::has_smallorder() const {
  return this != internal_default_instance() && smallorder_ != NULL;
}
inline void ADFundFlowAnalysis::clear_smallorder() {
  if (GetArenaNoVirtual() == NULL && smallorder_ != NULL) delete smallorder_;
  smallorder_ = NULL;
}
inline const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::smallorder() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.SmallOrder)
  return smallorder_ != NULL ? *smallorder_
                         : *::com::htsc::mdc::insight::model::ADFundFlowDetail::internal_default_instance();
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::mutable_smallorder() {
  
  if (smallorder_ == NULL) {
    smallorder_ = new ::com::htsc::mdc::insight::model::ADFundFlowDetail;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADFundFlowAnalysis.SmallOrder)
  return smallorder_;
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::release_smallorder() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADFundFlowAnalysis.SmallOrder)
  
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* temp = smallorder_;
  smallorder_ = NULL;
  return temp;
}
inline void ADFundFlowAnalysis::set_allocated_smallorder(::com::htsc::mdc::insight::model::ADFundFlowDetail* smallorder) {
  delete smallorder_;
  smallorder_ = smallorder;
  if (smallorder) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADFundFlowAnalysis.SmallOrder)
}

// optional .com.htsc.mdc.insight.model.ADFundFlowDetail MainOrder = 11;
inline bool ADFundFlowAnalysis::has_mainorder() const {
  return this != internal_default_instance() && mainorder_ != NULL;
}
inline void ADFundFlowAnalysis::clear_mainorder() {
  if (GetArenaNoVirtual() == NULL && mainorder_ != NULL) delete mainorder_;
  mainorder_ = NULL;
}
inline const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::mainorder() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MainOrder)
  return mainorder_ != NULL ? *mainorder_
                         : *::com::htsc::mdc::insight::model::ADFundFlowDetail::internal_default_instance();
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::mutable_mainorder() {
  
  if (mainorder_ == NULL) {
    mainorder_ = new ::com::htsc::mdc::insight::model::ADFundFlowDetail;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MainOrder)
  return mainorder_;
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::release_mainorder() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MainOrder)
  
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* temp = mainorder_;
  mainorder_ = NULL;
  return temp;
}
inline void ADFundFlowAnalysis::set_allocated_mainorder(::com::htsc::mdc::insight::model::ADFundFlowDetail* mainorder) {
  delete mainorder_;
  mainorder_ = mainorder;
  if (mainorder) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADFundFlowAnalysis.MainOrder)
}

// optional .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast5DaysMain = 12;
inline bool ADFundFlowAnalysis::has_thelast5daysmain() const {
  return this != internal_default_instance() && thelast5daysmain_ != NULL;
}
inline void ADFundFlowAnalysis::clear_thelast5daysmain() {
  if (GetArenaNoVirtual() == NULL && thelast5daysmain_ != NULL) delete thelast5daysmain_;
  thelast5daysmain_ = NULL;
}
inline const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::thelast5daysmain() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast5DaysMain)
  return thelast5daysmain_ != NULL ? *thelast5daysmain_
                         : *::com::htsc::mdc::insight::model::ADFundFlowDetail::internal_default_instance();
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::mutable_thelast5daysmain() {
  
  if (thelast5daysmain_ == NULL) {
    thelast5daysmain_ = new ::com::htsc::mdc::insight::model::ADFundFlowDetail;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast5DaysMain)
  return thelast5daysmain_;
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::release_thelast5daysmain() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast5DaysMain)
  
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* temp = thelast5daysmain_;
  thelast5daysmain_ = NULL;
  return temp;
}
inline void ADFundFlowAnalysis::set_allocated_thelast5daysmain(::com::htsc::mdc::insight::model::ADFundFlowDetail* thelast5daysmain) {
  delete thelast5daysmain_;
  thelast5daysmain_ = thelast5daysmain;
  if (thelast5daysmain) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast5DaysMain)
}

// optional .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast10DaysMain = 13;
inline bool ADFundFlowAnalysis::has_thelast10daysmain() const {
  return this != internal_default_instance() && thelast10daysmain_ != NULL;
}
inline void ADFundFlowAnalysis::clear_thelast10daysmain() {
  if (GetArenaNoVirtual() == NULL && thelast10daysmain_ != NULL) delete thelast10daysmain_;
  thelast10daysmain_ = NULL;
}
inline const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::thelast10daysmain() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast10DaysMain)
  return thelast10daysmain_ != NULL ? *thelast10daysmain_
                         : *::com::htsc::mdc::insight::model::ADFundFlowDetail::internal_default_instance();
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::mutable_thelast10daysmain() {
  
  if (thelast10daysmain_ == NULL) {
    thelast10daysmain_ = new ::com::htsc::mdc::insight::model::ADFundFlowDetail;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast10DaysMain)
  return thelast10daysmain_;
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::release_thelast10daysmain() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast10DaysMain)
  
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* temp = thelast10daysmain_;
  thelast10daysmain_ = NULL;
  return temp;
}
inline void ADFundFlowAnalysis::set_allocated_thelast10daysmain(::com::htsc::mdc::insight::model::ADFundFlowDetail* thelast10daysmain) {
  delete thelast10daysmain_;
  thelast10daysmain_ = thelast10daysmain;
  if (thelast10daysmain) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast10DaysMain)
}

// optional .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast20DaysMain = 14;
inline bool ADFundFlowAnalysis::has_thelast20daysmain() const {
  return this != internal_default_instance() && thelast20daysmain_ != NULL;
}
inline void ADFundFlowAnalysis::clear_thelast20daysmain() {
  if (GetArenaNoVirtual() == NULL && thelast20daysmain_ != NULL) delete thelast20daysmain_;
  thelast20daysmain_ = NULL;
}
inline const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::thelast20daysmain() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast20DaysMain)
  return thelast20daysmain_ != NULL ? *thelast20daysmain_
                         : *::com::htsc::mdc::insight::model::ADFundFlowDetail::internal_default_instance();
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::mutable_thelast20daysmain() {
  
  if (thelast20daysmain_ == NULL) {
    thelast20daysmain_ = new ::com::htsc::mdc::insight::model::ADFundFlowDetail;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast20DaysMain)
  return thelast20daysmain_;
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::release_thelast20daysmain() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast20DaysMain)
  
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* temp = thelast20daysmain_;
  thelast20daysmain_ = NULL;
  return temp;
}
inline void ADFundFlowAnalysis::set_allocated_thelast20daysmain(::com::htsc::mdc::insight::model::ADFundFlowDetail* thelast20daysmain) {
  delete thelast20daysmain_;
  thelast20daysmain_ = thelast20daysmain;
  if (thelast20daysmain) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast20DaysMain)
}

// optional .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast60DaysMain = 15;
inline bool ADFundFlowAnalysis::has_thelast60daysmain() const {
  return this != internal_default_instance() && thelast60daysmain_ != NULL;
}
inline void ADFundFlowAnalysis::clear_thelast60daysmain() {
  if (GetArenaNoVirtual() == NULL && thelast60daysmain_ != NULL) delete thelast60daysmain_;
  thelast60daysmain_ = NULL;
}
inline const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::thelast60daysmain() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast60DaysMain)
  return thelast60daysmain_ != NULL ? *thelast60daysmain_
                         : *::com::htsc::mdc::insight::model::ADFundFlowDetail::internal_default_instance();
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::mutable_thelast60daysmain() {
  
  if (thelast60daysmain_ == NULL) {
    thelast60daysmain_ = new ::com::htsc::mdc::insight::model::ADFundFlowDetail;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast60DaysMain)
  return thelast60daysmain_;
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::release_thelast60daysmain() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast60DaysMain)
  
  ::com::htsc::mdc::insight::model::ADFundFlowDetail* temp = thelast60daysmain_;
  thelast60daysmain_ = NULL;
  return temp;
}
inline void ADFundFlowAnalysis::set_allocated_thelast60daysmain(::com::htsc::mdc::insight::model::ADFundFlowDetail* thelast60daysmain) {
  delete thelast60daysmain_;
  thelast60daysmain_ = thelast60daysmain;
  if (thelast60daysmain) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast60DaysMain)
}

// repeated .com.htsc.mdc.insight.model.ADFundFlowDetail TheLast5DaysMainList = 16;
inline int ADFundFlowAnalysis::thelast5daysmainlist_size() const {
  return thelast5daysmainlist_.size();
}
inline void ADFundFlowAnalysis::clear_thelast5daysmainlist() {
  thelast5daysmainlist_.Clear();
}
inline const ::com::htsc::mdc::insight::model::ADFundFlowDetail& ADFundFlowAnalysis::thelast5daysmainlist(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast5DaysMainList)
  return thelast5daysmainlist_.Get(index);
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::mutable_thelast5daysmainlist(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast5DaysMainList)
  return thelast5daysmainlist_.Mutable(index);
}
inline ::com::htsc::mdc::insight::model::ADFundFlowDetail* ADFundFlowAnalysis::add_thelast5daysmainlist() {
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast5DaysMainList)
  return thelast5daysmainlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADFundFlowDetail >*
ADFundFlowAnalysis::mutable_thelast5daysmainlist() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast5DaysMainList)
  return &thelast5daysmainlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADFundFlowDetail >&
ADFundFlowAnalysis::thelast5daysmainlist() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.ADFundFlowAnalysis.TheLast5DaysMainList)
  return thelast5daysmainlist_;
}

// optional int32 ExchangeDate = 17;
inline void ADFundFlowAnalysis::clear_exchangedate() {
  exchangedate_ = 0;
}
inline ::google::protobuf::int32 ADFundFlowAnalysis::exchangedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.ExchangeDate)
  return exchangedate_;
}
inline void ADFundFlowAnalysis::set_exchangedate(::google::protobuf::int32 value) {
  
  exchangedate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowAnalysis.ExchangeDate)
}

// optional int32 ExchangeTime = 18;
inline void ADFundFlowAnalysis::clear_exchangetime() {
  exchangetime_ = 0;
}
inline ::google::protobuf::int32 ADFundFlowAnalysis::exchangetime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.ExchangeTime)
  return exchangetime_;
}
inline void ADFundFlowAnalysis::set_exchangetime(::google::protobuf::int32 value) {
  
  exchangetime_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowAnalysis.ExchangeTime)
}

// optional int32 DataMultiplePowerOf10 = 19;
inline void ADFundFlowAnalysis::clear_datamultiplepowerof10() {
  datamultiplepowerof10_ = 0;
}
inline ::google::protobuf::int32 ADFundFlowAnalysis::datamultiplepowerof10() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowAnalysis.DataMultiplePowerOf10)
  return datamultiplepowerof10_;
}
inline void ADFundFlowAnalysis::set_datamultiplepowerof10(::google::protobuf::int32 value) {
  
  datamultiplepowerof10_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowAnalysis.DataMultiplePowerOf10)
}

inline const ADFundFlowAnalysis* ADFundFlowAnalysis::internal_default_instance() {
  return &ADFundFlowAnalysis_default_instance_.get();
}
// -------------------------------------------------------------------

// ADFundFlowDetail

// optional int64 OutflowValue = 1;
inline void ADFundFlowDetail::clear_outflowvalue() {
  outflowvalue_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ADFundFlowDetail::outflowvalue() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowDetail.OutflowValue)
  return outflowvalue_;
}
inline void ADFundFlowDetail::set_outflowvalue(::google::protobuf::int64 value) {
  
  outflowvalue_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowDetail.OutflowValue)
}

// optional int64 InflowValue = 2;
inline void ADFundFlowDetail::clear_inflowvalue() {
  inflowvalue_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ADFundFlowDetail::inflowvalue() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowDetail.InflowValue)
  return inflowvalue_;
}
inline void ADFundFlowDetail::set_inflowvalue(::google::protobuf::int64 value) {
  
  inflowvalue_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowDetail.InflowValue)
}

// optional int64 OutflowQty = 3;
inline void ADFundFlowDetail::clear_outflowqty() {
  outflowqty_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ADFundFlowDetail::outflowqty() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowDetail.OutflowQty)
  return outflowqty_;
}
inline void ADFundFlowDetail::set_outflowqty(::google::protobuf::int64 value) {
  
  outflowqty_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowDetail.OutflowQty)
}

// optional int64 InflowQty = 4;
inline void ADFundFlowDetail::clear_inflowqty() {
  inflowqty_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ADFundFlowDetail::inflowqty() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowDetail.InflowQty)
  return inflowqty_;
}
inline void ADFundFlowDetail::set_inflowqty(::google::protobuf::int64 value) {
  
  inflowqty_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowDetail.InflowQty)
}

// optional int32 MDDate = 5;
inline void ADFundFlowDetail::clear_mddate() {
  mddate_ = 0;
}
inline ::google::protobuf::int32 ADFundFlowDetail::mddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADFundFlowDetail.MDDate)
  return mddate_;
}
inline void ADFundFlowDetail::set_mddate(::google::protobuf::int32 value) {
  
  mddate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADFundFlowDetail.MDDate)
}

inline const ADFundFlowDetail* ADFundFlowDetail::internal_default_instance() {
  return &ADFundFlowDetail_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ADFundFlowAnalysis_2eproto__INCLUDED
