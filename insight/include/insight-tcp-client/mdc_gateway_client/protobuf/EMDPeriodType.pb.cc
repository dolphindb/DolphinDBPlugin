// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EMDPeriodType.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "EMDPeriodType.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace htsc {
namespace mdc {
namespace model {

namespace {

const ::google::protobuf::EnumDescriptor* EMDPeriodType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_EMDPeriodType_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_EMDPeriodType_2eproto() {
  protobuf_AddDesc_EMDPeriodType_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "EMDPeriodType.proto");
  GOOGLE_CHECK(file != NULL);
  EMDPeriodType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_EMDPeriodType_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_EMDPeriodType_2eproto() {
}

void protobuf_InitDefaults_EMDPeriodType_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_EMDPeriodType_2eproto_once_);
void protobuf_InitDefaults_EMDPeriodType_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_EMDPeriodType_2eproto_once_,
                 &protobuf_InitDefaults_EMDPeriodType_2eproto_impl);
}
void protobuf_AddDesc_EMDPeriodType_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_EMDPeriodType_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023EMDPeriodType.proto\022\022com.htsc.mdc.mode"
    "l*\311\002\n\rEMDPeriodType\022\021\n\rDefaultPeriod\020\000\022\016"
    "\n\nPeriod1Min\020\001\022\014\n\010Period1D\020\002\022\016\n\nPeriod5M"
    "in\020\003\022\017\n\013Period15Min\020\004\022\017\n\013Period30Min\020\005\022\014"
    "\n\010Period1H\020\006\022\014\n\010Period1S\020\007\022\014\n\010Period3S\020\010"
    "\022\014\n\010Period5S\020\t\022\r\n\tPeriod15S\020\n\022\r\n\tPeriod3"
    "0S\020\013\022\014\n\010Period2H\020\014\022\014\n\010Period1W\020\r\022\r\n\tPeri"
    "od15D\020\016\022\020\n\014Period1Month\020\017\022\020\n\014Period3Mont"
    "h\020\020\022\020\n\014Period4Month\020\021\022\020\n\014Period6Month\020\022\022"
    "\014\n\010Period1Y\020\023B.\n\022com.htsc.mdc.modelB\023EMD"
    "PeriodTypeProtosH\001\240\001\001b\006proto3", 429);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "EMDPeriodType.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_EMDPeriodType_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_EMDPeriodType_2eproto_once_);
void protobuf_AddDesc_EMDPeriodType_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_EMDPeriodType_2eproto_once_,
                 &protobuf_AddDesc_EMDPeriodType_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_EMDPeriodType_2eproto {
  StaticDescriptorInitializer_EMDPeriodType_2eproto() {
    protobuf_AddDesc_EMDPeriodType_2eproto();
  }
} static_descriptor_initializer_EMDPeriodType_2eproto_;
const ::google::protobuf::EnumDescriptor* EMDPeriodType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMDPeriodType_descriptor_;
}
bool EMDPeriodType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)
