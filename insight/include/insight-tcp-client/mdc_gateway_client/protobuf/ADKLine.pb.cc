// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ADKLine.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ADKLine.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

namespace {

const ::google::protobuf::Descriptor* ADKLine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ADKLine_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ADKLine_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ADKLine_2eproto() {
  protobuf_AddDesc_ADKLine_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ADKLine.proto");
  GOOGLE_CHECK(file != NULL);
  ADKLine_descriptor_ = file->message_type(0);
  static const int ADKLine_offsets_[34] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADKLine, htscsecurityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADKLine, mddate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADKLine, mdtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADKLine, datatimestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADKLine, securityidsource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADKLine, securitytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADKLine, periodtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADKLine, openpx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADKLine, closepx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADKLine, highpx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADKLine, lowpx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADKLine, numtrades_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADKLine, totalvolumetrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADKLine, totalvaluetrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADKLine, iopv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADKLine, openinterest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADKLine, settleprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADKLine, exchangedate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADKLine, exchangetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADKLine, klinecategory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADKLine, afterhoursnumtrades_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADKLine, afterhourstotalvolumetrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADKLine, afterhourstotalvaluetrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADKLine, preclosepx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADKLine, precloseyield_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADKLine, preweightedavgpx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADKLine, preweightedavgyield_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADKLine, closeweightedavgpx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADKLine, closeweightedavgyield_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADKLine, openyield_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADKLine, highyield_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADKLine, lowyield_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADKLine, closeyield_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADKLine, datamultiplepowerof10_),
  };
  ADKLine_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ADKLine_descriptor_,
      ADKLine::internal_default_instance(),
      ADKLine_offsets_,
      -1,
      -1,
      -1,
      sizeof(ADKLine),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADKLine, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ADKLine_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ADKLine_descriptor_, ADKLine::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ADKLine_2eproto() {
  ADKLine_default_instance_.Shutdown();
  delete ADKLine_reflection_;
}

void protobuf_InitDefaults_ADKLine_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::com::htsc::mdc::model::protobuf_InitDefaults_EMDPeriodType_2eproto();
  ::com::htsc::mdc::model::protobuf_InitDefaults_ESecurityType_2eproto();
  ::com::htsc::mdc::model::protobuf_InitDefaults_ESecurityIDSource_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  ADKLine_default_instance_.DefaultConstruct();
  ADKLine_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_ADKLine_2eproto_once_);
void protobuf_InitDefaults_ADKLine_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_ADKLine_2eproto_once_,
                 &protobuf_InitDefaults_ADKLine_2eproto_impl);
}
void protobuf_AddDesc_ADKLine_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_ADKLine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rADKLine.proto\022\032com.htsc.mdc.insight.mo"
    "del\032\023EMDPeriodType.proto\032\023ESecurityType."
    "proto\032\027ESecurityIDSource.proto\"\367\006\n\007ADKLi"
    "ne\022\026\n\016HTSCSecurityID\030\001 \001(\t\022\016\n\006MDDate\030\002 \001"
    "(\005\022\016\n\006MDTime\030\003 \001(\005\022\025\n\rDataTimestamp\030\004 \001("
    "\003\022\?\n\020securityIDSource\030\005 \001(\0162%.com.htsc.m"
    "dc.model.ESecurityIDSource\0227\n\014securityTy"
    "pe\030\006 \001(\0162!.com.htsc.mdc.model.ESecurityT"
    "ype\0225\n\nPeriodType\030\007 \001(\0162!.com.htsc.mdc.m"
    "odel.EMDPeriodType\022\016\n\006OpenPx\030\010 \001(\003\022\017\n\007Cl"
    "osePx\030\t \001(\003\022\016\n\006HighPx\030\n \001(\003\022\r\n\005LowPx\030\013 \001"
    "(\003\022\021\n\tNumTrades\030\014 \001(\003\022\030\n\020TotalVolumeTrad"
    "e\030\r \001(\003\022\027\n\017TotalValueTrade\030\016 \001(\003\022\014\n\004IOPV"
    "\030\017 \001(\003\022\024\n\014OpenInterest\030\020 \001(\003\022\023\n\013SettlePr"
    "ice\030\021 \001(\003\022\024\n\014ExchangeDate\030\022 \001(\005\022\024\n\014Excha"
    "ngeTime\030\023 \001(\005\022\025\n\rKLineCategory\030\024 \001(\005\022\033\n\023"
    "AfterHoursNumTrades\030\025 \001(\003\022\"\n\032AfterHoursT"
    "otalVolumeTrade\030\026 \001(\003\022!\n\031AfterHoursTotal"
    "ValueTrade\030\027 \001(\003\022\022\n\nPreClosePx\030\030 \001(\003\022\025\n\r"
    "PreCloseYield\030\031 \001(\003\022\030\n\020PreWeightedAvgPx\030"
    "\032 \001(\003\022\033\n\023PreWeightedAvgYield\030\033 \001(\003\022\032\n\022Cl"
    "oseWeightedAvgPx\030\034 \001(\003\022\035\n\025CloseWeightedA"
    "vgYield\030\035 \001(\003\022\021\n\tOpenYield\030\036 \001(\003\022\021\n\tHigh"
    "Yield\030\037 \001(\003\022\020\n\010LowYield\030  \001(\003\022\022\n\nCloseYi"
    "eld\030! \001(\003\022\035\n\025DataMultiplePowerOf10\030\" \001(\005"
    "B0\n\032com.htsc.mdc.insight.modelB\rADKLineP"
    "rotosH\001\240\001\001b\006proto3", 1058);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ADKLine.proto", &protobuf_RegisterTypes);
  ::com::htsc::mdc::model::protobuf_AddDesc_EMDPeriodType_2eproto();
  ::com::htsc::mdc::model::protobuf_AddDesc_ESecurityType_2eproto();
  ::com::htsc::mdc::model::protobuf_AddDesc_ESecurityIDSource_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ADKLine_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ADKLine_2eproto_once_);
void protobuf_AddDesc_ADKLine_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ADKLine_2eproto_once_,
                 &protobuf_AddDesc_ADKLine_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ADKLine_2eproto {
  StaticDescriptorInitializer_ADKLine_2eproto() {
    protobuf_AddDesc_ADKLine_2eproto();
  }
} static_descriptor_initializer_ADKLine_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADKLine::kHTSCSecurityIDFieldNumber;
const int ADKLine::kMDDateFieldNumber;
const int ADKLine::kMDTimeFieldNumber;
const int ADKLine::kDataTimestampFieldNumber;
const int ADKLine::kSecurityIDSourceFieldNumber;
const int ADKLine::kSecurityTypeFieldNumber;
const int ADKLine::kPeriodTypeFieldNumber;
const int ADKLine::kOpenPxFieldNumber;
const int ADKLine::kClosePxFieldNumber;
const int ADKLine::kHighPxFieldNumber;
const int ADKLine::kLowPxFieldNumber;
const int ADKLine::kNumTradesFieldNumber;
const int ADKLine::kTotalVolumeTradeFieldNumber;
const int ADKLine::kTotalValueTradeFieldNumber;
const int ADKLine::kIOPVFieldNumber;
const int ADKLine::kOpenInterestFieldNumber;
const int ADKLine::kSettlePriceFieldNumber;
const int ADKLine::kExchangeDateFieldNumber;
const int ADKLine::kExchangeTimeFieldNumber;
const int ADKLine::kKLineCategoryFieldNumber;
const int ADKLine::kAfterHoursNumTradesFieldNumber;
const int ADKLine::kAfterHoursTotalVolumeTradeFieldNumber;
const int ADKLine::kAfterHoursTotalValueTradeFieldNumber;
const int ADKLine::kPreClosePxFieldNumber;
const int ADKLine::kPreCloseYieldFieldNumber;
const int ADKLine::kPreWeightedAvgPxFieldNumber;
const int ADKLine::kPreWeightedAvgYieldFieldNumber;
const int ADKLine::kCloseWeightedAvgPxFieldNumber;
const int ADKLine::kCloseWeightedAvgYieldFieldNumber;
const int ADKLine::kOpenYieldFieldNumber;
const int ADKLine::kHighYieldFieldNumber;
const int ADKLine::kLowYieldFieldNumber;
const int ADKLine::kCloseYieldFieldNumber;
const int ADKLine::kDataMultiplePowerOf10FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADKLine::ADKLine()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ADKLine_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.ADKLine)
}

void ADKLine::InitAsDefaultInstance() {
}

ADKLine::ADKLine(const ADKLine& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADKLine)
}

void ADKLine::SharedCtor() {
  htscsecurityid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mddate_, 0, reinterpret_cast<char*>(&datamultiplepowerof10_) -
    reinterpret_cast<char*>(&mddate_) + sizeof(datamultiplepowerof10_));
  _cached_size_ = 0;
}

ADKLine::~ADKLine() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADKLine)
  SharedDtor();
}

void ADKLine::SharedDtor() {
  htscsecurityid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ADKLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ADKLine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ADKLine_descriptor_;
}

const ADKLine& ADKLine::default_instance() {
  protobuf_InitDefaults_ADKLine_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ADKLine> ADKLine_default_instance_;

ADKLine* ADKLine::New(::google::protobuf::Arena* arena) const {
  ADKLine* n = new ADKLine;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ADKLine::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADKLine)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ADKLine, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ADKLine*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mddate_, openpx_);
  htscsecurityid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  periodtype_ = 0;
  ZR_(closepx_, numtrades_);
  ZR_(totalvolumetrade_, openinterest_);
  ZR_(settleprice_, preclosepx_);
  exchangedate_ = 0;
  ZR_(precloseyield_, lowyield_);
  ZR_(closeyield_, datamultiplepowerof10_);

#undef ZR_HELPER_
#undef ZR_

}

bool ADKLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.ADKLine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string HTSCSecurityID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_htscsecurityid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->htscsecurityid().data(), this->htscsecurityid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.ADKLine.HTSCSecurityID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MDDate;
        break;
      }

      // optional int32 MDDate = 2;
      case 2: {
        if (tag == 16) {
         parse_MDDate:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mddate_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MDTime;
        break;
      }

      // optional int32 MDTime = 3;
      case 3: {
        if (tag == 24) {
         parse_MDTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mdtime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_DataTimestamp;
        break;
      }

      // optional int64 DataTimestamp = 4;
      case 4: {
        if (tag == 32) {
         parse_DataTimestamp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &datatimestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_securityIDSource;
        break;
      }

      // optional .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
      case 5: {
        if (tag == 40) {
         parse_securityIDSource:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_securityidsource(static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_securityType;
        break;
      }

      // optional .com.htsc.mdc.model.ESecurityType securityType = 6;
      case 6: {
        if (tag == 48) {
         parse_securityType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_securitytype(static_cast< ::com::htsc::mdc::model::ESecurityType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_PeriodType;
        break;
      }

      // optional .com.htsc.mdc.model.EMDPeriodType PeriodType = 7;
      case 7: {
        if (tag == 56) {
         parse_PeriodType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_periodtype(static_cast< ::com::htsc::mdc::model::EMDPeriodType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_OpenPx;
        break;
      }

      // optional int64 OpenPx = 8;
      case 8: {
        if (tag == 64) {
         parse_OpenPx:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &openpx_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_ClosePx;
        break;
      }

      // optional int64 ClosePx = 9;
      case 9: {
        if (tag == 72) {
         parse_ClosePx:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &closepx_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_HighPx;
        break;
      }

      // optional int64 HighPx = 10;
      case 10: {
        if (tag == 80) {
         parse_HighPx:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &highpx_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_LowPx;
        break;
      }

      // optional int64 LowPx = 11;
      case 11: {
        if (tag == 88) {
         parse_LowPx:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lowpx_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_NumTrades;
        break;
      }

      // optional int64 NumTrades = 12;
      case 12: {
        if (tag == 96) {
         parse_NumTrades:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &numtrades_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_TotalVolumeTrade;
        break;
      }

      // optional int64 TotalVolumeTrade = 13;
      case 13: {
        if (tag == 104) {
         parse_TotalVolumeTrade:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalvolumetrade_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_TotalValueTrade;
        break;
      }

      // optional int64 TotalValueTrade = 14;
      case 14: {
        if (tag == 112) {
         parse_TotalValueTrade:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalvaluetrade_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_IOPV;
        break;
      }

      // optional int64 IOPV = 15;
      case 15: {
        if (tag == 120) {
         parse_IOPV:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iopv_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_OpenInterest;
        break;
      }

      // optional int64 OpenInterest = 16;
      case 16: {
        if (tag == 128) {
         parse_OpenInterest:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &openinterest_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_SettlePrice;
        break;
      }

      // optional int64 SettlePrice = 17;
      case 17: {
        if (tag == 136) {
         parse_SettlePrice:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &settleprice_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_ExchangeDate;
        break;
      }

      // optional int32 ExchangeDate = 18;
      case 18: {
        if (tag == 144) {
         parse_ExchangeDate:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchangedate_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_ExchangeTime;
        break;
      }

      // optional int32 ExchangeTime = 19;
      case 19: {
        if (tag == 152) {
         parse_ExchangeTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchangetime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_KLineCategory;
        break;
      }

      // optional int32 KLineCategory = 20;
      case 20: {
        if (tag == 160) {
         parse_KLineCategory:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &klinecategory_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_AfterHoursNumTrades;
        break;
      }

      // optional int64 AfterHoursNumTrades = 21;
      case 21: {
        if (tag == 168) {
         parse_AfterHoursNumTrades:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &afterhoursnumtrades_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_AfterHoursTotalVolumeTrade;
        break;
      }

      // optional int64 AfterHoursTotalVolumeTrade = 22;
      case 22: {
        if (tag == 176) {
         parse_AfterHoursTotalVolumeTrade:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &afterhourstotalvolumetrade_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_AfterHoursTotalValueTrade;
        break;
      }

      // optional int64 AfterHoursTotalValueTrade = 23;
      case 23: {
        if (tag == 184) {
         parse_AfterHoursTotalValueTrade:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &afterhourstotalvaluetrade_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_PreClosePx;
        break;
      }

      // optional int64 PreClosePx = 24;
      case 24: {
        if (tag == 192) {
         parse_PreClosePx:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &preclosepx_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_PreCloseYield;
        break;
      }

      // optional int64 PreCloseYield = 25;
      case 25: {
        if (tag == 200) {
         parse_PreCloseYield:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &precloseyield_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_PreWeightedAvgPx;
        break;
      }

      // optional int64 PreWeightedAvgPx = 26;
      case 26: {
        if (tag == 208) {
         parse_PreWeightedAvgPx:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &preweightedavgpx_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_PreWeightedAvgYield;
        break;
      }

      // optional int64 PreWeightedAvgYield = 27;
      case 27: {
        if (tag == 216) {
         parse_PreWeightedAvgYield:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &preweightedavgyield_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_CloseWeightedAvgPx;
        break;
      }

      // optional int64 CloseWeightedAvgPx = 28;
      case 28: {
        if (tag == 224) {
         parse_CloseWeightedAvgPx:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &closeweightedavgpx_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_CloseWeightedAvgYield;
        break;
      }

      // optional int64 CloseWeightedAvgYield = 29;
      case 29: {
        if (tag == 232) {
         parse_CloseWeightedAvgYield:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &closeweightedavgyield_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_OpenYield;
        break;
      }

      // optional int64 OpenYield = 30;
      case 30: {
        if (tag == 240) {
         parse_OpenYield:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &openyield_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_HighYield;
        break;
      }

      // optional int64 HighYield = 31;
      case 31: {
        if (tag == 248) {
         parse_HighYield:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &highyield_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_LowYield;
        break;
      }

      // optional int64 LowYield = 32;
      case 32: {
        if (tag == 256) {
         parse_LowYield:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lowyield_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_CloseYield;
        break;
      }

      // optional int64 CloseYield = 33;
      case 33: {
        if (tag == 264) {
         parse_CloseYield:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &closeyield_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_DataMultiplePowerOf10;
        break;
      }

      // optional int32 DataMultiplePowerOf10 = 34;
      case 34: {
        if (tag == 272) {
         parse_DataMultiplePowerOf10:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datamultiplepowerof10_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.ADKLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.ADKLine)
  return false;
#undef DO_
}

void ADKLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.ADKLine)
  // optional string HTSCSecurityID = 1;
  if (this->htscsecurityid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->htscsecurityid().data(), this->htscsecurityid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADKLine.HTSCSecurityID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->htscsecurityid(), output);
  }

  // optional int32 MDDate = 2;
  if (this->mddate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mddate(), output);
  }

  // optional int32 MDTime = 3;
  if (this->mdtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mdtime(), output);
  }

  // optional int64 DataTimestamp = 4;
  if (this->datatimestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->datatimestamp(), output);
  }

  // optional .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  if (this->securityidsource() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->securityidsource(), output);
  }

  // optional .com.htsc.mdc.model.ESecurityType securityType = 6;
  if (this->securitytype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->securitytype(), output);
  }

  // optional .com.htsc.mdc.model.EMDPeriodType PeriodType = 7;
  if (this->periodtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->periodtype(), output);
  }

  // optional int64 OpenPx = 8;
  if (this->openpx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->openpx(), output);
  }

  // optional int64 ClosePx = 9;
  if (this->closepx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->closepx(), output);
  }

  // optional int64 HighPx = 10;
  if (this->highpx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->highpx(), output);
  }

  // optional int64 LowPx = 11;
  if (this->lowpx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->lowpx(), output);
  }

  // optional int64 NumTrades = 12;
  if (this->numtrades() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->numtrades(), output);
  }

  // optional int64 TotalVolumeTrade = 13;
  if (this->totalvolumetrade() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->totalvolumetrade(), output);
  }

  // optional int64 TotalValueTrade = 14;
  if (this->totalvaluetrade() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->totalvaluetrade(), output);
  }

  // optional int64 IOPV = 15;
  if (this->iopv() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->iopv(), output);
  }

  // optional int64 OpenInterest = 16;
  if (this->openinterest() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->openinterest(), output);
  }

  // optional int64 SettlePrice = 17;
  if (this->settleprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->settleprice(), output);
  }

  // optional int32 ExchangeDate = 18;
  if (this->exchangedate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->exchangedate(), output);
  }

  // optional int32 ExchangeTime = 19;
  if (this->exchangetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->exchangetime(), output);
  }

  // optional int32 KLineCategory = 20;
  if (this->klinecategory() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->klinecategory(), output);
  }

  // optional int64 AfterHoursNumTrades = 21;
  if (this->afterhoursnumtrades() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->afterhoursnumtrades(), output);
  }

  // optional int64 AfterHoursTotalVolumeTrade = 22;
  if (this->afterhourstotalvolumetrade() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->afterhourstotalvolumetrade(), output);
  }

  // optional int64 AfterHoursTotalValueTrade = 23;
  if (this->afterhourstotalvaluetrade() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->afterhourstotalvaluetrade(), output);
  }

  // optional int64 PreClosePx = 24;
  if (this->preclosepx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(24, this->preclosepx(), output);
  }

  // optional int64 PreCloseYield = 25;
  if (this->precloseyield() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(25, this->precloseyield(), output);
  }

  // optional int64 PreWeightedAvgPx = 26;
  if (this->preweightedavgpx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(26, this->preweightedavgpx(), output);
  }

  // optional int64 PreWeightedAvgYield = 27;
  if (this->preweightedavgyield() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(27, this->preweightedavgyield(), output);
  }

  // optional int64 CloseWeightedAvgPx = 28;
  if (this->closeweightedavgpx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(28, this->closeweightedavgpx(), output);
  }

  // optional int64 CloseWeightedAvgYield = 29;
  if (this->closeweightedavgyield() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(29, this->closeweightedavgyield(), output);
  }

  // optional int64 OpenYield = 30;
  if (this->openyield() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(30, this->openyield(), output);
  }

  // optional int64 HighYield = 31;
  if (this->highyield() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(31, this->highyield(), output);
  }

  // optional int64 LowYield = 32;
  if (this->lowyield() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(32, this->lowyield(), output);
  }

  // optional int64 CloseYield = 33;
  if (this->closeyield() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(33, this->closeyield(), output);
  }

  // optional int32 DataMultiplePowerOf10 = 34;
  if (this->datamultiplepowerof10() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->datamultiplepowerof10(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.ADKLine)
}

::google::protobuf::uint8* ADKLine::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADKLine)
  // optional string HTSCSecurityID = 1;
  if (this->htscsecurityid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->htscsecurityid().data(), this->htscsecurityid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADKLine.HTSCSecurityID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->htscsecurityid(), target);
  }

  // optional int32 MDDate = 2;
  if (this->mddate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mddate(), target);
  }

  // optional int32 MDTime = 3;
  if (this->mdtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mdtime(), target);
  }

  // optional int64 DataTimestamp = 4;
  if (this->datatimestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->datatimestamp(), target);
  }

  // optional .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  if (this->securityidsource() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->securityidsource(), target);
  }

  // optional .com.htsc.mdc.model.ESecurityType securityType = 6;
  if (this->securitytype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->securitytype(), target);
  }

  // optional .com.htsc.mdc.model.EMDPeriodType PeriodType = 7;
  if (this->periodtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->periodtype(), target);
  }

  // optional int64 OpenPx = 8;
  if (this->openpx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->openpx(), target);
  }

  // optional int64 ClosePx = 9;
  if (this->closepx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->closepx(), target);
  }

  // optional int64 HighPx = 10;
  if (this->highpx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->highpx(), target);
  }

  // optional int64 LowPx = 11;
  if (this->lowpx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->lowpx(), target);
  }

  // optional int64 NumTrades = 12;
  if (this->numtrades() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->numtrades(), target);
  }

  // optional int64 TotalVolumeTrade = 13;
  if (this->totalvolumetrade() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->totalvolumetrade(), target);
  }

  // optional int64 TotalValueTrade = 14;
  if (this->totalvaluetrade() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->totalvaluetrade(), target);
  }

  // optional int64 IOPV = 15;
  if (this->iopv() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->iopv(), target);
  }

  // optional int64 OpenInterest = 16;
  if (this->openinterest() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->openinterest(), target);
  }

  // optional int64 SettlePrice = 17;
  if (this->settleprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->settleprice(), target);
  }

  // optional int32 ExchangeDate = 18;
  if (this->exchangedate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->exchangedate(), target);
  }

  // optional int32 ExchangeTime = 19;
  if (this->exchangetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->exchangetime(), target);
  }

  // optional int32 KLineCategory = 20;
  if (this->klinecategory() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->klinecategory(), target);
  }

  // optional int64 AfterHoursNumTrades = 21;
  if (this->afterhoursnumtrades() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->afterhoursnumtrades(), target);
  }

  // optional int64 AfterHoursTotalVolumeTrade = 22;
  if (this->afterhourstotalvolumetrade() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->afterhourstotalvolumetrade(), target);
  }

  // optional int64 AfterHoursTotalValueTrade = 23;
  if (this->afterhourstotalvaluetrade() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(23, this->afterhourstotalvaluetrade(), target);
  }

  // optional int64 PreClosePx = 24;
  if (this->preclosepx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(24, this->preclosepx(), target);
  }

  // optional int64 PreCloseYield = 25;
  if (this->precloseyield() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(25, this->precloseyield(), target);
  }

  // optional int64 PreWeightedAvgPx = 26;
  if (this->preweightedavgpx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(26, this->preweightedavgpx(), target);
  }

  // optional int64 PreWeightedAvgYield = 27;
  if (this->preweightedavgyield() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(27, this->preweightedavgyield(), target);
  }

  // optional int64 CloseWeightedAvgPx = 28;
  if (this->closeweightedavgpx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(28, this->closeweightedavgpx(), target);
  }

  // optional int64 CloseWeightedAvgYield = 29;
  if (this->closeweightedavgyield() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(29, this->closeweightedavgyield(), target);
  }

  // optional int64 OpenYield = 30;
  if (this->openyield() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(30, this->openyield(), target);
  }

  // optional int64 HighYield = 31;
  if (this->highyield() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(31, this->highyield(), target);
  }

  // optional int64 LowYield = 32;
  if (this->lowyield() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(32, this->lowyield(), target);
  }

  // optional int64 CloseYield = 33;
  if (this->closeyield() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(33, this->closeyield(), target);
  }

  // optional int32 DataMultiplePowerOf10 = 34;
  if (this->datamultiplepowerof10() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->datamultiplepowerof10(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADKLine)
  return target;
}

size_t ADKLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADKLine)
  size_t total_size = 0;

  // optional string HTSCSecurityID = 1;
  if (this->htscsecurityid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->htscsecurityid());
  }

  // optional int32 MDDate = 2;
  if (this->mddate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mddate());
  }

  // optional int32 MDTime = 3;
  if (this->mdtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mdtime());
  }

  // optional int64 DataTimestamp = 4;
  if (this->datatimestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->datatimestamp());
  }

  // optional .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  if (this->securityidsource() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->securityidsource());
  }

  // optional .com.htsc.mdc.model.ESecurityType securityType = 6;
  if (this->securitytype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->securitytype());
  }

  // optional .com.htsc.mdc.model.EMDPeriodType PeriodType = 7;
  if (this->periodtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->periodtype());
  }

  // optional int64 OpenPx = 8;
  if (this->openpx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->openpx());
  }

  // optional int64 ClosePx = 9;
  if (this->closepx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->closepx());
  }

  // optional int64 HighPx = 10;
  if (this->highpx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->highpx());
  }

  // optional int64 LowPx = 11;
  if (this->lowpx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lowpx());
  }

  // optional int64 NumTrades = 12;
  if (this->numtrades() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->numtrades());
  }

  // optional int64 TotalVolumeTrade = 13;
  if (this->totalvolumetrade() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->totalvolumetrade());
  }

  // optional int64 TotalValueTrade = 14;
  if (this->totalvaluetrade() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->totalvaluetrade());
  }

  // optional int64 IOPV = 15;
  if (this->iopv() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->iopv());
  }

  // optional int64 OpenInterest = 16;
  if (this->openinterest() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->openinterest());
  }

  // optional int64 SettlePrice = 17;
  if (this->settleprice() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->settleprice());
  }

  // optional int32 ExchangeDate = 18;
  if (this->exchangedate() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exchangedate());
  }

  // optional int32 ExchangeTime = 19;
  if (this->exchangetime() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exchangetime());
  }

  // optional int32 KLineCategory = 20;
  if (this->klinecategory() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->klinecategory());
  }

  // optional int64 AfterHoursNumTrades = 21;
  if (this->afterhoursnumtrades() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->afterhoursnumtrades());
  }

  // optional int64 AfterHoursTotalVolumeTrade = 22;
  if (this->afterhourstotalvolumetrade() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->afterhourstotalvolumetrade());
  }

  // optional int64 AfterHoursTotalValueTrade = 23;
  if (this->afterhourstotalvaluetrade() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->afterhourstotalvaluetrade());
  }

  // optional int64 PreClosePx = 24;
  if (this->preclosepx() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->preclosepx());
  }

  // optional int64 PreCloseYield = 25;
  if (this->precloseyield() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->precloseyield());
  }

  // optional int64 PreWeightedAvgPx = 26;
  if (this->preweightedavgpx() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->preweightedavgpx());
  }

  // optional int64 PreWeightedAvgYield = 27;
  if (this->preweightedavgyield() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->preweightedavgyield());
  }

  // optional int64 CloseWeightedAvgPx = 28;
  if (this->closeweightedavgpx() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->closeweightedavgpx());
  }

  // optional int64 CloseWeightedAvgYield = 29;
  if (this->closeweightedavgyield() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->closeweightedavgyield());
  }

  // optional int64 OpenYield = 30;
  if (this->openyield() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->openyield());
  }

  // optional int64 HighYield = 31;
  if (this->highyield() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->highyield());
  }

  // optional int64 LowYield = 32;
  if (this->lowyield() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lowyield());
  }

  // optional int64 CloseYield = 33;
  if (this->closeyield() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->closeyield());
  }

  // optional int32 DataMultiplePowerOf10 = 34;
  if (this->datamultiplepowerof10() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->datamultiplepowerof10());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ADKLine::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.ADKLine)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ADKLine* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ADKLine>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.ADKLine)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.ADKLine)
    UnsafeMergeFrom(*source);
  }
}

void ADKLine::MergeFrom(const ADKLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADKLine)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ADKLine::UnsafeMergeFrom(const ADKLine& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.htscsecurityid().size() > 0) {

    htscsecurityid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.htscsecurityid_);
  }
  if (from.mddate() != 0) {
    set_mddate(from.mddate());
  }
  if (from.mdtime() != 0) {
    set_mdtime(from.mdtime());
  }
  if (from.datatimestamp() != 0) {
    set_datatimestamp(from.datatimestamp());
  }
  if (from.securityidsource() != 0) {
    set_securityidsource(from.securityidsource());
  }
  if (from.securitytype() != 0) {
    set_securitytype(from.securitytype());
  }
  if (from.periodtype() != 0) {
    set_periodtype(from.periodtype());
  }
  if (from.openpx() != 0) {
    set_openpx(from.openpx());
  }
  if (from.closepx() != 0) {
    set_closepx(from.closepx());
  }
  if (from.highpx() != 0) {
    set_highpx(from.highpx());
  }
  if (from.lowpx() != 0) {
    set_lowpx(from.lowpx());
  }
  if (from.numtrades() != 0) {
    set_numtrades(from.numtrades());
  }
  if (from.totalvolumetrade() != 0) {
    set_totalvolumetrade(from.totalvolumetrade());
  }
  if (from.totalvaluetrade() != 0) {
    set_totalvaluetrade(from.totalvaluetrade());
  }
  if (from.iopv() != 0) {
    set_iopv(from.iopv());
  }
  if (from.openinterest() != 0) {
    set_openinterest(from.openinterest());
  }
  if (from.settleprice() != 0) {
    set_settleprice(from.settleprice());
  }
  if (from.exchangedate() != 0) {
    set_exchangedate(from.exchangedate());
  }
  if (from.exchangetime() != 0) {
    set_exchangetime(from.exchangetime());
  }
  if (from.klinecategory() != 0) {
    set_klinecategory(from.klinecategory());
  }
  if (from.afterhoursnumtrades() != 0) {
    set_afterhoursnumtrades(from.afterhoursnumtrades());
  }
  if (from.afterhourstotalvolumetrade() != 0) {
    set_afterhourstotalvolumetrade(from.afterhourstotalvolumetrade());
  }
  if (from.afterhourstotalvaluetrade() != 0) {
    set_afterhourstotalvaluetrade(from.afterhourstotalvaluetrade());
  }
  if (from.preclosepx() != 0) {
    set_preclosepx(from.preclosepx());
  }
  if (from.precloseyield() != 0) {
    set_precloseyield(from.precloseyield());
  }
  if (from.preweightedavgpx() != 0) {
    set_preweightedavgpx(from.preweightedavgpx());
  }
  if (from.preweightedavgyield() != 0) {
    set_preweightedavgyield(from.preweightedavgyield());
  }
  if (from.closeweightedavgpx() != 0) {
    set_closeweightedavgpx(from.closeweightedavgpx());
  }
  if (from.closeweightedavgyield() != 0) {
    set_closeweightedavgyield(from.closeweightedavgyield());
  }
  if (from.openyield() != 0) {
    set_openyield(from.openyield());
  }
  if (from.highyield() != 0) {
    set_highyield(from.highyield());
  }
  if (from.lowyield() != 0) {
    set_lowyield(from.lowyield());
  }
  if (from.closeyield() != 0) {
    set_closeyield(from.closeyield());
  }
  if (from.datamultiplepowerof10() != 0) {
    set_datamultiplepowerof10(from.datamultiplepowerof10());
  }
}

void ADKLine::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.ADKLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADKLine::CopyFrom(const ADKLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADKLine)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ADKLine::IsInitialized() const {

  return true;
}

void ADKLine::Swap(ADKLine* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADKLine::InternalSwap(ADKLine* other) {
  htscsecurityid_.Swap(&other->htscsecurityid_);
  std::swap(mddate_, other->mddate_);
  std::swap(mdtime_, other->mdtime_);
  std::swap(datatimestamp_, other->datatimestamp_);
  std::swap(securityidsource_, other->securityidsource_);
  std::swap(securitytype_, other->securitytype_);
  std::swap(periodtype_, other->periodtype_);
  std::swap(openpx_, other->openpx_);
  std::swap(closepx_, other->closepx_);
  std::swap(highpx_, other->highpx_);
  std::swap(lowpx_, other->lowpx_);
  std::swap(numtrades_, other->numtrades_);
  std::swap(totalvolumetrade_, other->totalvolumetrade_);
  std::swap(totalvaluetrade_, other->totalvaluetrade_);
  std::swap(iopv_, other->iopv_);
  std::swap(openinterest_, other->openinterest_);
  std::swap(settleprice_, other->settleprice_);
  std::swap(exchangedate_, other->exchangedate_);
  std::swap(exchangetime_, other->exchangetime_);
  std::swap(klinecategory_, other->klinecategory_);
  std::swap(afterhoursnumtrades_, other->afterhoursnumtrades_);
  std::swap(afterhourstotalvolumetrade_, other->afterhourstotalvolumetrade_);
  std::swap(afterhourstotalvaluetrade_, other->afterhourstotalvaluetrade_);
  std::swap(preclosepx_, other->preclosepx_);
  std::swap(precloseyield_, other->precloseyield_);
  std::swap(preweightedavgpx_, other->preweightedavgpx_);
  std::swap(preweightedavgyield_, other->preweightedavgyield_);
  std::swap(closeweightedavgpx_, other->closeweightedavgpx_);
  std::swap(closeweightedavgyield_, other->closeweightedavgyield_);
  std::swap(openyield_, other->openyield_);
  std::swap(highyield_, other->highyield_);
  std::swap(lowyield_, other->lowyield_);
  std::swap(closeyield_, other->closeyield_);
  std::swap(datamultiplepowerof10_, other->datamultiplepowerof10_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ADKLine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ADKLine_descriptor_;
  metadata.reflection = ADKLine_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ADKLine

// optional string HTSCSecurityID = 1;
void ADKLine::clear_htscsecurityid() {
  htscsecurityid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ADKLine::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.HTSCSecurityID)
  return htscsecurityid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ADKLine::set_htscsecurityid(const ::std::string& value) {
  
  htscsecurityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.HTSCSecurityID)
}
void ADKLine::set_htscsecurityid(const char* value) {
  
  htscsecurityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.ADKLine.HTSCSecurityID)
}
void ADKLine::set_htscsecurityid(const char* value, size_t size) {
  
  htscsecurityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.ADKLine.HTSCSecurityID)
}
::std::string* ADKLine::mutable_htscsecurityid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADKLine.HTSCSecurityID)
  return htscsecurityid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ADKLine::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADKLine.HTSCSecurityID)
  
  return htscsecurityid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ADKLine::set_allocated_htscsecurityid(::std::string* htscsecurityid) {
  if (htscsecurityid != NULL) {
    
  } else {
    
  }
  htscsecurityid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), htscsecurityid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADKLine.HTSCSecurityID)
}

// optional int32 MDDate = 2;
void ADKLine::clear_mddate() {
  mddate_ = 0;
}
::google::protobuf::int32 ADKLine::mddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.MDDate)
  return mddate_;
}
void ADKLine::set_mddate(::google::protobuf::int32 value) {
  
  mddate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.MDDate)
}

// optional int32 MDTime = 3;
void ADKLine::clear_mdtime() {
  mdtime_ = 0;
}
::google::protobuf::int32 ADKLine::mdtime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.MDTime)
  return mdtime_;
}
void ADKLine::set_mdtime(::google::protobuf::int32 value) {
  
  mdtime_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.MDTime)
}

// optional int64 DataTimestamp = 4;
void ADKLine::clear_datatimestamp() {
  datatimestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADKLine::datatimestamp() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.DataTimestamp)
  return datatimestamp_;
}
void ADKLine::set_datatimestamp(::google::protobuf::int64 value) {
  
  datatimestamp_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.DataTimestamp)
}

// optional .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
void ADKLine::clear_securityidsource() {
  securityidsource_ = 0;
}
::com::htsc::mdc::model::ESecurityIDSource ADKLine::securityidsource() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.securityIDSource)
  return static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(securityidsource_);
}
void ADKLine::set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  
  securityidsource_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.securityIDSource)
}

// optional .com.htsc.mdc.model.ESecurityType securityType = 6;
void ADKLine::clear_securitytype() {
  securitytype_ = 0;
}
::com::htsc::mdc::model::ESecurityType ADKLine::securitytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.securityType)
  return static_cast< ::com::htsc::mdc::model::ESecurityType >(securitytype_);
}
void ADKLine::set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  
  securitytype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.securityType)
}

// optional .com.htsc.mdc.model.EMDPeriodType PeriodType = 7;
void ADKLine::clear_periodtype() {
  periodtype_ = 0;
}
::com::htsc::mdc::model::EMDPeriodType ADKLine::periodtype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.PeriodType)
  return static_cast< ::com::htsc::mdc::model::EMDPeriodType >(periodtype_);
}
void ADKLine::set_periodtype(::com::htsc::mdc::model::EMDPeriodType value) {
  
  periodtype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.PeriodType)
}

// optional int64 OpenPx = 8;
void ADKLine::clear_openpx() {
  openpx_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADKLine::openpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.OpenPx)
  return openpx_;
}
void ADKLine::set_openpx(::google::protobuf::int64 value) {
  
  openpx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.OpenPx)
}

// optional int64 ClosePx = 9;
void ADKLine::clear_closepx() {
  closepx_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADKLine::closepx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.ClosePx)
  return closepx_;
}
void ADKLine::set_closepx(::google::protobuf::int64 value) {
  
  closepx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.ClosePx)
}

// optional int64 HighPx = 10;
void ADKLine::clear_highpx() {
  highpx_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADKLine::highpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.HighPx)
  return highpx_;
}
void ADKLine::set_highpx(::google::protobuf::int64 value) {
  
  highpx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.HighPx)
}

// optional int64 LowPx = 11;
void ADKLine::clear_lowpx() {
  lowpx_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADKLine::lowpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.LowPx)
  return lowpx_;
}
void ADKLine::set_lowpx(::google::protobuf::int64 value) {
  
  lowpx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.LowPx)
}

// optional int64 NumTrades = 12;
void ADKLine::clear_numtrades() {
  numtrades_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADKLine::numtrades() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.NumTrades)
  return numtrades_;
}
void ADKLine::set_numtrades(::google::protobuf::int64 value) {
  
  numtrades_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.NumTrades)
}

// optional int64 TotalVolumeTrade = 13;
void ADKLine::clear_totalvolumetrade() {
  totalvolumetrade_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADKLine::totalvolumetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.TotalVolumeTrade)
  return totalvolumetrade_;
}
void ADKLine::set_totalvolumetrade(::google::protobuf::int64 value) {
  
  totalvolumetrade_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.TotalVolumeTrade)
}

// optional int64 TotalValueTrade = 14;
void ADKLine::clear_totalvaluetrade() {
  totalvaluetrade_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADKLine::totalvaluetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.TotalValueTrade)
  return totalvaluetrade_;
}
void ADKLine::set_totalvaluetrade(::google::protobuf::int64 value) {
  
  totalvaluetrade_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.TotalValueTrade)
}

// optional int64 IOPV = 15;
void ADKLine::clear_iopv() {
  iopv_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADKLine::iopv() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.IOPV)
  return iopv_;
}
void ADKLine::set_iopv(::google::protobuf::int64 value) {
  
  iopv_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.IOPV)
}

// optional int64 OpenInterest = 16;
void ADKLine::clear_openinterest() {
  openinterest_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADKLine::openinterest() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.OpenInterest)
  return openinterest_;
}
void ADKLine::set_openinterest(::google::protobuf::int64 value) {
  
  openinterest_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.OpenInterest)
}

// optional int64 SettlePrice = 17;
void ADKLine::clear_settleprice() {
  settleprice_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADKLine::settleprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.SettlePrice)
  return settleprice_;
}
void ADKLine::set_settleprice(::google::protobuf::int64 value) {
  
  settleprice_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.SettlePrice)
}

// optional int32 ExchangeDate = 18;
void ADKLine::clear_exchangedate() {
  exchangedate_ = 0;
}
::google::protobuf::int32 ADKLine::exchangedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.ExchangeDate)
  return exchangedate_;
}
void ADKLine::set_exchangedate(::google::protobuf::int32 value) {
  
  exchangedate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.ExchangeDate)
}

// optional int32 ExchangeTime = 19;
void ADKLine::clear_exchangetime() {
  exchangetime_ = 0;
}
::google::protobuf::int32 ADKLine::exchangetime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.ExchangeTime)
  return exchangetime_;
}
void ADKLine::set_exchangetime(::google::protobuf::int32 value) {
  
  exchangetime_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.ExchangeTime)
}

// optional int32 KLineCategory = 20;
void ADKLine::clear_klinecategory() {
  klinecategory_ = 0;
}
::google::protobuf::int32 ADKLine::klinecategory() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.KLineCategory)
  return klinecategory_;
}
void ADKLine::set_klinecategory(::google::protobuf::int32 value) {
  
  klinecategory_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.KLineCategory)
}

// optional int64 AfterHoursNumTrades = 21;
void ADKLine::clear_afterhoursnumtrades() {
  afterhoursnumtrades_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADKLine::afterhoursnumtrades() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.AfterHoursNumTrades)
  return afterhoursnumtrades_;
}
void ADKLine::set_afterhoursnumtrades(::google::protobuf::int64 value) {
  
  afterhoursnumtrades_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.AfterHoursNumTrades)
}

// optional int64 AfterHoursTotalVolumeTrade = 22;
void ADKLine::clear_afterhourstotalvolumetrade() {
  afterhourstotalvolumetrade_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADKLine::afterhourstotalvolumetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.AfterHoursTotalVolumeTrade)
  return afterhourstotalvolumetrade_;
}
void ADKLine::set_afterhourstotalvolumetrade(::google::protobuf::int64 value) {
  
  afterhourstotalvolumetrade_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.AfterHoursTotalVolumeTrade)
}

// optional int64 AfterHoursTotalValueTrade = 23;
void ADKLine::clear_afterhourstotalvaluetrade() {
  afterhourstotalvaluetrade_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADKLine::afterhourstotalvaluetrade() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.AfterHoursTotalValueTrade)
  return afterhourstotalvaluetrade_;
}
void ADKLine::set_afterhourstotalvaluetrade(::google::protobuf::int64 value) {
  
  afterhourstotalvaluetrade_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.AfterHoursTotalValueTrade)
}

// optional int64 PreClosePx = 24;
void ADKLine::clear_preclosepx() {
  preclosepx_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADKLine::preclosepx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.PreClosePx)
  return preclosepx_;
}
void ADKLine::set_preclosepx(::google::protobuf::int64 value) {
  
  preclosepx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.PreClosePx)
}

// optional int64 PreCloseYield = 25;
void ADKLine::clear_precloseyield() {
  precloseyield_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADKLine::precloseyield() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.PreCloseYield)
  return precloseyield_;
}
void ADKLine::set_precloseyield(::google::protobuf::int64 value) {
  
  precloseyield_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.PreCloseYield)
}

// optional int64 PreWeightedAvgPx = 26;
void ADKLine::clear_preweightedavgpx() {
  preweightedavgpx_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADKLine::preweightedavgpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.PreWeightedAvgPx)
  return preweightedavgpx_;
}
void ADKLine::set_preweightedavgpx(::google::protobuf::int64 value) {
  
  preweightedavgpx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.PreWeightedAvgPx)
}

// optional int64 PreWeightedAvgYield = 27;
void ADKLine::clear_preweightedavgyield() {
  preweightedavgyield_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADKLine::preweightedavgyield() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.PreWeightedAvgYield)
  return preweightedavgyield_;
}
void ADKLine::set_preweightedavgyield(::google::protobuf::int64 value) {
  
  preweightedavgyield_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.PreWeightedAvgYield)
}

// optional int64 CloseWeightedAvgPx = 28;
void ADKLine::clear_closeweightedavgpx() {
  closeweightedavgpx_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADKLine::closeweightedavgpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.CloseWeightedAvgPx)
  return closeweightedavgpx_;
}
void ADKLine::set_closeweightedavgpx(::google::protobuf::int64 value) {
  
  closeweightedavgpx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.CloseWeightedAvgPx)
}

// optional int64 CloseWeightedAvgYield = 29;
void ADKLine::clear_closeweightedavgyield() {
  closeweightedavgyield_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADKLine::closeweightedavgyield() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.CloseWeightedAvgYield)
  return closeweightedavgyield_;
}
void ADKLine::set_closeweightedavgyield(::google::protobuf::int64 value) {
  
  closeweightedavgyield_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.CloseWeightedAvgYield)
}

// optional int64 OpenYield = 30;
void ADKLine::clear_openyield() {
  openyield_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADKLine::openyield() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.OpenYield)
  return openyield_;
}
void ADKLine::set_openyield(::google::protobuf::int64 value) {
  
  openyield_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.OpenYield)
}

// optional int64 HighYield = 31;
void ADKLine::clear_highyield() {
  highyield_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADKLine::highyield() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.HighYield)
  return highyield_;
}
void ADKLine::set_highyield(::google::protobuf::int64 value) {
  
  highyield_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.HighYield)
}

// optional int64 LowYield = 32;
void ADKLine::clear_lowyield() {
  lowyield_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADKLine::lowyield() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.LowYield)
  return lowyield_;
}
void ADKLine::set_lowyield(::google::protobuf::int64 value) {
  
  lowyield_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.LowYield)
}

// optional int64 CloseYield = 33;
void ADKLine::clear_closeyield() {
  closeyield_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADKLine::closeyield() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.CloseYield)
  return closeyield_;
}
void ADKLine::set_closeyield(::google::protobuf::int64 value) {
  
  closeyield_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.CloseYield)
}

// optional int32 DataMultiplePowerOf10 = 34;
void ADKLine::clear_datamultiplepowerof10() {
  datamultiplepowerof10_ = 0;
}
::google::protobuf::int32 ADKLine::datamultiplepowerof10() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADKLine.DataMultiplePowerOf10)
  return datamultiplepowerof10_;
}
void ADKLine::set_datamultiplepowerof10(::google::protobuf::int32 value) {
  
  datamultiplepowerof10_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADKLine.DataMultiplePowerOf10)
}

inline const ADKLine* ADKLine::internal_default_instance() {
  return &ADKLine_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)
