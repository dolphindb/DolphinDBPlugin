// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Login.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Login.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

namespace {

const ::google::protobuf::Descriptor* LoginRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserWithPassword_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserWithPassword_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserWithToken_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserWithToken_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ELoginType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Login_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_Login_2eproto() {
  protobuf_AddDesc_Login_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Login.proto");
  GOOGLE_CHECK(file != NULL);
  LoginRequest_descriptor_ = file->message_type(0);
  static const int LoginRequest_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, apptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, appversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, logintype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, uwp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, uwt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, deviceinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, issupportcompressed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, connectserverip_),
  };
  LoginRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoginRequest_descriptor_,
      LoginRequest::internal_default_instance(),
      LoginRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(LoginRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _internal_metadata_));
  LoginResponse_descriptor_ = file->message_type(1);
  static const int LoginResponse_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, issuccess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, errorcontext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, lastlogintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, lastloginip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, reservedinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, datasource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, site_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, servicediscoveryresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, accountinfo_),
  };
  LoginResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoginResponse_descriptor_,
      LoginResponse::internal_default_instance(),
      LoginResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(LoginResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, _internal_metadata_));
  UserWithPassword_descriptor_ = file->message_type(2);
  static const int UserWithPassword_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserWithPassword, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserWithPassword, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserWithPassword, otp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserWithPassword, captcha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserWithPassword, sms_),
  };
  UserWithPassword_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserWithPassword_descriptor_,
      UserWithPassword::internal_default_instance(),
      UserWithPassword_offsets_,
      -1,
      -1,
      -1,
      sizeof(UserWithPassword),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserWithPassword, _internal_metadata_));
  UserWithToken_descriptor_ = file->message_type(3);
  static const int UserWithToken_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserWithToken, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserWithToken, token_),
  };
  UserWithToken_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserWithToken_descriptor_,
      UserWithToken::internal_default_instance(),
      UserWithToken_offsets_,
      -1,
      -1,
      -1,
      sizeof(UserWithToken),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserWithToken, _internal_metadata_));
  DeviceInfo_descriptor_ = file->message_type(4);
  static const int DeviceInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, devicemac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, deviceharddisk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, devicecpu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, cellphonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, cellphoneimei_),
  };
  DeviceInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeviceInfo_descriptor_,
      DeviceInfo::internal_default_instance(),
      DeviceInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeviceInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, _internal_metadata_));
  AccountInfo_descriptor_ = file->message_type(5);
  static const int AccountInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, startdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, stopdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, customername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, contactperson_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, contactaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, contacttel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, contactemail_),
  };
  AccountInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AccountInfo_descriptor_,
      AccountInfo::internal_default_instance(),
      AccountInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(AccountInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, _internal_metadata_));
  ELoginType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Login_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoginRequest_descriptor_, LoginRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoginResponse_descriptor_, LoginResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserWithPassword_descriptor_, UserWithPassword::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserWithToken_descriptor_, UserWithToken::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeviceInfo_descriptor_, DeviceInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AccountInfo_descriptor_, AccountInfo::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Login_2eproto() {
  LoginRequest_default_instance_.Shutdown();
  delete LoginRequest_reflection_;
  LoginResponse_default_instance_.Shutdown();
  delete LoginResponse_reflection_;
  UserWithPassword_default_instance_.Shutdown();
  delete UserWithPassword_reflection_;
  UserWithToken_default_instance_.Shutdown();
  delete UserWithToken_reflection_;
  DeviceInfo_default_instance_.Shutdown();
  delete DeviceInfo_reflection_;
  AccountInfo_default_instance_.Shutdown();
  delete AccountInfo_reflection_;
}

void protobuf_InitDefaults_Login_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::com::htsc::mdc::insight::model::protobuf_InitDefaults_ServiceDiscovery_2eproto();
  ::com::htsc::mdc::insight::model::protobuf_InitDefaults_InsightErrorContext_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  LoginRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  LoginResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  UserWithPassword_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  UserWithToken_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  DeviceInfo_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  AccountInfo_default_instance_.DefaultConstruct();
  LoginRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  LoginResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  UserWithPassword_default_instance_.get_mutable()->InitAsDefaultInstance();
  UserWithToken_default_instance_.get_mutable()->InitAsDefaultInstance();
  DeviceInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  AccountInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_Login_2eproto_once_);
void protobuf_InitDefaults_Login_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_Login_2eproto_once_,
                 &protobuf_InitDefaults_Login_2eproto_impl);
}
void protobuf_AddDesc_Login_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_Login_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Login.proto\022\032com.htsc.mdc.insight.mode"
    "l\032\026ServiceDiscovery.proto\032\031InsightErrorC"
    "ontext.proto\"\323\002\n\014LoginRequest\022\017\n\007appType"
    "\030\001 \001(\005\022\022\n\nappVersion\030\002 \001(\t\0229\n\tloginType\030"
    "\003 \001(\0162&.com.htsc.mdc.insight.model.ELogi"
    "nType\0229\n\003uwp\030\004 \001(\0132,.com.htsc.mdc.insigh"
    "t.model.UserWithPassword\0226\n\003uwt\030\005 \001(\0132)."
    "com.htsc.mdc.insight.model.UserWithToken"
    "\022:\n\ndeviceInfo\030\006 \001(\0132&.com.htsc.mdc.insi"
    "ght.model.DeviceInfo\022\033\n\023isSupportCompres"
    "sed\030\007 \001(\010\022\027\n\017connectServerIP\030\010 \001(\t\"\362\002\n\rL"
    "oginResponse\022\021\n\tisSuccess\030\001 \001(\010\022E\n\014error"
    "Context\030\002 \001(\0132/.com.htsc.mdc.insight.mod"
    "el.InsightErrorContext\022\r\n\005token\030\003 \001(\t\022\025\n"
    "\rlastLoginTime\030\004 \001(\003\022\023\n\013lastLoginIp\030\005 \001("
    "\t\022\024\n\014reservedInfo\030\006 \001(\t\022\022\n\ndataSource\030\007 "
    "\001(\t\022\014\n\004site\030\010 \001(\t\022V\n\030serviceDiscoveryRes"
    "ponse\030\t \001(\01324.com.htsc.mdc.insight.model"
    ".ServiceDiscoveryResponse\022<\n\013accountInfo"
    "\030\n \001(\0132\'.com.htsc.mdc.insight.model.Acco"
    "untInfo\"a\n\020UserWithPassword\022\020\n\010userName\030"
    "\001 \001(\t\022\020\n\010password\030\002 \001(\t\022\013\n\003otp\030\003 \001(\t\022\017\n\007"
    "captcha\030\004 \001(\t\022\013\n\003sms\030\005 \001(\t\"0\n\rUserWithTo"
    "ken\022\020\n\010userName\030\001 \001(\t\022\r\n\005token\030\002 \001(\t\"\214\001\n"
    "\nDeviceInfo\022\020\n\010deviceId\030\001 \001(\t\022\021\n\tdeviceM"
    "ac\030\002 \001(\t\022\026\n\016deviceHarddisk\030\003 \001(\t\022\021\n\tdevi"
    "ceCPU\030\004 \001(\t\022\027\n\017cellphoneNumber\030\005 \001(\t\022\025\n\r"
    "cellphoneImei\030\006 \001(\t\"\263\001\n\013AccountInfo\022\020\n\010u"
    "serName\030\001 \001(\t\022\021\n\tstartDate\030\002 \001(\t\022\020\n\010stop"
    "Date\030\003 \001(\t\022\024\n\014customerName\030\004 \001(\t\022\025\n\rcont"
    "actPerson\030\005 \001(\t\022\026\n\016contactAddress\030\006 \001(\t\022"
    "\022\n\ncontactTel\030\007 \001(\t\022\024\n\014contactEmail\030\010 \001("
    "\t*\201\001\n\nELoginType\022\026\n\022DEFAULT_LOGIN_TYPE\020\000"
    "\022\037\n\033INSIGHT_LOGIN_FOR_DISCOVERY\020\001\022#\n\037THR"
    "ID_PARTY_LOGIN_FOR_DISCOVERY\020\002\022\025\n\021LOGIN_"
    "FOR_SERVICE\020\003B-\n\032com.htsc.mdc.insight.mo"
    "delB\nLoginProtoH\001\240\001\001b\006proto3", 1468);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Login.proto", &protobuf_RegisterTypes);
  ::com::htsc::mdc::insight::model::protobuf_AddDesc_ServiceDiscovery_2eproto();
  ::com::htsc::mdc::insight::model::protobuf_AddDesc_InsightErrorContext_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Login_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_Login_2eproto_once_);
void protobuf_AddDesc_Login_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_Login_2eproto_once_,
                 &protobuf_AddDesc_Login_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Login_2eproto {
  StaticDescriptorInitializer_Login_2eproto() {
    protobuf_AddDesc_Login_2eproto();
  }
} static_descriptor_initializer_Login_2eproto_;
const ::google::protobuf::EnumDescriptor* ELoginType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ELoginType_descriptor_;
}
bool ELoginType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginRequest::kAppTypeFieldNumber;
const int LoginRequest::kAppVersionFieldNumber;
const int LoginRequest::kLoginTypeFieldNumber;
const int LoginRequest::kUwpFieldNumber;
const int LoginRequest::kUwtFieldNumber;
const int LoginRequest::kDeviceInfoFieldNumber;
const int LoginRequest::kIsSupportCompressedFieldNumber;
const int LoginRequest::kConnectServerIPFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginRequest::LoginRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_Login_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.LoginRequest)
}

void LoginRequest::InitAsDefaultInstance() {
  uwp_ = const_cast< ::com::htsc::mdc::insight::model::UserWithPassword*>(
      ::com::htsc::mdc::insight::model::UserWithPassword::internal_default_instance());
  uwt_ = const_cast< ::com::htsc::mdc::insight::model::UserWithToken*>(
      ::com::htsc::mdc::insight::model::UserWithToken::internal_default_instance());
  deviceinfo_ = const_cast< ::com::htsc::mdc::insight::model::DeviceInfo*>(
      ::com::htsc::mdc::insight::model::DeviceInfo::internal_default_instance());
}

LoginRequest::LoginRequest(const LoginRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.LoginRequest)
}

void LoginRequest::SharedCtor() {
  appversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connectserverip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uwp_ = NULL;
  uwt_ = NULL;
  deviceinfo_ = NULL;
  ::memset(&apptype_, 0, reinterpret_cast<char*>(&issupportcompressed_) -
    reinterpret_cast<char*>(&apptype_) + sizeof(issupportcompressed_));
  _cached_size_ = 0;
}

LoginRequest::~LoginRequest() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.LoginRequest)
  SharedDtor();
}

void LoginRequest::SharedDtor() {
  appversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connectserverip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &LoginRequest_default_instance_.get()) {
    delete uwp_;
    delete uwt_;
    delete deviceinfo_;
  }
}

void LoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRequest_descriptor_;
}

const LoginRequest& LoginRequest::default_instance() {
  protobuf_InitDefaults_Login_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<LoginRequest> LoginRequest_default_instance_;

LoginRequest* LoginRequest::New(::google::protobuf::Arena* arena) const {
  LoginRequest* n = new LoginRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.LoginRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LoginRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LoginRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(apptype_, issupportcompressed_);
  appversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && uwp_ != NULL) delete uwp_;
  uwp_ = NULL;
  if (GetArenaNoVirtual() == NULL && uwt_ != NULL) delete uwt_;
  uwt_ = NULL;
  if (GetArenaNoVirtual() == NULL && deviceinfo_ != NULL) delete deviceinfo_;
  deviceinfo_ = NULL;
  connectserverip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool LoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.LoginRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 appType = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &apptype_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_appVersion;
        break;
      }

      // optional string appVersion = 2;
      case 2: {
        if (tag == 18) {
         parse_appVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appversion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->appversion().data(), this->appversion().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.LoginRequest.appVersion"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_loginType;
        break;
      }

      // optional .com.htsc.mdc.insight.model.ELoginType loginType = 3;
      case 3: {
        if (tag == 24) {
         parse_loginType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_logintype(static_cast< ::com::htsc::mdc::insight::model::ELoginType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_uwp;
        break;
      }

      // optional .com.htsc.mdc.insight.model.UserWithPassword uwp = 4;
      case 4: {
        if (tag == 34) {
         parse_uwp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uwp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_uwt;
        break;
      }

      // optional .com.htsc.mdc.insight.model.UserWithToken uwt = 5;
      case 5: {
        if (tag == 42) {
         parse_uwt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uwt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_deviceInfo;
        break;
      }

      // optional .com.htsc.mdc.insight.model.DeviceInfo deviceInfo = 6;
      case 6: {
        if (tag == 50) {
         parse_deviceInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deviceinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_isSupportCompressed;
        break;
      }

      // optional bool isSupportCompressed = 7;
      case 7: {
        if (tag == 56) {
         parse_isSupportCompressed:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issupportcompressed_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_connectServerIP;
        break;
      }

      // optional string connectServerIP = 8;
      case 8: {
        if (tag == 66) {
         parse_connectServerIP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connectserverip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->connectserverip().data(), this->connectserverip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.LoginRequest.connectServerIP"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.LoginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.LoginRequest)
  return false;
#undef DO_
}

void LoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.LoginRequest)
  // optional int32 appType = 1;
  if (this->apptype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->apptype(), output);
  }

  // optional string appVersion = 2;
  if (this->appversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appversion().data(), this->appversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.LoginRequest.appVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->appversion(), output);
  }

  // optional .com.htsc.mdc.insight.model.ELoginType loginType = 3;
  if (this->logintype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->logintype(), output);
  }

  // optional .com.htsc.mdc.insight.model.UserWithPassword uwp = 4;
  if (this->has_uwp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->uwp_, output);
  }

  // optional .com.htsc.mdc.insight.model.UserWithToken uwt = 5;
  if (this->has_uwt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->uwt_, output);
  }

  // optional .com.htsc.mdc.insight.model.DeviceInfo deviceInfo = 6;
  if (this->has_deviceinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->deviceinfo_, output);
  }

  // optional bool isSupportCompressed = 7;
  if (this->issupportcompressed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->issupportcompressed(), output);
  }

  // optional string connectServerIP = 8;
  if (this->connectserverip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->connectserverip().data(), this->connectserverip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.LoginRequest.connectServerIP");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->connectserverip(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.LoginRequest)
}

::google::protobuf::uint8* LoginRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.LoginRequest)
  // optional int32 appType = 1;
  if (this->apptype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->apptype(), target);
  }

  // optional string appVersion = 2;
  if (this->appversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appversion().data(), this->appversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.LoginRequest.appVersion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->appversion(), target);
  }

  // optional .com.htsc.mdc.insight.model.ELoginType loginType = 3;
  if (this->logintype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->logintype(), target);
  }

  // optional .com.htsc.mdc.insight.model.UserWithPassword uwp = 4;
  if (this->has_uwp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->uwp_, false, target);
  }

  // optional .com.htsc.mdc.insight.model.UserWithToken uwt = 5;
  if (this->has_uwt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->uwt_, false, target);
  }

  // optional .com.htsc.mdc.insight.model.DeviceInfo deviceInfo = 6;
  if (this->has_deviceinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->deviceinfo_, false, target);
  }

  // optional bool isSupportCompressed = 7;
  if (this->issupportcompressed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->issupportcompressed(), target);
  }

  // optional string connectServerIP = 8;
  if (this->connectserverip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->connectserverip().data(), this->connectserverip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.LoginRequest.connectServerIP");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->connectserverip(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.LoginRequest)
  return target;
}

size_t LoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.LoginRequest)
  size_t total_size = 0;

  // optional int32 appType = 1;
  if (this->apptype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->apptype());
  }

  // optional string appVersion = 2;
  if (this->appversion().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->appversion());
  }

  // optional .com.htsc.mdc.insight.model.ELoginType loginType = 3;
  if (this->logintype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->logintype());
  }

  // optional .com.htsc.mdc.insight.model.UserWithPassword uwp = 4;
  if (this->has_uwp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->uwp_);
  }

  // optional .com.htsc.mdc.insight.model.UserWithToken uwt = 5;
  if (this->has_uwt()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->uwt_);
  }

  // optional .com.htsc.mdc.insight.model.DeviceInfo deviceInfo = 6;
  if (this->has_deviceinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->deviceinfo_);
  }

  // optional bool isSupportCompressed = 7;
  if (this->issupportcompressed() != 0) {
    total_size += 1 + 1;
  }

  // optional string connectServerIP = 8;
  if (this->connectserverip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->connectserverip());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.LoginRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LoginRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.LoginRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.LoginRequest)
    UnsafeMergeFrom(*source);
  }
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.LoginRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void LoginRequest::UnsafeMergeFrom(const LoginRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.apptype() != 0) {
    set_apptype(from.apptype());
  }
  if (from.appversion().size() > 0) {

    appversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appversion_);
  }
  if (from.logintype() != 0) {
    set_logintype(from.logintype());
  }
  if (from.has_uwp()) {
    mutable_uwp()->::com::htsc::mdc::insight::model::UserWithPassword::MergeFrom(from.uwp());
  }
  if (from.has_uwt()) {
    mutable_uwt()->::com::htsc::mdc::insight::model::UserWithToken::MergeFrom(from.uwt());
  }
  if (from.has_deviceinfo()) {
    mutable_deviceinfo()->::com::htsc::mdc::insight::model::DeviceInfo::MergeFrom(from.deviceinfo());
  }
  if (from.issupportcompressed() != 0) {
    set_issupportcompressed(from.issupportcompressed());
  }
  if (from.connectserverip().size() > 0) {

    connectserverip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connectserverip_);
  }
}

void LoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.LoginRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool LoginRequest::IsInitialized() const {

  return true;
}

void LoginRequest::Swap(LoginRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginRequest::InternalSwap(LoginRequest* other) {
  std::swap(apptype_, other->apptype_);
  appversion_.Swap(&other->appversion_);
  std::swap(logintype_, other->logintype_);
  std::swap(uwp_, other->uwp_);
  std::swap(uwt_, other->uwt_);
  std::swap(deviceinfo_, other->deviceinfo_);
  std::swap(issupportcompressed_, other->issupportcompressed_);
  connectserverip_.Swap(&other->connectserverip_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRequest_descriptor_;
  metadata.reflection = LoginRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginRequest

// optional int32 appType = 1;
void LoginRequest::clear_apptype() {
  apptype_ = 0;
}
::google::protobuf::int32 LoginRequest::apptype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.LoginRequest.appType)
  return apptype_;
}
void LoginRequest::set_apptype(::google::protobuf::int32 value) {
  
  apptype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.LoginRequest.appType)
}

// optional string appVersion = 2;
void LoginRequest::clear_appversion() {
  appversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LoginRequest::appversion() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.LoginRequest.appVersion)
  return appversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginRequest::set_appversion(const ::std::string& value) {
  
  appversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.LoginRequest.appVersion)
}
void LoginRequest::set_appversion(const char* value) {
  
  appversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.LoginRequest.appVersion)
}
void LoginRequest::set_appversion(const char* value, size_t size) {
  
  appversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.LoginRequest.appVersion)
}
::std::string* LoginRequest::mutable_appversion() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.LoginRequest.appVersion)
  return appversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginRequest::release_appversion() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.LoginRequest.appVersion)
  
  return appversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginRequest::set_allocated_appversion(::std::string* appversion) {
  if (appversion != NULL) {
    
  } else {
    
  }
  appversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appversion);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.LoginRequest.appVersion)
}

// optional .com.htsc.mdc.insight.model.ELoginType loginType = 3;
void LoginRequest::clear_logintype() {
  logintype_ = 0;
}
::com::htsc::mdc::insight::model::ELoginType LoginRequest::logintype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.LoginRequest.loginType)
  return static_cast< ::com::htsc::mdc::insight::model::ELoginType >(logintype_);
}
void LoginRequest::set_logintype(::com::htsc::mdc::insight::model::ELoginType value) {
  
  logintype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.LoginRequest.loginType)
}

// optional .com.htsc.mdc.insight.model.UserWithPassword uwp = 4;
bool LoginRequest::has_uwp() const {
  return this != internal_default_instance() && uwp_ != NULL;
}
void LoginRequest::clear_uwp() {
  if (GetArenaNoVirtual() == NULL && uwp_ != NULL) delete uwp_;
  uwp_ = NULL;
}
const ::com::htsc::mdc::insight::model::UserWithPassword& LoginRequest::uwp() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.LoginRequest.uwp)
  return uwp_ != NULL ? *uwp_
                         : *::com::htsc::mdc::insight::model::UserWithPassword::internal_default_instance();
}
::com::htsc::mdc::insight::model::UserWithPassword* LoginRequest::mutable_uwp() {
  
  if (uwp_ == NULL) {
    uwp_ = new ::com::htsc::mdc::insight::model::UserWithPassword;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.LoginRequest.uwp)
  return uwp_;
}
::com::htsc::mdc::insight::model::UserWithPassword* LoginRequest::release_uwp() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.LoginRequest.uwp)
  
  ::com::htsc::mdc::insight::model::UserWithPassword* temp = uwp_;
  uwp_ = NULL;
  return temp;
}
void LoginRequest::set_allocated_uwp(::com::htsc::mdc::insight::model::UserWithPassword* uwp) {
  delete uwp_;
  uwp_ = uwp;
  if (uwp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.LoginRequest.uwp)
}

// optional .com.htsc.mdc.insight.model.UserWithToken uwt = 5;
bool LoginRequest::has_uwt() const {
  return this != internal_default_instance() && uwt_ != NULL;
}
void LoginRequest::clear_uwt() {
  if (GetArenaNoVirtual() == NULL && uwt_ != NULL) delete uwt_;
  uwt_ = NULL;
}
const ::com::htsc::mdc::insight::model::UserWithToken& LoginRequest::uwt() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.LoginRequest.uwt)
  return uwt_ != NULL ? *uwt_
                         : *::com::htsc::mdc::insight::model::UserWithToken::internal_default_instance();
}
::com::htsc::mdc::insight::model::UserWithToken* LoginRequest::mutable_uwt() {
  
  if (uwt_ == NULL) {
    uwt_ = new ::com::htsc::mdc::insight::model::UserWithToken;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.LoginRequest.uwt)
  return uwt_;
}
::com::htsc::mdc::insight::model::UserWithToken* LoginRequest::release_uwt() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.LoginRequest.uwt)
  
  ::com::htsc::mdc::insight::model::UserWithToken* temp = uwt_;
  uwt_ = NULL;
  return temp;
}
void LoginRequest::set_allocated_uwt(::com::htsc::mdc::insight::model::UserWithToken* uwt) {
  delete uwt_;
  uwt_ = uwt;
  if (uwt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.LoginRequest.uwt)
}

// optional .com.htsc.mdc.insight.model.DeviceInfo deviceInfo = 6;
bool LoginRequest::has_deviceinfo() const {
  return this != internal_default_instance() && deviceinfo_ != NULL;
}
void LoginRequest::clear_deviceinfo() {
  if (GetArenaNoVirtual() == NULL && deviceinfo_ != NULL) delete deviceinfo_;
  deviceinfo_ = NULL;
}
const ::com::htsc::mdc::insight::model::DeviceInfo& LoginRequest::deviceinfo() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.LoginRequest.deviceInfo)
  return deviceinfo_ != NULL ? *deviceinfo_
                         : *::com::htsc::mdc::insight::model::DeviceInfo::internal_default_instance();
}
::com::htsc::mdc::insight::model::DeviceInfo* LoginRequest::mutable_deviceinfo() {
  
  if (deviceinfo_ == NULL) {
    deviceinfo_ = new ::com::htsc::mdc::insight::model::DeviceInfo;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.LoginRequest.deviceInfo)
  return deviceinfo_;
}
::com::htsc::mdc::insight::model::DeviceInfo* LoginRequest::release_deviceinfo() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.LoginRequest.deviceInfo)
  
  ::com::htsc::mdc::insight::model::DeviceInfo* temp = deviceinfo_;
  deviceinfo_ = NULL;
  return temp;
}
void LoginRequest::set_allocated_deviceinfo(::com::htsc::mdc::insight::model::DeviceInfo* deviceinfo) {
  delete deviceinfo_;
  deviceinfo_ = deviceinfo;
  if (deviceinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.LoginRequest.deviceInfo)
}

// optional bool isSupportCompressed = 7;
void LoginRequest::clear_issupportcompressed() {
  issupportcompressed_ = false;
}
bool LoginRequest::issupportcompressed() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.LoginRequest.isSupportCompressed)
  return issupportcompressed_;
}
void LoginRequest::set_issupportcompressed(bool value) {
  
  issupportcompressed_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.LoginRequest.isSupportCompressed)
}

// optional string connectServerIP = 8;
void LoginRequest::clear_connectserverip() {
  connectserverip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LoginRequest::connectserverip() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.LoginRequest.connectServerIP)
  return connectserverip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginRequest::set_connectserverip(const ::std::string& value) {
  
  connectserverip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.LoginRequest.connectServerIP)
}
void LoginRequest::set_connectserverip(const char* value) {
  
  connectserverip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.LoginRequest.connectServerIP)
}
void LoginRequest::set_connectserverip(const char* value, size_t size) {
  
  connectserverip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.LoginRequest.connectServerIP)
}
::std::string* LoginRequest::mutable_connectserverip() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.LoginRequest.connectServerIP)
  return connectserverip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginRequest::release_connectserverip() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.LoginRequest.connectServerIP)
  
  return connectserverip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginRequest::set_allocated_connectserverip(::std::string* connectserverip) {
  if (connectserverip != NULL) {
    
  } else {
    
  }
  connectserverip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), connectserverip);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.LoginRequest.connectServerIP)
}

inline const LoginRequest* LoginRequest::internal_default_instance() {
  return &LoginRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginResponse::kIsSuccessFieldNumber;
const int LoginResponse::kErrorContextFieldNumber;
const int LoginResponse::kTokenFieldNumber;
const int LoginResponse::kLastLoginTimeFieldNumber;
const int LoginResponse::kLastLoginIpFieldNumber;
const int LoginResponse::kReservedInfoFieldNumber;
const int LoginResponse::kDataSourceFieldNumber;
const int LoginResponse::kSiteFieldNumber;
const int LoginResponse::kServiceDiscoveryResponseFieldNumber;
const int LoginResponse::kAccountInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginResponse::LoginResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_Login_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.LoginResponse)
}

void LoginResponse::InitAsDefaultInstance() {
  errorcontext_ = const_cast< ::com::htsc::mdc::insight::model::InsightErrorContext*>(
      ::com::htsc::mdc::insight::model::InsightErrorContext::internal_default_instance());
  servicediscoveryresponse_ = const_cast< ::com::htsc::mdc::insight::model::ServiceDiscoveryResponse*>(
      ::com::htsc::mdc::insight::model::ServiceDiscoveryResponse::internal_default_instance());
  accountinfo_ = const_cast< ::com::htsc::mdc::insight::model::AccountInfo*>(
      ::com::htsc::mdc::insight::model::AccountInfo::internal_default_instance());
}

LoginResponse::LoginResponse(const LoginResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.LoginResponse)
}

void LoginResponse::SharedCtor() {
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lastloginip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reservedinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  datasource_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  site_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errorcontext_ = NULL;
  servicediscoveryresponse_ = NULL;
  accountinfo_ = NULL;
  ::memset(&lastlogintime_, 0, reinterpret_cast<char*>(&issuccess_) -
    reinterpret_cast<char*>(&lastlogintime_) + sizeof(issuccess_));
  _cached_size_ = 0;
}

LoginResponse::~LoginResponse() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.LoginResponse)
  SharedDtor();
}

void LoginResponse::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lastloginip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reservedinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  datasource_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  site_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &LoginResponse_default_instance_.get()) {
    delete errorcontext_;
    delete servicediscoveryresponse_;
    delete accountinfo_;
  }
}

void LoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginResponse_descriptor_;
}

const LoginResponse& LoginResponse::default_instance() {
  protobuf_InitDefaults_Login_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<LoginResponse> LoginResponse_default_instance_;

LoginResponse* LoginResponse::New(::google::protobuf::Arena* arena) const {
  LoginResponse* n = new LoginResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.LoginResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LoginResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LoginResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(lastlogintime_, issuccess_);
  if (GetArenaNoVirtual() == NULL && errorcontext_ != NULL) delete errorcontext_;
  errorcontext_ = NULL;
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lastloginip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reservedinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  datasource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  site_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && servicediscoveryresponse_ != NULL) delete servicediscoveryresponse_;
  servicediscoveryresponse_ = NULL;
  if (GetArenaNoVirtual() == NULL && accountinfo_ != NULL) delete accountinfo_;
  accountinfo_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool LoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.LoginResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isSuccess = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issuccess_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errorContext;
        break;
      }

      // optional .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 2;
      case 2: {
        if (tag == 18) {
         parse_errorContext:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_errorcontext()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // optional string token = 3;
      case 3: {
        if (tag == 26) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.LoginResponse.token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_lastLoginTime;
        break;
      }

      // optional int64 lastLoginTime = 4;
      case 4: {
        if (tag == 32) {
         parse_lastLoginTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastlogintime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_lastLoginIp;
        break;
      }

      // optional string lastLoginIp = 5;
      case 5: {
        if (tag == 42) {
         parse_lastLoginIp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastloginip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lastloginip().data(), this->lastloginip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.LoginResponse.lastLoginIp"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_reservedInfo;
        break;
      }

      // optional string reservedInfo = 6;
      case 6: {
        if (tag == 50) {
         parse_reservedInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reservedinfo()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reservedinfo().data(), this->reservedinfo().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.LoginResponse.reservedInfo"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_dataSource;
        break;
      }

      // optional string dataSource = 7;
      case 7: {
        if (tag == 58) {
         parse_dataSource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datasource()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->datasource().data(), this->datasource().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.LoginResponse.dataSource"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_site;
        break;
      }

      // optional string site = 8;
      case 8: {
        if (tag == 66) {
         parse_site:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_site()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->site().data(), this->site().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.LoginResponse.site"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_serviceDiscoveryResponse;
        break;
      }

      // optional .com.htsc.mdc.insight.model.ServiceDiscoveryResponse serviceDiscoveryResponse = 9;
      case 9: {
        if (tag == 74) {
         parse_serviceDiscoveryResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_servicediscoveryresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_accountInfo;
        break;
      }

      // optional .com.htsc.mdc.insight.model.AccountInfo accountInfo = 10;
      case 10: {
        if (tag == 82) {
         parse_accountInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accountinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.LoginResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.LoginResponse)
  return false;
#undef DO_
}

void LoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.LoginResponse)
  // optional bool isSuccess = 1;
  if (this->issuccess() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->issuccess(), output);
  }

  // optional .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 2;
  if (this->has_errorcontext()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->errorcontext_, output);
  }

  // optional string token = 3;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.LoginResponse.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->token(), output);
  }

  // optional int64 lastLoginTime = 4;
  if (this->lastlogintime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->lastlogintime(), output);
  }

  // optional string lastLoginIp = 5;
  if (this->lastloginip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lastloginip().data(), this->lastloginip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.LoginResponse.lastLoginIp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->lastloginip(), output);
  }

  // optional string reservedInfo = 6;
  if (this->reservedinfo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reservedinfo().data(), this->reservedinfo().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.LoginResponse.reservedInfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->reservedinfo(), output);
  }

  // optional string dataSource = 7;
  if (this->datasource().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->datasource().data(), this->datasource().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.LoginResponse.dataSource");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->datasource(), output);
  }

  // optional string site = 8;
  if (this->site().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->site().data(), this->site().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.LoginResponse.site");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->site(), output);
  }

  // optional .com.htsc.mdc.insight.model.ServiceDiscoveryResponse serviceDiscoveryResponse = 9;
  if (this->has_servicediscoveryresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->servicediscoveryresponse_, output);
  }

  // optional .com.htsc.mdc.insight.model.AccountInfo accountInfo = 10;
  if (this->has_accountinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->accountinfo_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.LoginResponse)
}

::google::protobuf::uint8* LoginResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.LoginResponse)
  // optional bool isSuccess = 1;
  if (this->issuccess() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->issuccess(), target);
  }

  // optional .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 2;
  if (this->has_errorcontext()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->errorcontext_, false, target);
  }

  // optional string token = 3;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.LoginResponse.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  // optional int64 lastLoginTime = 4;
  if (this->lastlogintime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->lastlogintime(), target);
  }

  // optional string lastLoginIp = 5;
  if (this->lastloginip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lastloginip().data(), this->lastloginip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.LoginResponse.lastLoginIp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->lastloginip(), target);
  }

  // optional string reservedInfo = 6;
  if (this->reservedinfo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reservedinfo().data(), this->reservedinfo().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.LoginResponse.reservedInfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->reservedinfo(), target);
  }

  // optional string dataSource = 7;
  if (this->datasource().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->datasource().data(), this->datasource().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.LoginResponse.dataSource");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->datasource(), target);
  }

  // optional string site = 8;
  if (this->site().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->site().data(), this->site().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.LoginResponse.site");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->site(), target);
  }

  // optional .com.htsc.mdc.insight.model.ServiceDiscoveryResponse serviceDiscoveryResponse = 9;
  if (this->has_servicediscoveryresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->servicediscoveryresponse_, false, target);
  }

  // optional .com.htsc.mdc.insight.model.AccountInfo accountInfo = 10;
  if (this->has_accountinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->accountinfo_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.LoginResponse)
  return target;
}

size_t LoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.LoginResponse)
  size_t total_size = 0;

  // optional bool isSuccess = 1;
  if (this->issuccess() != 0) {
    total_size += 1 + 1;
  }

  // optional .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 2;
  if (this->has_errorcontext()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->errorcontext_);
  }

  // optional string token = 3;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // optional int64 lastLoginTime = 4;
  if (this->lastlogintime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lastlogintime());
  }

  // optional string lastLoginIp = 5;
  if (this->lastloginip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lastloginip());
  }

  // optional string reservedInfo = 6;
  if (this->reservedinfo().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reservedinfo());
  }

  // optional string dataSource = 7;
  if (this->datasource().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->datasource());
  }

  // optional string site = 8;
  if (this->site().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->site());
  }

  // optional .com.htsc.mdc.insight.model.ServiceDiscoveryResponse serviceDiscoveryResponse = 9;
  if (this->has_servicediscoveryresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->servicediscoveryresponse_);
  }

  // optional .com.htsc.mdc.insight.model.AccountInfo accountInfo = 10;
  if (this->has_accountinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->accountinfo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.LoginResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LoginResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.LoginResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.LoginResponse)
    UnsafeMergeFrom(*source);
  }
}

void LoginResponse::MergeFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.LoginResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void LoginResponse::UnsafeMergeFrom(const LoginResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.issuccess() != 0) {
    set_issuccess(from.issuccess());
  }
  if (from.has_errorcontext()) {
    mutable_errorcontext()->::com::htsc::mdc::insight::model::InsightErrorContext::MergeFrom(from.errorcontext());
  }
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.lastlogintime() != 0) {
    set_lastlogintime(from.lastlogintime());
  }
  if (from.lastloginip().size() > 0) {

    lastloginip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lastloginip_);
  }
  if (from.reservedinfo().size() > 0) {

    reservedinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reservedinfo_);
  }
  if (from.datasource().size() > 0) {

    datasource_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.datasource_);
  }
  if (from.site().size() > 0) {

    site_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.site_);
  }
  if (from.has_servicediscoveryresponse()) {
    mutable_servicediscoveryresponse()->::com::htsc::mdc::insight::model::ServiceDiscoveryResponse::MergeFrom(from.servicediscoveryresponse());
  }
  if (from.has_accountinfo()) {
    mutable_accountinfo()->::com::htsc::mdc::insight::model::AccountInfo::MergeFrom(from.accountinfo());
  }
}

void LoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResponse::CopyFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.LoginResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool LoginResponse::IsInitialized() const {

  return true;
}

void LoginResponse::Swap(LoginResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginResponse::InternalSwap(LoginResponse* other) {
  std::swap(issuccess_, other->issuccess_);
  std::swap(errorcontext_, other->errorcontext_);
  token_.Swap(&other->token_);
  std::swap(lastlogintime_, other->lastlogintime_);
  lastloginip_.Swap(&other->lastloginip_);
  reservedinfo_.Swap(&other->reservedinfo_);
  datasource_.Swap(&other->datasource_);
  site_.Swap(&other->site_);
  std::swap(servicediscoveryresponse_, other->servicediscoveryresponse_);
  std::swap(accountinfo_, other->accountinfo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginResponse_descriptor_;
  metadata.reflection = LoginResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginResponse

// optional bool isSuccess = 1;
void LoginResponse::clear_issuccess() {
  issuccess_ = false;
}
bool LoginResponse::issuccess() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.LoginResponse.isSuccess)
  return issuccess_;
}
void LoginResponse::set_issuccess(bool value) {
  
  issuccess_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.LoginResponse.isSuccess)
}

// optional .com.htsc.mdc.insight.model.InsightErrorContext errorContext = 2;
bool LoginResponse::has_errorcontext() const {
  return this != internal_default_instance() && errorcontext_ != NULL;
}
void LoginResponse::clear_errorcontext() {
  if (GetArenaNoVirtual() == NULL && errorcontext_ != NULL) delete errorcontext_;
  errorcontext_ = NULL;
}
const ::com::htsc::mdc::insight::model::InsightErrorContext& LoginResponse::errorcontext() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.LoginResponse.errorContext)
  return errorcontext_ != NULL ? *errorcontext_
                         : *::com::htsc::mdc::insight::model::InsightErrorContext::internal_default_instance();
}
::com::htsc::mdc::insight::model::InsightErrorContext* LoginResponse::mutable_errorcontext() {
  
  if (errorcontext_ == NULL) {
    errorcontext_ = new ::com::htsc::mdc::insight::model::InsightErrorContext;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.LoginResponse.errorContext)
  return errorcontext_;
}
::com::htsc::mdc::insight::model::InsightErrorContext* LoginResponse::release_errorcontext() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.LoginResponse.errorContext)
  
  ::com::htsc::mdc::insight::model::InsightErrorContext* temp = errorcontext_;
  errorcontext_ = NULL;
  return temp;
}
void LoginResponse::set_allocated_errorcontext(::com::htsc::mdc::insight::model::InsightErrorContext* errorcontext) {
  delete errorcontext_;
  errorcontext_ = errorcontext;
  if (errorcontext) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.LoginResponse.errorContext)
}

// optional string token = 3;
void LoginResponse::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LoginResponse::token() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.LoginResponse.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginResponse::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.LoginResponse.token)
}
void LoginResponse::set_token(const char* value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.LoginResponse.token)
}
void LoginResponse::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.LoginResponse.token)
}
::std::string* LoginResponse::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.LoginResponse.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginResponse::release_token() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.LoginResponse.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginResponse::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.LoginResponse.token)
}

// optional int64 lastLoginTime = 4;
void LoginResponse::clear_lastlogintime() {
  lastlogintime_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 LoginResponse::lastlogintime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.LoginResponse.lastLoginTime)
  return lastlogintime_;
}
void LoginResponse::set_lastlogintime(::google::protobuf::int64 value) {
  
  lastlogintime_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.LoginResponse.lastLoginTime)
}

// optional string lastLoginIp = 5;
void LoginResponse::clear_lastloginip() {
  lastloginip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LoginResponse::lastloginip() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.LoginResponse.lastLoginIp)
  return lastloginip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginResponse::set_lastloginip(const ::std::string& value) {
  
  lastloginip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.LoginResponse.lastLoginIp)
}
void LoginResponse::set_lastloginip(const char* value) {
  
  lastloginip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.LoginResponse.lastLoginIp)
}
void LoginResponse::set_lastloginip(const char* value, size_t size) {
  
  lastloginip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.LoginResponse.lastLoginIp)
}
::std::string* LoginResponse::mutable_lastloginip() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.LoginResponse.lastLoginIp)
  return lastloginip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginResponse::release_lastloginip() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.LoginResponse.lastLoginIp)
  
  return lastloginip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginResponse::set_allocated_lastloginip(::std::string* lastloginip) {
  if (lastloginip != NULL) {
    
  } else {
    
  }
  lastloginip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lastloginip);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.LoginResponse.lastLoginIp)
}

// optional string reservedInfo = 6;
void LoginResponse::clear_reservedinfo() {
  reservedinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LoginResponse::reservedinfo() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.LoginResponse.reservedInfo)
  return reservedinfo_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginResponse::set_reservedinfo(const ::std::string& value) {
  
  reservedinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.LoginResponse.reservedInfo)
}
void LoginResponse::set_reservedinfo(const char* value) {
  
  reservedinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.LoginResponse.reservedInfo)
}
void LoginResponse::set_reservedinfo(const char* value, size_t size) {
  
  reservedinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.LoginResponse.reservedInfo)
}
::std::string* LoginResponse::mutable_reservedinfo() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.LoginResponse.reservedInfo)
  return reservedinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginResponse::release_reservedinfo() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.LoginResponse.reservedInfo)
  
  return reservedinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginResponse::set_allocated_reservedinfo(::std::string* reservedinfo) {
  if (reservedinfo != NULL) {
    
  } else {
    
  }
  reservedinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reservedinfo);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.LoginResponse.reservedInfo)
}

// optional string dataSource = 7;
void LoginResponse::clear_datasource() {
  datasource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LoginResponse::datasource() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.LoginResponse.dataSource)
  return datasource_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginResponse::set_datasource(const ::std::string& value) {
  
  datasource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.LoginResponse.dataSource)
}
void LoginResponse::set_datasource(const char* value) {
  
  datasource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.LoginResponse.dataSource)
}
void LoginResponse::set_datasource(const char* value, size_t size) {
  
  datasource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.LoginResponse.dataSource)
}
::std::string* LoginResponse::mutable_datasource() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.LoginResponse.dataSource)
  return datasource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginResponse::release_datasource() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.LoginResponse.dataSource)
  
  return datasource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginResponse::set_allocated_datasource(::std::string* datasource) {
  if (datasource != NULL) {
    
  } else {
    
  }
  datasource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), datasource);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.LoginResponse.dataSource)
}

// optional string site = 8;
void LoginResponse::clear_site() {
  site_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LoginResponse::site() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.LoginResponse.site)
  return site_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginResponse::set_site(const ::std::string& value) {
  
  site_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.LoginResponse.site)
}
void LoginResponse::set_site(const char* value) {
  
  site_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.LoginResponse.site)
}
void LoginResponse::set_site(const char* value, size_t size) {
  
  site_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.LoginResponse.site)
}
::std::string* LoginResponse::mutable_site() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.LoginResponse.site)
  return site_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginResponse::release_site() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.LoginResponse.site)
  
  return site_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginResponse::set_allocated_site(::std::string* site) {
  if (site != NULL) {
    
  } else {
    
  }
  site_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), site);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.LoginResponse.site)
}

// optional .com.htsc.mdc.insight.model.ServiceDiscoveryResponse serviceDiscoveryResponse = 9;
bool LoginResponse::has_servicediscoveryresponse() const {
  return this != internal_default_instance() && servicediscoveryresponse_ != NULL;
}
void LoginResponse::clear_servicediscoveryresponse() {
  if (GetArenaNoVirtual() == NULL && servicediscoveryresponse_ != NULL) delete servicediscoveryresponse_;
  servicediscoveryresponse_ = NULL;
}
const ::com::htsc::mdc::insight::model::ServiceDiscoveryResponse& LoginResponse::servicediscoveryresponse() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.LoginResponse.serviceDiscoveryResponse)
  return servicediscoveryresponse_ != NULL ? *servicediscoveryresponse_
                         : *::com::htsc::mdc::insight::model::ServiceDiscoveryResponse::internal_default_instance();
}
::com::htsc::mdc::insight::model::ServiceDiscoveryResponse* LoginResponse::mutable_servicediscoveryresponse() {
  
  if (servicediscoveryresponse_ == NULL) {
    servicediscoveryresponse_ = new ::com::htsc::mdc::insight::model::ServiceDiscoveryResponse;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.LoginResponse.serviceDiscoveryResponse)
  return servicediscoveryresponse_;
}
::com::htsc::mdc::insight::model::ServiceDiscoveryResponse* LoginResponse::release_servicediscoveryresponse() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.LoginResponse.serviceDiscoveryResponse)
  
  ::com::htsc::mdc::insight::model::ServiceDiscoveryResponse* temp = servicediscoveryresponse_;
  servicediscoveryresponse_ = NULL;
  return temp;
}
void LoginResponse::set_allocated_servicediscoveryresponse(::com::htsc::mdc::insight::model::ServiceDiscoveryResponse* servicediscoveryresponse) {
  delete servicediscoveryresponse_;
  servicediscoveryresponse_ = servicediscoveryresponse;
  if (servicediscoveryresponse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.LoginResponse.serviceDiscoveryResponse)
}

// optional .com.htsc.mdc.insight.model.AccountInfo accountInfo = 10;
bool LoginResponse::has_accountinfo() const {
  return this != internal_default_instance() && accountinfo_ != NULL;
}
void LoginResponse::clear_accountinfo() {
  if (GetArenaNoVirtual() == NULL && accountinfo_ != NULL) delete accountinfo_;
  accountinfo_ = NULL;
}
const ::com::htsc::mdc::insight::model::AccountInfo& LoginResponse::accountinfo() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.LoginResponse.accountInfo)
  return accountinfo_ != NULL ? *accountinfo_
                         : *::com::htsc::mdc::insight::model::AccountInfo::internal_default_instance();
}
::com::htsc::mdc::insight::model::AccountInfo* LoginResponse::mutable_accountinfo() {
  
  if (accountinfo_ == NULL) {
    accountinfo_ = new ::com::htsc::mdc::insight::model::AccountInfo;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.LoginResponse.accountInfo)
  return accountinfo_;
}
::com::htsc::mdc::insight::model::AccountInfo* LoginResponse::release_accountinfo() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.LoginResponse.accountInfo)
  
  ::com::htsc::mdc::insight::model::AccountInfo* temp = accountinfo_;
  accountinfo_ = NULL;
  return temp;
}
void LoginResponse::set_allocated_accountinfo(::com::htsc::mdc::insight::model::AccountInfo* accountinfo) {
  delete accountinfo_;
  accountinfo_ = accountinfo;
  if (accountinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.LoginResponse.accountInfo)
}

inline const LoginResponse* LoginResponse::internal_default_instance() {
  return &LoginResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserWithPassword::kUserNameFieldNumber;
const int UserWithPassword::kPasswordFieldNumber;
const int UserWithPassword::kOtpFieldNumber;
const int UserWithPassword::kCaptchaFieldNumber;
const int UserWithPassword::kSmsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserWithPassword::UserWithPassword()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_Login_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.UserWithPassword)
}

void UserWithPassword::InitAsDefaultInstance() {
}

UserWithPassword::UserWithPassword(const UserWithPassword& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.UserWithPassword)
}

void UserWithPassword::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  otp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  captcha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sms_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

UserWithPassword::~UserWithPassword() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.UserWithPassword)
  SharedDtor();
}

void UserWithPassword::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  otp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  captcha_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sms_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserWithPassword::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserWithPassword::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserWithPassword_descriptor_;
}

const UserWithPassword& UserWithPassword::default_instance() {
  protobuf_InitDefaults_Login_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UserWithPassword> UserWithPassword_default_instance_;

UserWithPassword* UserWithPassword::New(::google::protobuf::Arena* arena) const {
  UserWithPassword* n = new UserWithPassword;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserWithPassword::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.UserWithPassword)
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  otp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  captcha_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sms_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UserWithPassword::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.UserWithPassword)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string userName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.UserWithPassword.userName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.UserWithPassword.password"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_otp;
        break;
      }

      // optional string otp = 3;
      case 3: {
        if (tag == 26) {
         parse_otp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_otp()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->otp().data(), this->otp().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.UserWithPassword.otp"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_captcha;
        break;
      }

      // optional string captcha = 4;
      case 4: {
        if (tag == 34) {
         parse_captcha:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_captcha()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->captcha().data(), this->captcha().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.UserWithPassword.captcha"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sms;
        break;
      }

      // optional string sms = 5;
      case 5: {
        if (tag == 42) {
         parse_sms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sms()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sms().data(), this->sms().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.UserWithPassword.sms"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.UserWithPassword)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.UserWithPassword)
  return false;
#undef DO_
}

void UserWithPassword::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.UserWithPassword)
  // optional string userName = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.UserWithPassword.userName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // optional string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.UserWithPassword.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // optional string otp = 3;
  if (this->otp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->otp().data(), this->otp().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.UserWithPassword.otp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->otp(), output);
  }

  // optional string captcha = 4;
  if (this->captcha().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->captcha().data(), this->captcha().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.UserWithPassword.captcha");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->captcha(), output);
  }

  // optional string sms = 5;
  if (this->sms().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sms().data(), this->sms().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.UserWithPassword.sms");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sms(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.UserWithPassword)
}

::google::protobuf::uint8* UserWithPassword::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.UserWithPassword)
  // optional string userName = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.UserWithPassword.userName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // optional string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.UserWithPassword.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // optional string otp = 3;
  if (this->otp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->otp().data(), this->otp().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.UserWithPassword.otp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->otp(), target);
  }

  // optional string captcha = 4;
  if (this->captcha().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->captcha().data(), this->captcha().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.UserWithPassword.captcha");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->captcha(), target);
  }

  // optional string sms = 5;
  if (this->sms().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sms().data(), this->sms().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.UserWithPassword.sms");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sms(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.UserWithPassword)
  return target;
}

size_t UserWithPassword::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.UserWithPassword)
  size_t total_size = 0;

  // optional string userName = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // optional string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // optional string otp = 3;
  if (this->otp().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->otp());
  }

  // optional string captcha = 4;
  if (this->captcha().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->captcha());
  }

  // optional string sms = 5;
  if (this->sms().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sms());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserWithPassword::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.UserWithPassword)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UserWithPassword* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserWithPassword>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.UserWithPassword)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.UserWithPassword)
    UnsafeMergeFrom(*source);
  }
}

void UserWithPassword::MergeFrom(const UserWithPassword& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.UserWithPassword)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UserWithPassword::UnsafeMergeFrom(const UserWithPassword& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.otp().size() > 0) {

    otp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.otp_);
  }
  if (from.captcha().size() > 0) {

    captcha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.captcha_);
  }
  if (from.sms().size() > 0) {

    sms_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sms_);
  }
}

void UserWithPassword::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.UserWithPassword)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserWithPassword::CopyFrom(const UserWithPassword& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.UserWithPassword)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UserWithPassword::IsInitialized() const {

  return true;
}

void UserWithPassword::Swap(UserWithPassword* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserWithPassword::InternalSwap(UserWithPassword* other) {
  username_.Swap(&other->username_);
  password_.Swap(&other->password_);
  otp_.Swap(&other->otp_);
  captcha_.Swap(&other->captcha_);
  sms_.Swap(&other->sms_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserWithPassword::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserWithPassword_descriptor_;
  metadata.reflection = UserWithPassword_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserWithPassword

// optional string userName = 1;
void UserWithPassword::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UserWithPassword::username() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.UserWithPassword.userName)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserWithPassword::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.UserWithPassword.userName)
}
void UserWithPassword::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.UserWithPassword.userName)
}
void UserWithPassword::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.UserWithPassword.userName)
}
::std::string* UserWithPassword::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.UserWithPassword.userName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserWithPassword::release_username() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.UserWithPassword.userName)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserWithPassword::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.UserWithPassword.userName)
}

// optional string password = 2;
void UserWithPassword::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UserWithPassword::password() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.UserWithPassword.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserWithPassword::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.UserWithPassword.password)
}
void UserWithPassword::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.UserWithPassword.password)
}
void UserWithPassword::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.UserWithPassword.password)
}
::std::string* UserWithPassword::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.UserWithPassword.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserWithPassword::release_password() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.UserWithPassword.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserWithPassword::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.UserWithPassword.password)
}

// optional string otp = 3;
void UserWithPassword::clear_otp() {
  otp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UserWithPassword::otp() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.UserWithPassword.otp)
  return otp_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserWithPassword::set_otp(const ::std::string& value) {
  
  otp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.UserWithPassword.otp)
}
void UserWithPassword::set_otp(const char* value) {
  
  otp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.UserWithPassword.otp)
}
void UserWithPassword::set_otp(const char* value, size_t size) {
  
  otp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.UserWithPassword.otp)
}
::std::string* UserWithPassword::mutable_otp() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.UserWithPassword.otp)
  return otp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserWithPassword::release_otp() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.UserWithPassword.otp)
  
  return otp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserWithPassword::set_allocated_otp(::std::string* otp) {
  if (otp != NULL) {
    
  } else {
    
  }
  otp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), otp);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.UserWithPassword.otp)
}

// optional string captcha = 4;
void UserWithPassword::clear_captcha() {
  captcha_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UserWithPassword::captcha() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.UserWithPassword.captcha)
  return captcha_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserWithPassword::set_captcha(const ::std::string& value) {
  
  captcha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.UserWithPassword.captcha)
}
void UserWithPassword::set_captcha(const char* value) {
  
  captcha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.UserWithPassword.captcha)
}
void UserWithPassword::set_captcha(const char* value, size_t size) {
  
  captcha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.UserWithPassword.captcha)
}
::std::string* UserWithPassword::mutable_captcha() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.UserWithPassword.captcha)
  return captcha_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserWithPassword::release_captcha() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.UserWithPassword.captcha)
  
  return captcha_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserWithPassword::set_allocated_captcha(::std::string* captcha) {
  if (captcha != NULL) {
    
  } else {
    
  }
  captcha_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), captcha);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.UserWithPassword.captcha)
}

// optional string sms = 5;
void UserWithPassword::clear_sms() {
  sms_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UserWithPassword::sms() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.UserWithPassword.sms)
  return sms_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserWithPassword::set_sms(const ::std::string& value) {
  
  sms_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.UserWithPassword.sms)
}
void UserWithPassword::set_sms(const char* value) {
  
  sms_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.UserWithPassword.sms)
}
void UserWithPassword::set_sms(const char* value, size_t size) {
  
  sms_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.UserWithPassword.sms)
}
::std::string* UserWithPassword::mutable_sms() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.UserWithPassword.sms)
  return sms_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserWithPassword::release_sms() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.UserWithPassword.sms)
  
  return sms_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserWithPassword::set_allocated_sms(::std::string* sms) {
  if (sms != NULL) {
    
  } else {
    
  }
  sms_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sms);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.UserWithPassword.sms)
}

inline const UserWithPassword* UserWithPassword::internal_default_instance() {
  return &UserWithPassword_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserWithToken::kUserNameFieldNumber;
const int UserWithToken::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserWithToken::UserWithToken()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_Login_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.UserWithToken)
}

void UserWithToken::InitAsDefaultInstance() {
}

UserWithToken::UserWithToken(const UserWithToken& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.UserWithToken)
}

void UserWithToken::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

UserWithToken::~UserWithToken() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.UserWithToken)
  SharedDtor();
}

void UserWithToken::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserWithToken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserWithToken::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserWithToken_descriptor_;
}

const UserWithToken& UserWithToken::default_instance() {
  protobuf_InitDefaults_Login_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UserWithToken> UserWithToken_default_instance_;

UserWithToken* UserWithToken::New(::google::protobuf::Arena* arena) const {
  UserWithToken* n = new UserWithToken;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserWithToken::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.UserWithToken)
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UserWithToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.UserWithToken)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string userName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.UserWithToken.userName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.UserWithToken.token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.UserWithToken)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.UserWithToken)
  return false;
#undef DO_
}

void UserWithToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.UserWithToken)
  // optional string userName = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.UserWithToken.userName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // optional string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.UserWithToken.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.UserWithToken)
}

::google::protobuf::uint8* UserWithToken::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.UserWithToken)
  // optional string userName = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.UserWithToken.userName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // optional string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.UserWithToken.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.UserWithToken)
  return target;
}

size_t UserWithToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.UserWithToken)
  size_t total_size = 0;

  // optional string userName = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // optional string token = 2;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserWithToken::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.UserWithToken)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UserWithToken* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserWithToken>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.UserWithToken)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.UserWithToken)
    UnsafeMergeFrom(*source);
  }
}

void UserWithToken::MergeFrom(const UserWithToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.UserWithToken)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UserWithToken::UnsafeMergeFrom(const UserWithToken& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
}

void UserWithToken::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.UserWithToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserWithToken::CopyFrom(const UserWithToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.UserWithToken)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UserWithToken::IsInitialized() const {

  return true;
}

void UserWithToken::Swap(UserWithToken* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserWithToken::InternalSwap(UserWithToken* other) {
  username_.Swap(&other->username_);
  token_.Swap(&other->token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserWithToken::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserWithToken_descriptor_;
  metadata.reflection = UserWithToken_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserWithToken

// optional string userName = 1;
void UserWithToken::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UserWithToken::username() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.UserWithToken.userName)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserWithToken::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.UserWithToken.userName)
}
void UserWithToken::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.UserWithToken.userName)
}
void UserWithToken::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.UserWithToken.userName)
}
::std::string* UserWithToken::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.UserWithToken.userName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserWithToken::release_username() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.UserWithToken.userName)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserWithToken::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.UserWithToken.userName)
}

// optional string token = 2;
void UserWithToken::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UserWithToken::token() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.UserWithToken.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserWithToken::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.UserWithToken.token)
}
void UserWithToken::set_token(const char* value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.UserWithToken.token)
}
void UserWithToken::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.UserWithToken.token)
}
::std::string* UserWithToken::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.UserWithToken.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserWithToken::release_token() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.UserWithToken.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserWithToken::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.UserWithToken.token)
}

inline const UserWithToken* UserWithToken::internal_default_instance() {
  return &UserWithToken_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceInfo::kDeviceIdFieldNumber;
const int DeviceInfo::kDeviceMacFieldNumber;
const int DeviceInfo::kDeviceHarddiskFieldNumber;
const int DeviceInfo::kDeviceCPUFieldNumber;
const int DeviceInfo::kCellphoneNumberFieldNumber;
const int DeviceInfo::kCellphoneImeiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceInfo::DeviceInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_Login_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.DeviceInfo)
}

void DeviceInfo::InitAsDefaultInstance() {
}

DeviceInfo::DeviceInfo(const DeviceInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.DeviceInfo)
}

void DeviceInfo::SharedCtor() {
  deviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicemac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deviceharddisk_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicecpu_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cellphonenumber_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cellphoneimei_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DeviceInfo::~DeviceInfo() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.DeviceInfo)
  SharedDtor();
}

void DeviceInfo::SharedDtor() {
  deviceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicemac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deviceharddisk_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicecpu_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cellphonenumber_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cellphoneimei_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeviceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceInfo_descriptor_;
}

const DeviceInfo& DeviceInfo::default_instance() {
  protobuf_InitDefaults_Login_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DeviceInfo> DeviceInfo_default_instance_;

DeviceInfo* DeviceInfo::New(::google::protobuf::Arena* arena) const {
  DeviceInfo* n = new DeviceInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.DeviceInfo)
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicemac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deviceharddisk_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicecpu_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cellphonenumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cellphoneimei_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.DeviceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string deviceId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.DeviceInfo.deviceId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_deviceMac;
        break;
      }

      // optional string deviceMac = 2;
      case 2: {
        if (tag == 18) {
         parse_deviceMac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicemac()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->devicemac().data(), this->devicemac().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.DeviceInfo.deviceMac"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_deviceHarddisk;
        break;
      }

      // optional string deviceHarddisk = 3;
      case 3: {
        if (tag == 26) {
         parse_deviceHarddisk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceharddisk()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->deviceharddisk().data(), this->deviceharddisk().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.DeviceInfo.deviceHarddisk"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_deviceCPU;
        break;
      }

      // optional string deviceCPU = 4;
      case 4: {
        if (tag == 34) {
         parse_deviceCPU:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicecpu()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->devicecpu().data(), this->devicecpu().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.DeviceInfo.deviceCPU"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_cellphoneNumber;
        break;
      }

      // optional string cellphoneNumber = 5;
      case 5: {
        if (tag == 42) {
         parse_cellphoneNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cellphonenumber()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cellphonenumber().data(), this->cellphonenumber().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.DeviceInfo.cellphoneNumber"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_cellphoneImei;
        break;
      }

      // optional string cellphoneImei = 6;
      case 6: {
        if (tag == 50) {
         parse_cellphoneImei:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cellphoneimei()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cellphoneimei().data(), this->cellphoneimei().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.DeviceInfo.cellphoneImei"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.DeviceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.DeviceInfo)
  return false;
#undef DO_
}

void DeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.DeviceInfo)
  // optional string deviceId = 1;
  if (this->deviceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.DeviceInfo.deviceId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->deviceid(), output);
  }

  // optional string deviceMac = 2;
  if (this->devicemac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devicemac().data(), this->devicemac().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.DeviceInfo.deviceMac");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->devicemac(), output);
  }

  // optional string deviceHarddisk = 3;
  if (this->deviceharddisk().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->deviceharddisk().data(), this->deviceharddisk().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.DeviceInfo.deviceHarddisk");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->deviceharddisk(), output);
  }

  // optional string deviceCPU = 4;
  if (this->devicecpu().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devicecpu().data(), this->devicecpu().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.DeviceInfo.deviceCPU");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->devicecpu(), output);
  }

  // optional string cellphoneNumber = 5;
  if (this->cellphonenumber().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cellphonenumber().data(), this->cellphonenumber().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.DeviceInfo.cellphoneNumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->cellphonenumber(), output);
  }

  // optional string cellphoneImei = 6;
  if (this->cellphoneimei().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cellphoneimei().data(), this->cellphoneimei().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.DeviceInfo.cellphoneImei");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->cellphoneimei(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.DeviceInfo)
}

::google::protobuf::uint8* DeviceInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.DeviceInfo)
  // optional string deviceId = 1;
  if (this->deviceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.DeviceInfo.deviceId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->deviceid(), target);
  }

  // optional string deviceMac = 2;
  if (this->devicemac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devicemac().data(), this->devicemac().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.DeviceInfo.deviceMac");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->devicemac(), target);
  }

  // optional string deviceHarddisk = 3;
  if (this->deviceharddisk().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->deviceharddisk().data(), this->deviceharddisk().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.DeviceInfo.deviceHarddisk");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->deviceharddisk(), target);
  }

  // optional string deviceCPU = 4;
  if (this->devicecpu().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devicecpu().data(), this->devicecpu().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.DeviceInfo.deviceCPU");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->devicecpu(), target);
  }

  // optional string cellphoneNumber = 5;
  if (this->cellphonenumber().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cellphonenumber().data(), this->cellphonenumber().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.DeviceInfo.cellphoneNumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->cellphonenumber(), target);
  }

  // optional string cellphoneImei = 6;
  if (this->cellphoneimei().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cellphoneimei().data(), this->cellphoneimei().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.DeviceInfo.cellphoneImei");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->cellphoneimei(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.DeviceInfo)
  return target;
}

size_t DeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.DeviceInfo)
  size_t total_size = 0;

  // optional string deviceId = 1;
  if (this->deviceid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->deviceid());
  }

  // optional string deviceMac = 2;
  if (this->devicemac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->devicemac());
  }

  // optional string deviceHarddisk = 3;
  if (this->deviceharddisk().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->deviceharddisk());
  }

  // optional string deviceCPU = 4;
  if (this->devicecpu().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->devicecpu());
  }

  // optional string cellphoneNumber = 5;
  if (this->cellphonenumber().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cellphonenumber());
  }

  // optional string cellphoneImei = 6;
  if (this->cellphoneimei().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cellphoneimei());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.DeviceInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DeviceInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.DeviceInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.DeviceInfo)
    UnsafeMergeFrom(*source);
  }
}

void DeviceInfo::MergeFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.DeviceInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DeviceInfo::UnsafeMergeFrom(const DeviceInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.deviceid().size() > 0) {

    deviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  if (from.devicemac().size() > 0) {

    devicemac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicemac_);
  }
  if (from.deviceharddisk().size() > 0) {

    deviceharddisk_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceharddisk_);
  }
  if (from.devicecpu().size() > 0) {

    devicecpu_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicecpu_);
  }
  if (from.cellphonenumber().size() > 0) {

    cellphonenumber_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cellphonenumber_);
  }
  if (from.cellphoneimei().size() > 0) {

    cellphoneimei_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cellphoneimei_);
  }
}

void DeviceInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceInfo::CopyFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.DeviceInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DeviceInfo::IsInitialized() const {

  return true;
}

void DeviceInfo::Swap(DeviceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceInfo::InternalSwap(DeviceInfo* other) {
  deviceid_.Swap(&other->deviceid_);
  devicemac_.Swap(&other->devicemac_);
  deviceharddisk_.Swap(&other->deviceharddisk_);
  devicecpu_.Swap(&other->devicecpu_);
  cellphonenumber_.Swap(&other->cellphonenumber_);
  cellphoneimei_.Swap(&other->cellphoneimei_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeviceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceInfo_descriptor_;
  metadata.reflection = DeviceInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceInfo

// optional string deviceId = 1;
void DeviceInfo::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeviceInfo::deviceid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.DeviceInfo.deviceId)
  return deviceid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceInfo::set_deviceid(const ::std::string& value) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.DeviceInfo.deviceId)
}
void DeviceInfo::set_deviceid(const char* value) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.DeviceInfo.deviceId)
}
void DeviceInfo::set_deviceid(const char* value, size_t size) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.DeviceInfo.deviceId)
}
::std::string* DeviceInfo::mutable_deviceid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.DeviceInfo.deviceId)
  return deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceInfo::release_deviceid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.DeviceInfo.deviceId)
  
  return deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceInfo::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid != NULL) {
    
  } else {
    
  }
  deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.DeviceInfo.deviceId)
}

// optional string deviceMac = 2;
void DeviceInfo::clear_devicemac() {
  devicemac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeviceInfo::devicemac() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.DeviceInfo.deviceMac)
  return devicemac_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceInfo::set_devicemac(const ::std::string& value) {
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.DeviceInfo.deviceMac)
}
void DeviceInfo::set_devicemac(const char* value) {
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.DeviceInfo.deviceMac)
}
void DeviceInfo::set_devicemac(const char* value, size_t size) {
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.DeviceInfo.deviceMac)
}
::std::string* DeviceInfo::mutable_devicemac() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.DeviceInfo.deviceMac)
  return devicemac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceInfo::release_devicemac() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.DeviceInfo.deviceMac)
  
  return devicemac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceInfo::set_allocated_devicemac(::std::string* devicemac) {
  if (devicemac != NULL) {
    
  } else {
    
  }
  devicemac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicemac);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.DeviceInfo.deviceMac)
}

// optional string deviceHarddisk = 3;
void DeviceInfo::clear_deviceharddisk() {
  deviceharddisk_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeviceInfo::deviceharddisk() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.DeviceInfo.deviceHarddisk)
  return deviceharddisk_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceInfo::set_deviceharddisk(const ::std::string& value) {
  
  deviceharddisk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.DeviceInfo.deviceHarddisk)
}
void DeviceInfo::set_deviceharddisk(const char* value) {
  
  deviceharddisk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.DeviceInfo.deviceHarddisk)
}
void DeviceInfo::set_deviceharddisk(const char* value, size_t size) {
  
  deviceharddisk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.DeviceInfo.deviceHarddisk)
}
::std::string* DeviceInfo::mutable_deviceharddisk() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.DeviceInfo.deviceHarddisk)
  return deviceharddisk_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceInfo::release_deviceharddisk() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.DeviceInfo.deviceHarddisk)
  
  return deviceharddisk_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceInfo::set_allocated_deviceharddisk(::std::string* deviceharddisk) {
  if (deviceharddisk != NULL) {
    
  } else {
    
  }
  deviceharddisk_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceharddisk);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.DeviceInfo.deviceHarddisk)
}

// optional string deviceCPU = 4;
void DeviceInfo::clear_devicecpu() {
  devicecpu_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeviceInfo::devicecpu() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.DeviceInfo.deviceCPU)
  return devicecpu_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceInfo::set_devicecpu(const ::std::string& value) {
  
  devicecpu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.DeviceInfo.deviceCPU)
}
void DeviceInfo::set_devicecpu(const char* value) {
  
  devicecpu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.DeviceInfo.deviceCPU)
}
void DeviceInfo::set_devicecpu(const char* value, size_t size) {
  
  devicecpu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.DeviceInfo.deviceCPU)
}
::std::string* DeviceInfo::mutable_devicecpu() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.DeviceInfo.deviceCPU)
  return devicecpu_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceInfo::release_devicecpu() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.DeviceInfo.deviceCPU)
  
  return devicecpu_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceInfo::set_allocated_devicecpu(::std::string* devicecpu) {
  if (devicecpu != NULL) {
    
  } else {
    
  }
  devicecpu_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicecpu);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.DeviceInfo.deviceCPU)
}

// optional string cellphoneNumber = 5;
void DeviceInfo::clear_cellphonenumber() {
  cellphonenumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeviceInfo::cellphonenumber() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.DeviceInfo.cellphoneNumber)
  return cellphonenumber_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceInfo::set_cellphonenumber(const ::std::string& value) {
  
  cellphonenumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.DeviceInfo.cellphoneNumber)
}
void DeviceInfo::set_cellphonenumber(const char* value) {
  
  cellphonenumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.DeviceInfo.cellphoneNumber)
}
void DeviceInfo::set_cellphonenumber(const char* value, size_t size) {
  
  cellphonenumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.DeviceInfo.cellphoneNumber)
}
::std::string* DeviceInfo::mutable_cellphonenumber() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.DeviceInfo.cellphoneNumber)
  return cellphonenumber_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceInfo::release_cellphonenumber() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.DeviceInfo.cellphoneNumber)
  
  return cellphonenumber_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceInfo::set_allocated_cellphonenumber(::std::string* cellphonenumber) {
  if (cellphonenumber != NULL) {
    
  } else {
    
  }
  cellphonenumber_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cellphonenumber);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.DeviceInfo.cellphoneNumber)
}

// optional string cellphoneImei = 6;
void DeviceInfo::clear_cellphoneimei() {
  cellphoneimei_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeviceInfo::cellphoneimei() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.DeviceInfo.cellphoneImei)
  return cellphoneimei_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceInfo::set_cellphoneimei(const ::std::string& value) {
  
  cellphoneimei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.DeviceInfo.cellphoneImei)
}
void DeviceInfo::set_cellphoneimei(const char* value) {
  
  cellphoneimei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.DeviceInfo.cellphoneImei)
}
void DeviceInfo::set_cellphoneimei(const char* value, size_t size) {
  
  cellphoneimei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.DeviceInfo.cellphoneImei)
}
::std::string* DeviceInfo::mutable_cellphoneimei() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.DeviceInfo.cellphoneImei)
  return cellphoneimei_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceInfo::release_cellphoneimei() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.DeviceInfo.cellphoneImei)
  
  return cellphoneimei_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceInfo::set_allocated_cellphoneimei(::std::string* cellphoneimei) {
  if (cellphoneimei != NULL) {
    
  } else {
    
  }
  cellphoneimei_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cellphoneimei);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.DeviceInfo.cellphoneImei)
}

inline const DeviceInfo* DeviceInfo::internal_default_instance() {
  return &DeviceInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccountInfo::kUserNameFieldNumber;
const int AccountInfo::kStartDateFieldNumber;
const int AccountInfo::kStopDateFieldNumber;
const int AccountInfo::kCustomerNameFieldNumber;
const int AccountInfo::kContactPersonFieldNumber;
const int AccountInfo::kContactAddressFieldNumber;
const int AccountInfo::kContactTelFieldNumber;
const int AccountInfo::kContactEmailFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccountInfo::AccountInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_Login_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.AccountInfo)
}

void AccountInfo::InitAsDefaultInstance() {
}

AccountInfo::AccountInfo(const AccountInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.AccountInfo)
}

void AccountInfo::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  startdate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stopdate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contactperson_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contactaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contacttel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contactemail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AccountInfo::~AccountInfo() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.AccountInfo)
  SharedDtor();
}

void AccountInfo::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  startdate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stopdate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contactperson_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contactaddress_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contacttel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contactemail_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AccountInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountInfo_descriptor_;
}

const AccountInfo& AccountInfo::default_instance() {
  protobuf_InitDefaults_Login_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AccountInfo> AccountInfo_default_instance_;

AccountInfo* AccountInfo::New(::google::protobuf::Arena* arena) const {
  AccountInfo* n = new AccountInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AccountInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.AccountInfo)
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  startdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stopdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contactperson_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contactaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contacttel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contactemail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AccountInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.AccountInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string userName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.AccountInfo.userName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_startDate;
        break;
      }

      // optional string startDate = 2;
      case 2: {
        if (tag == 18) {
         parse_startDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_startdate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->startdate().data(), this->startdate().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.AccountInfo.startDate"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_stopDate;
        break;
      }

      // optional string stopDate = 3;
      case 3: {
        if (tag == 26) {
         parse_stopDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stopdate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stopdate().data(), this->stopdate().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.AccountInfo.stopDate"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_customerName;
        break;
      }

      // optional string customerName = 4;
      case 4: {
        if (tag == 34) {
         parse_customerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customername()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->customername().data(), this->customername().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.AccountInfo.customerName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_contactPerson;
        break;
      }

      // optional string contactPerson = 5;
      case 5: {
        if (tag == 42) {
         parse_contactPerson:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contactperson()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->contactperson().data(), this->contactperson().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.AccountInfo.contactPerson"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_contactAddress;
        break;
      }

      // optional string contactAddress = 6;
      case 6: {
        if (tag == 50) {
         parse_contactAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contactaddress()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->contactaddress().data(), this->contactaddress().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.AccountInfo.contactAddress"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_contactTel;
        break;
      }

      // optional string contactTel = 7;
      case 7: {
        if (tag == 58) {
         parse_contactTel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contacttel()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->contacttel().data(), this->contacttel().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.AccountInfo.contactTel"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_contactEmail;
        break;
      }

      // optional string contactEmail = 8;
      case 8: {
        if (tag == 66) {
         parse_contactEmail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contactemail()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->contactemail().data(), this->contactemail().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.AccountInfo.contactEmail"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.AccountInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.AccountInfo)
  return false;
#undef DO_
}

void AccountInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.AccountInfo)
  // optional string userName = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.AccountInfo.userName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // optional string startDate = 2;
  if (this->startdate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->startdate().data(), this->startdate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.AccountInfo.startDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->startdate(), output);
  }

  // optional string stopDate = 3;
  if (this->stopdate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stopdate().data(), this->stopdate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.AccountInfo.stopDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->stopdate(), output);
  }

  // optional string customerName = 4;
  if (this->customername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->customername().data(), this->customername().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.AccountInfo.customerName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->customername(), output);
  }

  // optional string contactPerson = 5;
  if (this->contactperson().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->contactperson().data(), this->contactperson().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.AccountInfo.contactPerson");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->contactperson(), output);
  }

  // optional string contactAddress = 6;
  if (this->contactaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->contactaddress().data(), this->contactaddress().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.AccountInfo.contactAddress");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->contactaddress(), output);
  }

  // optional string contactTel = 7;
  if (this->contacttel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->contacttel().data(), this->contacttel().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.AccountInfo.contactTel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->contacttel(), output);
  }

  // optional string contactEmail = 8;
  if (this->contactemail().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->contactemail().data(), this->contactemail().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.AccountInfo.contactEmail");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->contactemail(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.AccountInfo)
}

::google::protobuf::uint8* AccountInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.AccountInfo)
  // optional string userName = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.AccountInfo.userName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // optional string startDate = 2;
  if (this->startdate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->startdate().data(), this->startdate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.AccountInfo.startDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->startdate(), target);
  }

  // optional string stopDate = 3;
  if (this->stopdate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stopdate().data(), this->stopdate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.AccountInfo.stopDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->stopdate(), target);
  }

  // optional string customerName = 4;
  if (this->customername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->customername().data(), this->customername().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.AccountInfo.customerName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->customername(), target);
  }

  // optional string contactPerson = 5;
  if (this->contactperson().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->contactperson().data(), this->contactperson().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.AccountInfo.contactPerson");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->contactperson(), target);
  }

  // optional string contactAddress = 6;
  if (this->contactaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->contactaddress().data(), this->contactaddress().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.AccountInfo.contactAddress");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->contactaddress(), target);
  }

  // optional string contactTel = 7;
  if (this->contacttel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->contacttel().data(), this->contacttel().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.AccountInfo.contactTel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->contacttel(), target);
  }

  // optional string contactEmail = 8;
  if (this->contactemail().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->contactemail().data(), this->contactemail().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.AccountInfo.contactEmail");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->contactemail(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.AccountInfo)
  return target;
}

size_t AccountInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.AccountInfo)
  size_t total_size = 0;

  // optional string userName = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // optional string startDate = 2;
  if (this->startdate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->startdate());
  }

  // optional string stopDate = 3;
  if (this->stopdate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stopdate());
  }

  // optional string customerName = 4;
  if (this->customername().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->customername());
  }

  // optional string contactPerson = 5;
  if (this->contactperson().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->contactperson());
  }

  // optional string contactAddress = 6;
  if (this->contactaddress().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->contactaddress());
  }

  // optional string contactTel = 7;
  if (this->contacttel().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->contacttel());
  }

  // optional string contactEmail = 8;
  if (this->contactemail().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->contactemail());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.AccountInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AccountInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccountInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.AccountInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.AccountInfo)
    UnsafeMergeFrom(*source);
  }
}

void AccountInfo::MergeFrom(const AccountInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.AccountInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AccountInfo::UnsafeMergeFrom(const AccountInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.startdate().size() > 0) {

    startdate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.startdate_);
  }
  if (from.stopdate().size() > 0) {

    stopdate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stopdate_);
  }
  if (from.customername().size() > 0) {

    customername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.customername_);
  }
  if (from.contactperson().size() > 0) {

    contactperson_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contactperson_);
  }
  if (from.contactaddress().size() > 0) {

    contactaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contactaddress_);
  }
  if (from.contacttel().size() > 0) {

    contacttel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contacttel_);
  }
  if (from.contactemail().size() > 0) {

    contactemail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contactemail_);
  }
}

void AccountInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.AccountInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountInfo::CopyFrom(const AccountInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.AccountInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AccountInfo::IsInitialized() const {

  return true;
}

void AccountInfo::Swap(AccountInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccountInfo::InternalSwap(AccountInfo* other) {
  username_.Swap(&other->username_);
  startdate_.Swap(&other->startdate_);
  stopdate_.Swap(&other->stopdate_);
  customername_.Swap(&other->customername_);
  contactperson_.Swap(&other->contactperson_);
  contactaddress_.Swap(&other->contactaddress_);
  contacttel_.Swap(&other->contacttel_);
  contactemail_.Swap(&other->contactemail_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AccountInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountInfo_descriptor_;
  metadata.reflection = AccountInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AccountInfo

// optional string userName = 1;
void AccountInfo::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AccountInfo::username() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.AccountInfo.userName)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AccountInfo::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.AccountInfo.userName)
}
void AccountInfo::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.AccountInfo.userName)
}
void AccountInfo::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.AccountInfo.userName)
}
::std::string* AccountInfo::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.AccountInfo.userName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AccountInfo::release_username() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.AccountInfo.userName)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AccountInfo::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.AccountInfo.userName)
}

// optional string startDate = 2;
void AccountInfo::clear_startdate() {
  startdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AccountInfo::startdate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.AccountInfo.startDate)
  return startdate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AccountInfo::set_startdate(const ::std::string& value) {
  
  startdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.AccountInfo.startDate)
}
void AccountInfo::set_startdate(const char* value) {
  
  startdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.AccountInfo.startDate)
}
void AccountInfo::set_startdate(const char* value, size_t size) {
  
  startdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.AccountInfo.startDate)
}
::std::string* AccountInfo::mutable_startdate() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.AccountInfo.startDate)
  return startdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AccountInfo::release_startdate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.AccountInfo.startDate)
  
  return startdate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AccountInfo::set_allocated_startdate(::std::string* startdate) {
  if (startdate != NULL) {
    
  } else {
    
  }
  startdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), startdate);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.AccountInfo.startDate)
}

// optional string stopDate = 3;
void AccountInfo::clear_stopdate() {
  stopdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AccountInfo::stopdate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.AccountInfo.stopDate)
  return stopdate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AccountInfo::set_stopdate(const ::std::string& value) {
  
  stopdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.AccountInfo.stopDate)
}
void AccountInfo::set_stopdate(const char* value) {
  
  stopdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.AccountInfo.stopDate)
}
void AccountInfo::set_stopdate(const char* value, size_t size) {
  
  stopdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.AccountInfo.stopDate)
}
::std::string* AccountInfo::mutable_stopdate() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.AccountInfo.stopDate)
  return stopdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AccountInfo::release_stopdate() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.AccountInfo.stopDate)
  
  return stopdate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AccountInfo::set_allocated_stopdate(::std::string* stopdate) {
  if (stopdate != NULL) {
    
  } else {
    
  }
  stopdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stopdate);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.AccountInfo.stopDate)
}

// optional string customerName = 4;
void AccountInfo::clear_customername() {
  customername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AccountInfo::customername() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.AccountInfo.customerName)
  return customername_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AccountInfo::set_customername(const ::std::string& value) {
  
  customername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.AccountInfo.customerName)
}
void AccountInfo::set_customername(const char* value) {
  
  customername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.AccountInfo.customerName)
}
void AccountInfo::set_customername(const char* value, size_t size) {
  
  customername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.AccountInfo.customerName)
}
::std::string* AccountInfo::mutable_customername() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.AccountInfo.customerName)
  return customername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AccountInfo::release_customername() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.AccountInfo.customerName)
  
  return customername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AccountInfo::set_allocated_customername(::std::string* customername) {
  if (customername != NULL) {
    
  } else {
    
  }
  customername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), customername);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.AccountInfo.customerName)
}

// optional string contactPerson = 5;
void AccountInfo::clear_contactperson() {
  contactperson_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AccountInfo::contactperson() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.AccountInfo.contactPerson)
  return contactperson_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AccountInfo::set_contactperson(const ::std::string& value) {
  
  contactperson_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.AccountInfo.contactPerson)
}
void AccountInfo::set_contactperson(const char* value) {
  
  contactperson_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.AccountInfo.contactPerson)
}
void AccountInfo::set_contactperson(const char* value, size_t size) {
  
  contactperson_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.AccountInfo.contactPerson)
}
::std::string* AccountInfo::mutable_contactperson() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.AccountInfo.contactPerson)
  return contactperson_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AccountInfo::release_contactperson() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.AccountInfo.contactPerson)
  
  return contactperson_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AccountInfo::set_allocated_contactperson(::std::string* contactperson) {
  if (contactperson != NULL) {
    
  } else {
    
  }
  contactperson_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contactperson);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.AccountInfo.contactPerson)
}

// optional string contactAddress = 6;
void AccountInfo::clear_contactaddress() {
  contactaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AccountInfo::contactaddress() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.AccountInfo.contactAddress)
  return contactaddress_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AccountInfo::set_contactaddress(const ::std::string& value) {
  
  contactaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.AccountInfo.contactAddress)
}
void AccountInfo::set_contactaddress(const char* value) {
  
  contactaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.AccountInfo.contactAddress)
}
void AccountInfo::set_contactaddress(const char* value, size_t size) {
  
  contactaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.AccountInfo.contactAddress)
}
::std::string* AccountInfo::mutable_contactaddress() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.AccountInfo.contactAddress)
  return contactaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AccountInfo::release_contactaddress() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.AccountInfo.contactAddress)
  
  return contactaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AccountInfo::set_allocated_contactaddress(::std::string* contactaddress) {
  if (contactaddress != NULL) {
    
  } else {
    
  }
  contactaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contactaddress);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.AccountInfo.contactAddress)
}

// optional string contactTel = 7;
void AccountInfo::clear_contacttel() {
  contacttel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AccountInfo::contacttel() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.AccountInfo.contactTel)
  return contacttel_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AccountInfo::set_contacttel(const ::std::string& value) {
  
  contacttel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.AccountInfo.contactTel)
}
void AccountInfo::set_contacttel(const char* value) {
  
  contacttel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.AccountInfo.contactTel)
}
void AccountInfo::set_contacttel(const char* value, size_t size) {
  
  contacttel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.AccountInfo.contactTel)
}
::std::string* AccountInfo::mutable_contacttel() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.AccountInfo.contactTel)
  return contacttel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AccountInfo::release_contacttel() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.AccountInfo.contactTel)
  
  return contacttel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AccountInfo::set_allocated_contacttel(::std::string* contacttel) {
  if (contacttel != NULL) {
    
  } else {
    
  }
  contacttel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contacttel);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.AccountInfo.contactTel)
}

// optional string contactEmail = 8;
void AccountInfo::clear_contactemail() {
  contactemail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AccountInfo::contactemail() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.AccountInfo.contactEmail)
  return contactemail_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AccountInfo::set_contactemail(const ::std::string& value) {
  
  contactemail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.AccountInfo.contactEmail)
}
void AccountInfo::set_contactemail(const char* value) {
  
  contactemail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.AccountInfo.contactEmail)
}
void AccountInfo::set_contactemail(const char* value, size_t size) {
  
  contactemail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.AccountInfo.contactEmail)
}
::std::string* AccountInfo::mutable_contactemail() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.AccountInfo.contactEmail)
  return contactemail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AccountInfo::release_contactemail() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.AccountInfo.contactEmail)
  
  return contactemail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AccountInfo::set_allocated_contactemail(::std::string* contactemail) {
  if (contactemail != NULL) {
    
  } else {
    
  }
  contactemail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contactemail);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.AccountInfo.contactEmail)
}

inline const AccountInfo* AccountInfo::internal_default_instance() {
  return &AccountInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)
