// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MDQuote.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MDQuote.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

namespace {

const ::google::protobuf::Descriptor* MDQuote_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MDQuote_reflection_ = NULL;
const ::google::protobuf::Descriptor* MDCashBondQuote_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MDCashBondQuote_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MDQuote_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_MDQuote_2eproto() {
  protobuf_AddDesc_MDQuote_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MDQuote.proto");
  GOOGLE_CHECK(file != NULL);
  MDQuote_descriptor_ = file->message_type(0);
  static const int MDQuote_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDQuote, htscsecurityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDQuote, mddate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDQuote, mdtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDQuote, datatimestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDQuote, tradingphasecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDQuote, securityidsource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDQuote, securitytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDQuote, exchangedate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDQuote, exchangetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDQuote, maxpx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDQuote, minpx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDQuote, channelno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDQuote, applseqnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDQuote, mdbooktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDQuote, marketindicator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDQuote, marketdepth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDQuote, mdsubbooktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDQuote, mdcashbondquotes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDQuote, datamultiplepowerof10_),
  };
  MDQuote_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MDQuote_descriptor_,
      MDQuote::internal_default_instance(),
      MDQuote_offsets_,
      -1,
      -1,
      -1,
      sizeof(MDQuote),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDQuote, _internal_metadata_));
  MDCashBondQuote_descriptor_ = file->message_type(1);
  static const int MDCashBondQuote_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDCashBondQuote, quotetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDCashBondQuote, side_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDCashBondQuote, pricelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDCashBondQuote, quoteid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDCashBondQuote, quotedate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDCashBondQuote, quotetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDCashBondQuote, cleanprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDCashBondQuote, dirtyprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDCashBondQuote, totalfacevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDCashBondQuote, clearingmethod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDCashBondQuote, settltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDCashBondQuote, settldate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDCashBondQuote, settlcurrency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDCashBondQuote, settlcurrfxrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDCashBondQuote, partyrole_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDCashBondQuote, tradercode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDCashBondQuote, maturityyield_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDCashBondQuote, deliverytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDCashBondQuote, traderaccountid_),
  };
  MDCashBondQuote_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MDCashBondQuote_descriptor_,
      MDCashBondQuote::internal_default_instance(),
      MDCashBondQuote_offsets_,
      -1,
      -1,
      -1,
      sizeof(MDCashBondQuote),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MDCashBondQuote, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MDQuote_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MDQuote_descriptor_, MDQuote::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MDCashBondQuote_descriptor_, MDCashBondQuote::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MDQuote_2eproto() {
  MDQuote_default_instance_.Shutdown();
  delete MDQuote_reflection_;
  MDCashBondQuote_default_instance_.Shutdown();
  delete MDCashBondQuote_reflection_;
}

void protobuf_InitDefaults_MDQuote_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::com::htsc::mdc::model::protobuf_InitDefaults_ESecurityIDSource_2eproto();
  ::com::htsc::mdc::model::protobuf_InitDefaults_ESecurityType_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  MDQuote_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  MDCashBondQuote_default_instance_.DefaultConstruct();
  MDQuote_default_instance_.get_mutable()->InitAsDefaultInstance();
  MDCashBondQuote_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_MDQuote_2eproto_once_);
void protobuf_InitDefaults_MDQuote_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_MDQuote_2eproto_once_,
                 &protobuf_InitDefaults_MDQuote_2eproto_impl);
}
void protobuf_AddDesc_MDQuote_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_MDQuote_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rMDQuote.proto\022\032com.htsc.mdc.insight.mo"
    "del\032\027ESecurityIDSource.proto\032\023ESecurityT"
    "ype.proto\"\234\004\n\007MDQuote\022\026\n\016HTSCSecurityID\030"
    "\001 \001(\t\022\016\n\006MDDate\030\002 \001(\005\022\016\n\006MDTime\030\003 \001(\005\022\025\n"
    "\rDataTimestamp\030\004 \001(\003\022\030\n\020TradingPhaseCode"
    "\030\005 \001(\t\022\?\n\020securityIDSource\030\006 \001(\0162%.com.h"
    "tsc.mdc.model.ESecurityIDSource\0227\n\014secur"
    "ityType\030\007 \001(\0162!.com.htsc.mdc.model.ESecu"
    "rityType\022\024\n\014ExchangeDate\030\010 \001(\005\022\024\n\014Exchan"
    "geTime\030\t \001(\005\022\r\n\005MaxPx\030\n \001(\003\022\r\n\005MinPx\030\013 \001"
    "(\003\022\021\n\tChannelNo\030\014 \001(\005\022\022\n\nApplSeqNum\030\r \001("
    "\003\022\022\n\nMDBookType\030\016 \001(\005\022\027\n\017MarketIndicator"
    "\030\017 \001(\t\022\023\n\013MarketDepth\030\020 \001(\005\022\025\n\rMDSubBook"
    "Type\030\021 \001(\005\022E\n\020MDCashBondQuotes\030\022 \003(\0132+.c"
    "om.htsc.mdc.insight.model.MDCashBondQuot"
    "e\022\035\n\025DataMultiplePowerOf10\030\023 \001(\005\"\230\003\n\017MDC"
    "ashBondQuote\022\021\n\tQuoteType\030\001 \001(\005\022\014\n\004Side\030"
    "\002 \001(\005\022\022\n\nPriceLevel\030\003 \001(\005\022\017\n\007QuoteID\030\004 \001"
    "(\t\022\021\n\tQuoteDate\030\005 \001(\005\022\021\n\tQuoteTime\030\006 \001(\005"
    "\022\022\n\nCleanPrice\030\007 \001(\003\022\022\n\nDirtyPrice\030\010 \001(\003"
    "\022\026\n\016TotalFaceValue\030\t \001(\003\022\026\n\016ClearingMeth"
    "od\030\n \001(\005\022\021\n\tSettlType\030\013 \001(\t\022\021\n\tSettlDate"
    "\030\014 \001(\005\022\025\n\rSettlCurrency\030\r \001(\t\022\027\n\017SettlCu"
    "rrFxRate\030\016 \001(\003\022\021\n\tPartyRole\030\017 \001(\005\022\022\n\nTra"
    "derCode\030\020 \001(\t\022\025\n\rMaturityYield\030\021 \001(\003\022\024\n\014"
    "DeliveryType\030\022 \001(\005\022\027\n\017TraderAccountID\030\023 "
    "\001(\tB0\n\032com.htsc.mdc.insight.modelB\rMDQuo"
    "teProtosH\001\240\001\001b\006proto3", 1101);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MDQuote.proto", &protobuf_RegisterTypes);
  ::com::htsc::mdc::model::protobuf_AddDesc_ESecurityIDSource_2eproto();
  ::com::htsc::mdc::model::protobuf_AddDesc_ESecurityType_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MDQuote_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_MDQuote_2eproto_once_);
void protobuf_AddDesc_MDQuote_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_MDQuote_2eproto_once_,
                 &protobuf_AddDesc_MDQuote_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MDQuote_2eproto {
  StaticDescriptorInitializer_MDQuote_2eproto() {
    protobuf_AddDesc_MDQuote_2eproto();
  }
} static_descriptor_initializer_MDQuote_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MDQuote::kHTSCSecurityIDFieldNumber;
const int MDQuote::kMDDateFieldNumber;
const int MDQuote::kMDTimeFieldNumber;
const int MDQuote::kDataTimestampFieldNumber;
const int MDQuote::kTradingPhaseCodeFieldNumber;
const int MDQuote::kSecurityIDSourceFieldNumber;
const int MDQuote::kSecurityTypeFieldNumber;
const int MDQuote::kExchangeDateFieldNumber;
const int MDQuote::kExchangeTimeFieldNumber;
const int MDQuote::kMaxPxFieldNumber;
const int MDQuote::kMinPxFieldNumber;
const int MDQuote::kChannelNoFieldNumber;
const int MDQuote::kApplSeqNumFieldNumber;
const int MDQuote::kMDBookTypeFieldNumber;
const int MDQuote::kMarketIndicatorFieldNumber;
const int MDQuote::kMarketDepthFieldNumber;
const int MDQuote::kMDSubBookTypeFieldNumber;
const int MDQuote::kMDCashBondQuotesFieldNumber;
const int MDQuote::kDataMultiplePowerOf10FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MDQuote::MDQuote()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_MDQuote_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.MDQuote)
}

void MDQuote::InitAsDefaultInstance() {
}

MDQuote::MDQuote(const MDQuote& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MDQuote)
}

void MDQuote::SharedCtor() {
  htscsecurityid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradingphasecode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketindicator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mddate_, 0, reinterpret_cast<char*>(&datamultiplepowerof10_) -
    reinterpret_cast<char*>(&mddate_) + sizeof(datamultiplepowerof10_));
  _cached_size_ = 0;
}

MDQuote::~MDQuote() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MDQuote)
  SharedDtor();
}

void MDQuote::SharedDtor() {
  htscsecurityid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradingphasecode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketindicator_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MDQuote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MDQuote::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MDQuote_descriptor_;
}

const MDQuote& MDQuote::default_instance() {
  protobuf_InitDefaults_MDQuote_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MDQuote> MDQuote_default_instance_;

MDQuote* MDQuote::New(::google::protobuf::Arena* arena) const {
  MDQuote* n = new MDQuote;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MDQuote::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MDQuote)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MDQuote, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MDQuote*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mddate_, exchangedate_);
  htscsecurityid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradingphasecode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(exchangetime_, marketdepth_);
  marketindicator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(mdsubbooktype_, datamultiplepowerof10_);

#undef ZR_HELPER_
#undef ZR_

  mdcashbondquotes_.Clear();
}

bool MDQuote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.MDQuote)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string HTSCSecurityID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_htscsecurityid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->htscsecurityid().data(), this->htscsecurityid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDQuote.HTSCSecurityID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MDDate;
        break;
      }

      // optional int32 MDDate = 2;
      case 2: {
        if (tag == 16) {
         parse_MDDate:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mddate_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MDTime;
        break;
      }

      // optional int32 MDTime = 3;
      case 3: {
        if (tag == 24) {
         parse_MDTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mdtime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_DataTimestamp;
        break;
      }

      // optional int64 DataTimestamp = 4;
      case 4: {
        if (tag == 32) {
         parse_DataTimestamp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &datatimestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_TradingPhaseCode;
        break;
      }

      // optional string TradingPhaseCode = 5;
      case 5: {
        if (tag == 42) {
         parse_TradingPhaseCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradingphasecode()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tradingphasecode().data(), this->tradingphasecode().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDQuote.TradingPhaseCode"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_securityIDSource;
        break;
      }

      // optional .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
      case 6: {
        if (tag == 48) {
         parse_securityIDSource:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_securityidsource(static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_securityType;
        break;
      }

      // optional .com.htsc.mdc.model.ESecurityType securityType = 7;
      case 7: {
        if (tag == 56) {
         parse_securityType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_securitytype(static_cast< ::com::htsc::mdc::model::ESecurityType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ExchangeDate;
        break;
      }

      // optional int32 ExchangeDate = 8;
      case 8: {
        if (tag == 64) {
         parse_ExchangeDate:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchangedate_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_ExchangeTime;
        break;
      }

      // optional int32 ExchangeTime = 9;
      case 9: {
        if (tag == 72) {
         parse_ExchangeTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchangetime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_MaxPx;
        break;
      }

      // optional int64 MaxPx = 10;
      case 10: {
        if (tag == 80) {
         parse_MaxPx:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &maxpx_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_MinPx;
        break;
      }

      // optional int64 MinPx = 11;
      case 11: {
        if (tag == 88) {
         parse_MinPx:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &minpx_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_ChannelNo;
        break;
      }

      // optional int32 ChannelNo = 12;
      case 12: {
        if (tag == 96) {
         parse_ChannelNo:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channelno_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_ApplSeqNum;
        break;
      }

      // optional int64 ApplSeqNum = 13;
      case 13: {
        if (tag == 104) {
         parse_ApplSeqNum:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &applseqnum_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_MDBookType;
        break;
      }

      // optional int32 MDBookType = 14;
      case 14: {
        if (tag == 112) {
         parse_MDBookType:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mdbooktype_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_MarketIndicator;
        break;
      }

      // optional string MarketIndicator = 15;
      case 15: {
        if (tag == 122) {
         parse_MarketIndicator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_marketindicator()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->marketindicator().data(), this->marketindicator().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDQuote.MarketIndicator"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_MarketDepth;
        break;
      }

      // optional int32 MarketDepth = 16;
      case 16: {
        if (tag == 128) {
         parse_MarketDepth:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &marketdepth_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_MDSubBookType;
        break;
      }

      // optional int32 MDSubBookType = 17;
      case 17: {
        if (tag == 136) {
         parse_MDSubBookType:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mdsubbooktype_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_MDCashBondQuotes;
        break;
      }

      // repeated .com.htsc.mdc.insight.model.MDCashBondQuote MDCashBondQuotes = 18;
      case 18: {
        if (tag == 146) {
         parse_MDCashBondQuotes:
          DO_(input->IncrementRecursionDepth());
         parse_loop_MDCashBondQuotes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mdcashbondquotes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_loop_MDCashBondQuotes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(152)) goto parse_DataMultiplePowerOf10;
        break;
      }

      // optional int32 DataMultiplePowerOf10 = 19;
      case 19: {
        if (tag == 152) {
         parse_DataMultiplePowerOf10:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datamultiplepowerof10_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.MDQuote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.MDQuote)
  return false;
#undef DO_
}

void MDQuote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.MDQuote)
  // optional string HTSCSecurityID = 1;
  if (this->htscsecurityid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->htscsecurityid().data(), this->htscsecurityid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDQuote.HTSCSecurityID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->htscsecurityid(), output);
  }

  // optional int32 MDDate = 2;
  if (this->mddate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mddate(), output);
  }

  // optional int32 MDTime = 3;
  if (this->mdtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mdtime(), output);
  }

  // optional int64 DataTimestamp = 4;
  if (this->datatimestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->datatimestamp(), output);
  }

  // optional string TradingPhaseCode = 5;
  if (this->tradingphasecode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradingphasecode().data(), this->tradingphasecode().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDQuote.TradingPhaseCode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->tradingphasecode(), output);
  }

  // optional .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  if (this->securityidsource() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->securityidsource(), output);
  }

  // optional .com.htsc.mdc.model.ESecurityType securityType = 7;
  if (this->securitytype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->securitytype(), output);
  }

  // optional int32 ExchangeDate = 8;
  if (this->exchangedate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->exchangedate(), output);
  }

  // optional int32 ExchangeTime = 9;
  if (this->exchangetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->exchangetime(), output);
  }

  // optional int64 MaxPx = 10;
  if (this->maxpx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->maxpx(), output);
  }

  // optional int64 MinPx = 11;
  if (this->minpx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->minpx(), output);
  }

  // optional int32 ChannelNo = 12;
  if (this->channelno() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->channelno(), output);
  }

  // optional int64 ApplSeqNum = 13;
  if (this->applseqnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->applseqnum(), output);
  }

  // optional int32 MDBookType = 14;
  if (this->mdbooktype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->mdbooktype(), output);
  }

  // optional string MarketIndicator = 15;
  if (this->marketindicator().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketindicator().data(), this->marketindicator().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDQuote.MarketIndicator");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->marketindicator(), output);
  }

  // optional int32 MarketDepth = 16;
  if (this->marketdepth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->marketdepth(), output);
  }

  // optional int32 MDSubBookType = 17;
  if (this->mdsubbooktype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->mdsubbooktype(), output);
  }

  // repeated .com.htsc.mdc.insight.model.MDCashBondQuote MDCashBondQuotes = 18;
  for (unsigned int i = 0, n = this->mdcashbondquotes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->mdcashbondquotes(i), output);
  }

  // optional int32 DataMultiplePowerOf10 = 19;
  if (this->datamultiplepowerof10() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->datamultiplepowerof10(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.MDQuote)
}

::google::protobuf::uint8* MDQuote::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MDQuote)
  // optional string HTSCSecurityID = 1;
  if (this->htscsecurityid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->htscsecurityid().data(), this->htscsecurityid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDQuote.HTSCSecurityID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->htscsecurityid(), target);
  }

  // optional int32 MDDate = 2;
  if (this->mddate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mddate(), target);
  }

  // optional int32 MDTime = 3;
  if (this->mdtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mdtime(), target);
  }

  // optional int64 DataTimestamp = 4;
  if (this->datatimestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->datatimestamp(), target);
  }

  // optional string TradingPhaseCode = 5;
  if (this->tradingphasecode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradingphasecode().data(), this->tradingphasecode().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDQuote.TradingPhaseCode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->tradingphasecode(), target);
  }

  // optional .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  if (this->securityidsource() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->securityidsource(), target);
  }

  // optional .com.htsc.mdc.model.ESecurityType securityType = 7;
  if (this->securitytype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->securitytype(), target);
  }

  // optional int32 ExchangeDate = 8;
  if (this->exchangedate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->exchangedate(), target);
  }

  // optional int32 ExchangeTime = 9;
  if (this->exchangetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->exchangetime(), target);
  }

  // optional int64 MaxPx = 10;
  if (this->maxpx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->maxpx(), target);
  }

  // optional int64 MinPx = 11;
  if (this->minpx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->minpx(), target);
  }

  // optional int32 ChannelNo = 12;
  if (this->channelno() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->channelno(), target);
  }

  // optional int64 ApplSeqNum = 13;
  if (this->applseqnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->applseqnum(), target);
  }

  // optional int32 MDBookType = 14;
  if (this->mdbooktype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->mdbooktype(), target);
  }

  // optional string MarketIndicator = 15;
  if (this->marketindicator().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketindicator().data(), this->marketindicator().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDQuote.MarketIndicator");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->marketindicator(), target);
  }

  // optional int32 MarketDepth = 16;
  if (this->marketdepth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->marketdepth(), target);
  }

  // optional int32 MDSubBookType = 17;
  if (this->mdsubbooktype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->mdsubbooktype(), target);
  }

  // repeated .com.htsc.mdc.insight.model.MDCashBondQuote MDCashBondQuotes = 18;
  for (unsigned int i = 0, n = this->mdcashbondquotes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, this->mdcashbondquotes(i), false, target);
  }

  // optional int32 DataMultiplePowerOf10 = 19;
  if (this->datamultiplepowerof10() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->datamultiplepowerof10(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MDQuote)
  return target;
}

size_t MDQuote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MDQuote)
  size_t total_size = 0;

  // optional string HTSCSecurityID = 1;
  if (this->htscsecurityid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->htscsecurityid());
  }

  // optional int32 MDDate = 2;
  if (this->mddate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mddate());
  }

  // optional int32 MDTime = 3;
  if (this->mdtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mdtime());
  }

  // optional int64 DataTimestamp = 4;
  if (this->datatimestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->datatimestamp());
  }

  // optional string TradingPhaseCode = 5;
  if (this->tradingphasecode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tradingphasecode());
  }

  // optional .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  if (this->securityidsource() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->securityidsource());
  }

  // optional .com.htsc.mdc.model.ESecurityType securityType = 7;
  if (this->securitytype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->securitytype());
  }

  // optional int32 ExchangeDate = 8;
  if (this->exchangedate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exchangedate());
  }

  // optional int32 ExchangeTime = 9;
  if (this->exchangetime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exchangetime());
  }

  // optional int64 MaxPx = 10;
  if (this->maxpx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->maxpx());
  }

  // optional int64 MinPx = 11;
  if (this->minpx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->minpx());
  }

  // optional int32 ChannelNo = 12;
  if (this->channelno() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->channelno());
  }

  // optional int64 ApplSeqNum = 13;
  if (this->applseqnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->applseqnum());
  }

  // optional int32 MDBookType = 14;
  if (this->mdbooktype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mdbooktype());
  }

  // optional string MarketIndicator = 15;
  if (this->marketindicator().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->marketindicator());
  }

  // optional int32 MarketDepth = 16;
  if (this->marketdepth() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->marketdepth());
  }

  // optional int32 MDSubBookType = 17;
  if (this->mdsubbooktype() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mdsubbooktype());
  }

  // optional int32 DataMultiplePowerOf10 = 19;
  if (this->datamultiplepowerof10() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->datamultiplepowerof10());
  }

  // repeated .com.htsc.mdc.insight.model.MDCashBondQuote MDCashBondQuotes = 18;
  {
    unsigned int count = this->mdcashbondquotes_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mdcashbondquotes(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MDQuote::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.MDQuote)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MDQuote* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MDQuote>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.MDQuote)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.MDQuote)
    UnsafeMergeFrom(*source);
  }
}

void MDQuote::MergeFrom(const MDQuote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MDQuote)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MDQuote::UnsafeMergeFrom(const MDQuote& from) {
  GOOGLE_DCHECK(&from != this);
  mdcashbondquotes_.MergeFrom(from.mdcashbondquotes_);
  if (from.htscsecurityid().size() > 0) {

    htscsecurityid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.htscsecurityid_);
  }
  if (from.mddate() != 0) {
    set_mddate(from.mddate());
  }
  if (from.mdtime() != 0) {
    set_mdtime(from.mdtime());
  }
  if (from.datatimestamp() != 0) {
    set_datatimestamp(from.datatimestamp());
  }
  if (from.tradingphasecode().size() > 0) {

    tradingphasecode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradingphasecode_);
  }
  if (from.securityidsource() != 0) {
    set_securityidsource(from.securityidsource());
  }
  if (from.securitytype() != 0) {
    set_securitytype(from.securitytype());
  }
  if (from.exchangedate() != 0) {
    set_exchangedate(from.exchangedate());
  }
  if (from.exchangetime() != 0) {
    set_exchangetime(from.exchangetime());
  }
  if (from.maxpx() != 0) {
    set_maxpx(from.maxpx());
  }
  if (from.minpx() != 0) {
    set_minpx(from.minpx());
  }
  if (from.channelno() != 0) {
    set_channelno(from.channelno());
  }
  if (from.applseqnum() != 0) {
    set_applseqnum(from.applseqnum());
  }
  if (from.mdbooktype() != 0) {
    set_mdbooktype(from.mdbooktype());
  }
  if (from.marketindicator().size() > 0) {

    marketindicator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketindicator_);
  }
  if (from.marketdepth() != 0) {
    set_marketdepth(from.marketdepth());
  }
  if (from.mdsubbooktype() != 0) {
    set_mdsubbooktype(from.mdsubbooktype());
  }
  if (from.datamultiplepowerof10() != 0) {
    set_datamultiplepowerof10(from.datamultiplepowerof10());
  }
}

void MDQuote::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.MDQuote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MDQuote::CopyFrom(const MDQuote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MDQuote)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MDQuote::IsInitialized() const {

  return true;
}

void MDQuote::Swap(MDQuote* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MDQuote::InternalSwap(MDQuote* other) {
  htscsecurityid_.Swap(&other->htscsecurityid_);
  std::swap(mddate_, other->mddate_);
  std::swap(mdtime_, other->mdtime_);
  std::swap(datatimestamp_, other->datatimestamp_);
  tradingphasecode_.Swap(&other->tradingphasecode_);
  std::swap(securityidsource_, other->securityidsource_);
  std::swap(securitytype_, other->securitytype_);
  std::swap(exchangedate_, other->exchangedate_);
  std::swap(exchangetime_, other->exchangetime_);
  std::swap(maxpx_, other->maxpx_);
  std::swap(minpx_, other->minpx_);
  std::swap(channelno_, other->channelno_);
  std::swap(applseqnum_, other->applseqnum_);
  std::swap(mdbooktype_, other->mdbooktype_);
  marketindicator_.Swap(&other->marketindicator_);
  std::swap(marketdepth_, other->marketdepth_);
  std::swap(mdsubbooktype_, other->mdsubbooktype_);
  mdcashbondquotes_.UnsafeArenaSwap(&other->mdcashbondquotes_);
  std::swap(datamultiplepowerof10_, other->datamultiplepowerof10_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MDQuote::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MDQuote_descriptor_;
  metadata.reflection = MDQuote_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MDQuote

// optional string HTSCSecurityID = 1;
void MDQuote::clear_htscsecurityid() {
  htscsecurityid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MDQuote::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.HTSCSecurityID)
  return htscsecurityid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MDQuote::set_htscsecurityid(const ::std::string& value) {
  
  htscsecurityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.HTSCSecurityID)
}
void MDQuote::set_htscsecurityid(const char* value) {
  
  htscsecurityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDQuote.HTSCSecurityID)
}
void MDQuote::set_htscsecurityid(const char* value, size_t size) {
  
  htscsecurityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDQuote.HTSCSecurityID)
}
::std::string* MDQuote::mutable_htscsecurityid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDQuote.HTSCSecurityID)
  return htscsecurityid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MDQuote::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDQuote.HTSCSecurityID)
  
  return htscsecurityid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MDQuote::set_allocated_htscsecurityid(::std::string* htscsecurityid) {
  if (htscsecurityid != NULL) {
    
  } else {
    
  }
  htscsecurityid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), htscsecurityid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDQuote.HTSCSecurityID)
}

// optional int32 MDDate = 2;
void MDQuote::clear_mddate() {
  mddate_ = 0;
}
::google::protobuf::int32 MDQuote::mddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.MDDate)
  return mddate_;
}
void MDQuote::set_mddate(::google::protobuf::int32 value) {
  
  mddate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.MDDate)
}

// optional int32 MDTime = 3;
void MDQuote::clear_mdtime() {
  mdtime_ = 0;
}
::google::protobuf::int32 MDQuote::mdtime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.MDTime)
  return mdtime_;
}
void MDQuote::set_mdtime(::google::protobuf::int32 value) {
  
  mdtime_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.MDTime)
}

// optional int64 DataTimestamp = 4;
void MDQuote::clear_datatimestamp() {
  datatimestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MDQuote::datatimestamp() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.DataTimestamp)
  return datatimestamp_;
}
void MDQuote::set_datatimestamp(::google::protobuf::int64 value) {
  
  datatimestamp_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.DataTimestamp)
}

// optional string TradingPhaseCode = 5;
void MDQuote::clear_tradingphasecode() {
  tradingphasecode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MDQuote::tradingphasecode() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.TradingPhaseCode)
  return tradingphasecode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MDQuote::set_tradingphasecode(const ::std::string& value) {
  
  tradingphasecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.TradingPhaseCode)
}
void MDQuote::set_tradingphasecode(const char* value) {
  
  tradingphasecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDQuote.TradingPhaseCode)
}
void MDQuote::set_tradingphasecode(const char* value, size_t size) {
  
  tradingphasecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDQuote.TradingPhaseCode)
}
::std::string* MDQuote::mutable_tradingphasecode() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDQuote.TradingPhaseCode)
  return tradingphasecode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MDQuote::release_tradingphasecode() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDQuote.TradingPhaseCode)
  
  return tradingphasecode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MDQuote::set_allocated_tradingphasecode(::std::string* tradingphasecode) {
  if (tradingphasecode != NULL) {
    
  } else {
    
  }
  tradingphasecode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradingphasecode);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDQuote.TradingPhaseCode)
}

// optional .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
void MDQuote::clear_securityidsource() {
  securityidsource_ = 0;
}
::com::htsc::mdc::model::ESecurityIDSource MDQuote::securityidsource() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.securityIDSource)
  return static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(securityidsource_);
}
void MDQuote::set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  
  securityidsource_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.securityIDSource)
}

// optional .com.htsc.mdc.model.ESecurityType securityType = 7;
void MDQuote::clear_securitytype() {
  securitytype_ = 0;
}
::com::htsc::mdc::model::ESecurityType MDQuote::securitytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.securityType)
  return static_cast< ::com::htsc::mdc::model::ESecurityType >(securitytype_);
}
void MDQuote::set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  
  securitytype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.securityType)
}

// optional int32 ExchangeDate = 8;
void MDQuote::clear_exchangedate() {
  exchangedate_ = 0;
}
::google::protobuf::int32 MDQuote::exchangedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.ExchangeDate)
  return exchangedate_;
}
void MDQuote::set_exchangedate(::google::protobuf::int32 value) {
  
  exchangedate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.ExchangeDate)
}

// optional int32 ExchangeTime = 9;
void MDQuote::clear_exchangetime() {
  exchangetime_ = 0;
}
::google::protobuf::int32 MDQuote::exchangetime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.ExchangeTime)
  return exchangetime_;
}
void MDQuote::set_exchangetime(::google::protobuf::int32 value) {
  
  exchangetime_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.ExchangeTime)
}

// optional int64 MaxPx = 10;
void MDQuote::clear_maxpx() {
  maxpx_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MDQuote::maxpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.MaxPx)
  return maxpx_;
}
void MDQuote::set_maxpx(::google::protobuf::int64 value) {
  
  maxpx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.MaxPx)
}

// optional int64 MinPx = 11;
void MDQuote::clear_minpx() {
  minpx_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MDQuote::minpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.MinPx)
  return minpx_;
}
void MDQuote::set_minpx(::google::protobuf::int64 value) {
  
  minpx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.MinPx)
}

// optional int32 ChannelNo = 12;
void MDQuote::clear_channelno() {
  channelno_ = 0;
}
::google::protobuf::int32 MDQuote::channelno() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.ChannelNo)
  return channelno_;
}
void MDQuote::set_channelno(::google::protobuf::int32 value) {
  
  channelno_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.ChannelNo)
}

// optional int64 ApplSeqNum = 13;
void MDQuote::clear_applseqnum() {
  applseqnum_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MDQuote::applseqnum() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.ApplSeqNum)
  return applseqnum_;
}
void MDQuote::set_applseqnum(::google::protobuf::int64 value) {
  
  applseqnum_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.ApplSeqNum)
}

// optional int32 MDBookType = 14;
void MDQuote::clear_mdbooktype() {
  mdbooktype_ = 0;
}
::google::protobuf::int32 MDQuote::mdbooktype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.MDBookType)
  return mdbooktype_;
}
void MDQuote::set_mdbooktype(::google::protobuf::int32 value) {
  
  mdbooktype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.MDBookType)
}

// optional string MarketIndicator = 15;
void MDQuote::clear_marketindicator() {
  marketindicator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MDQuote::marketindicator() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.MarketIndicator)
  return marketindicator_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MDQuote::set_marketindicator(const ::std::string& value) {
  
  marketindicator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.MarketIndicator)
}
void MDQuote::set_marketindicator(const char* value) {
  
  marketindicator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDQuote.MarketIndicator)
}
void MDQuote::set_marketindicator(const char* value, size_t size) {
  
  marketindicator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDQuote.MarketIndicator)
}
::std::string* MDQuote::mutable_marketindicator() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDQuote.MarketIndicator)
  return marketindicator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MDQuote::release_marketindicator() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDQuote.MarketIndicator)
  
  return marketindicator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MDQuote::set_allocated_marketindicator(::std::string* marketindicator) {
  if (marketindicator != NULL) {
    
  } else {
    
  }
  marketindicator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), marketindicator);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDQuote.MarketIndicator)
}

// optional int32 MarketDepth = 16;
void MDQuote::clear_marketdepth() {
  marketdepth_ = 0;
}
::google::protobuf::int32 MDQuote::marketdepth() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.MarketDepth)
  return marketdepth_;
}
void MDQuote::set_marketdepth(::google::protobuf::int32 value) {
  
  marketdepth_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.MarketDepth)
}

// optional int32 MDSubBookType = 17;
void MDQuote::clear_mdsubbooktype() {
  mdsubbooktype_ = 0;
}
::google::protobuf::int32 MDQuote::mdsubbooktype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.MDSubBookType)
  return mdsubbooktype_;
}
void MDQuote::set_mdsubbooktype(::google::protobuf::int32 value) {
  
  mdsubbooktype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.MDSubBookType)
}

// repeated .com.htsc.mdc.insight.model.MDCashBondQuote MDCashBondQuotes = 18;
int MDQuote::mdcashbondquotes_size() const {
  return mdcashbondquotes_.size();
}
void MDQuote::clear_mdcashbondquotes() {
  mdcashbondquotes_.Clear();
}
const ::com::htsc::mdc::insight::model::MDCashBondQuote& MDQuote::mdcashbondquotes(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.MDCashBondQuotes)
  return mdcashbondquotes_.Get(index);
}
::com::htsc::mdc::insight::model::MDCashBondQuote* MDQuote::mutable_mdcashbondquotes(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDQuote.MDCashBondQuotes)
  return mdcashbondquotes_.Mutable(index);
}
::com::htsc::mdc::insight::model::MDCashBondQuote* MDQuote::add_mdcashbondquotes() {
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.MDQuote.MDCashBondQuotes)
  return mdcashbondquotes_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDCashBondQuote >*
MDQuote::mutable_mdcashbondquotes() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.MDQuote.MDCashBondQuotes)
  return &mdcashbondquotes_;
}
const ::google::protobuf::RepeatedPtrField< ::com::htsc::mdc::insight::model::MDCashBondQuote >&
MDQuote::mdcashbondquotes() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.MDQuote.MDCashBondQuotes)
  return mdcashbondquotes_;
}

// optional int32 DataMultiplePowerOf10 = 19;
void MDQuote::clear_datamultiplepowerof10() {
  datamultiplepowerof10_ = 0;
}
::google::protobuf::int32 MDQuote::datamultiplepowerof10() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDQuote.DataMultiplePowerOf10)
  return datamultiplepowerof10_;
}
void MDQuote::set_datamultiplepowerof10(::google::protobuf::int32 value) {
  
  datamultiplepowerof10_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDQuote.DataMultiplePowerOf10)
}

inline const MDQuote* MDQuote::internal_default_instance() {
  return &MDQuote_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MDCashBondQuote::kQuoteTypeFieldNumber;
const int MDCashBondQuote::kSideFieldNumber;
const int MDCashBondQuote::kPriceLevelFieldNumber;
const int MDCashBondQuote::kQuoteIDFieldNumber;
const int MDCashBondQuote::kQuoteDateFieldNumber;
const int MDCashBondQuote::kQuoteTimeFieldNumber;
const int MDCashBondQuote::kCleanPriceFieldNumber;
const int MDCashBondQuote::kDirtyPriceFieldNumber;
const int MDCashBondQuote::kTotalFaceValueFieldNumber;
const int MDCashBondQuote::kClearingMethodFieldNumber;
const int MDCashBondQuote::kSettlTypeFieldNumber;
const int MDCashBondQuote::kSettlDateFieldNumber;
const int MDCashBondQuote::kSettlCurrencyFieldNumber;
const int MDCashBondQuote::kSettlCurrFxRateFieldNumber;
const int MDCashBondQuote::kPartyRoleFieldNumber;
const int MDCashBondQuote::kTraderCodeFieldNumber;
const int MDCashBondQuote::kMaturityYieldFieldNumber;
const int MDCashBondQuote::kDeliveryTypeFieldNumber;
const int MDCashBondQuote::kTraderAccountIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MDCashBondQuote::MDCashBondQuote()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_MDQuote_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.MDCashBondQuote)
}

void MDCashBondQuote::InitAsDefaultInstance() {
}

MDCashBondQuote::MDCashBondQuote(const MDCashBondQuote& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.MDCashBondQuote)
}

void MDCashBondQuote::SharedCtor() {
  quoteid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  settltype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  settlcurrency_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradercode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  traderaccountid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&quotetype_, 0, reinterpret_cast<char*>(&deliverytype_) -
    reinterpret_cast<char*>(&quotetype_) + sizeof(deliverytype_));
  _cached_size_ = 0;
}

MDCashBondQuote::~MDCashBondQuote() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.MDCashBondQuote)
  SharedDtor();
}

void MDCashBondQuote::SharedDtor() {
  quoteid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  settltype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  settlcurrency_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradercode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  traderaccountid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MDCashBondQuote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MDCashBondQuote::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MDCashBondQuote_descriptor_;
}

const MDCashBondQuote& MDCashBondQuote::default_instance() {
  protobuf_InitDefaults_MDQuote_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MDCashBondQuote> MDCashBondQuote_default_instance_;

MDCashBondQuote* MDCashBondQuote::New(::google::protobuf::Arena* arena) const {
  MDCashBondQuote* n = new MDCashBondQuote;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MDCashBondQuote::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.MDCashBondQuote)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MDCashBondQuote, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MDCashBondQuote*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(quotetype_, quotetime_);
  quoteid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(clearingmethod_, settlcurrfxrate_);
  settltype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  settlcurrency_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradercode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(maturityyield_, deliverytype_);
  traderaccountid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool MDCashBondQuote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.MDCashBondQuote)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 QuoteType = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quotetype_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Side;
        break;
      }

      // optional int32 Side = 2;
      case 2: {
        if (tag == 16) {
         parse_Side:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &side_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_PriceLevel;
        break;
      }

      // optional int32 PriceLevel = 3;
      case 3: {
        if (tag == 24) {
         parse_PriceLevel:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pricelevel_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_QuoteID;
        break;
      }

      // optional string QuoteID = 4;
      case 4: {
        if (tag == 34) {
         parse_QuoteID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_quoteid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->quoteid().data(), this->quoteid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDCashBondQuote.QuoteID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_QuoteDate;
        break;
      }

      // optional int32 QuoteDate = 5;
      case 5: {
        if (tag == 40) {
         parse_QuoteDate:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quotedate_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_QuoteTime;
        break;
      }

      // optional int32 QuoteTime = 6;
      case 6: {
        if (tag == 48) {
         parse_QuoteTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quotetime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_CleanPrice;
        break;
      }

      // optional int64 CleanPrice = 7;
      case 7: {
        if (tag == 56) {
         parse_CleanPrice:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cleanprice_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_DirtyPrice;
        break;
      }

      // optional int64 DirtyPrice = 8;
      case 8: {
        if (tag == 64) {
         parse_DirtyPrice:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dirtyprice_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_TotalFaceValue;
        break;
      }

      // optional int64 TotalFaceValue = 9;
      case 9: {
        if (tag == 72) {
         parse_TotalFaceValue:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalfacevalue_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_ClearingMethod;
        break;
      }

      // optional int32 ClearingMethod = 10;
      case 10: {
        if (tag == 80) {
         parse_ClearingMethod:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clearingmethod_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_SettlType;
        break;
      }

      // optional string SettlType = 11;
      case 11: {
        if (tag == 90) {
         parse_SettlType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_settltype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->settltype().data(), this->settltype().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDCashBondQuote.SettlType"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_SettlDate;
        break;
      }

      // optional int32 SettlDate = 12;
      case 12: {
        if (tag == 96) {
         parse_SettlDate:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &settldate_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_SettlCurrency;
        break;
      }

      // optional string SettlCurrency = 13;
      case 13: {
        if (tag == 106) {
         parse_SettlCurrency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_settlcurrency()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->settlcurrency().data(), this->settlcurrency().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDCashBondQuote.SettlCurrency"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_SettlCurrFxRate;
        break;
      }

      // optional int64 SettlCurrFxRate = 14;
      case 14: {
        if (tag == 112) {
         parse_SettlCurrFxRate:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &settlcurrfxrate_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_PartyRole;
        break;
      }

      // optional int32 PartyRole = 15;
      case 15: {
        if (tag == 120) {
         parse_PartyRole:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partyrole_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_TraderCode;
        break;
      }

      // optional string TraderCode = 16;
      case 16: {
        if (tag == 130) {
         parse_TraderCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradercode()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tradercode().data(), this->tradercode().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDCashBondQuote.TraderCode"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_MaturityYield;
        break;
      }

      // optional int64 MaturityYield = 17;
      case 17: {
        if (tag == 136) {
         parse_MaturityYield:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &maturityyield_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_DeliveryType;
        break;
      }

      // optional int32 DeliveryType = 18;
      case 18: {
        if (tag == 144) {
         parse_DeliveryType:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deliverytype_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_TraderAccountID;
        break;
      }

      // optional string TraderAccountID = 19;
      case 19: {
        if (tag == 154) {
         parse_TraderAccountID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_traderaccountid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->traderaccountid().data(), this->traderaccountid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.MDCashBondQuote.TraderAccountID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.MDCashBondQuote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.MDCashBondQuote)
  return false;
#undef DO_
}

void MDCashBondQuote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.MDCashBondQuote)
  // optional int32 QuoteType = 1;
  if (this->quotetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->quotetype(), output);
  }

  // optional int32 Side = 2;
  if (this->side() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->side(), output);
  }

  // optional int32 PriceLevel = 3;
  if (this->pricelevel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pricelevel(), output);
  }

  // optional string QuoteID = 4;
  if (this->quoteid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->quoteid().data(), this->quoteid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDCashBondQuote.QuoteID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->quoteid(), output);
  }

  // optional int32 QuoteDate = 5;
  if (this->quotedate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->quotedate(), output);
  }

  // optional int32 QuoteTime = 6;
  if (this->quotetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->quotetime(), output);
  }

  // optional int64 CleanPrice = 7;
  if (this->cleanprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->cleanprice(), output);
  }

  // optional int64 DirtyPrice = 8;
  if (this->dirtyprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->dirtyprice(), output);
  }

  // optional int64 TotalFaceValue = 9;
  if (this->totalfacevalue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->totalfacevalue(), output);
  }

  // optional int32 ClearingMethod = 10;
  if (this->clearingmethod() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->clearingmethod(), output);
  }

  // optional string SettlType = 11;
  if (this->settltype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->settltype().data(), this->settltype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDCashBondQuote.SettlType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->settltype(), output);
  }

  // optional int32 SettlDate = 12;
  if (this->settldate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->settldate(), output);
  }

  // optional string SettlCurrency = 13;
  if (this->settlcurrency().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->settlcurrency().data(), this->settlcurrency().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDCashBondQuote.SettlCurrency");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->settlcurrency(), output);
  }

  // optional int64 SettlCurrFxRate = 14;
  if (this->settlcurrfxrate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->settlcurrfxrate(), output);
  }

  // optional int32 PartyRole = 15;
  if (this->partyrole() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->partyrole(), output);
  }

  // optional string TraderCode = 16;
  if (this->tradercode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradercode().data(), this->tradercode().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDCashBondQuote.TraderCode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->tradercode(), output);
  }

  // optional int64 MaturityYield = 17;
  if (this->maturityyield() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->maturityyield(), output);
  }

  // optional int32 DeliveryType = 18;
  if (this->deliverytype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->deliverytype(), output);
  }

  // optional string TraderAccountID = 19;
  if (this->traderaccountid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->traderaccountid().data(), this->traderaccountid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDCashBondQuote.TraderAccountID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->traderaccountid(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.MDCashBondQuote)
}

::google::protobuf::uint8* MDCashBondQuote::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.MDCashBondQuote)
  // optional int32 QuoteType = 1;
  if (this->quotetype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->quotetype(), target);
  }

  // optional int32 Side = 2;
  if (this->side() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->side(), target);
  }

  // optional int32 PriceLevel = 3;
  if (this->pricelevel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pricelevel(), target);
  }

  // optional string QuoteID = 4;
  if (this->quoteid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->quoteid().data(), this->quoteid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDCashBondQuote.QuoteID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->quoteid(), target);
  }

  // optional int32 QuoteDate = 5;
  if (this->quotedate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->quotedate(), target);
  }

  // optional int32 QuoteTime = 6;
  if (this->quotetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->quotetime(), target);
  }

  // optional int64 CleanPrice = 7;
  if (this->cleanprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->cleanprice(), target);
  }

  // optional int64 DirtyPrice = 8;
  if (this->dirtyprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->dirtyprice(), target);
  }

  // optional int64 TotalFaceValue = 9;
  if (this->totalfacevalue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->totalfacevalue(), target);
  }

  // optional int32 ClearingMethod = 10;
  if (this->clearingmethod() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->clearingmethod(), target);
  }

  // optional string SettlType = 11;
  if (this->settltype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->settltype().data(), this->settltype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDCashBondQuote.SettlType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->settltype(), target);
  }

  // optional int32 SettlDate = 12;
  if (this->settldate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->settldate(), target);
  }

  // optional string SettlCurrency = 13;
  if (this->settlcurrency().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->settlcurrency().data(), this->settlcurrency().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDCashBondQuote.SettlCurrency");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->settlcurrency(), target);
  }

  // optional int64 SettlCurrFxRate = 14;
  if (this->settlcurrfxrate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->settlcurrfxrate(), target);
  }

  // optional int32 PartyRole = 15;
  if (this->partyrole() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->partyrole(), target);
  }

  // optional string TraderCode = 16;
  if (this->tradercode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradercode().data(), this->tradercode().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDCashBondQuote.TraderCode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->tradercode(), target);
  }

  // optional int64 MaturityYield = 17;
  if (this->maturityyield() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->maturityyield(), target);
  }

  // optional int32 DeliveryType = 18;
  if (this->deliverytype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->deliverytype(), target);
  }

  // optional string TraderAccountID = 19;
  if (this->traderaccountid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->traderaccountid().data(), this->traderaccountid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.MDCashBondQuote.TraderAccountID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->traderaccountid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.MDCashBondQuote)
  return target;
}

size_t MDCashBondQuote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.MDCashBondQuote)
  size_t total_size = 0;

  // optional int32 QuoteType = 1;
  if (this->quotetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->quotetype());
  }

  // optional int32 Side = 2;
  if (this->side() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->side());
  }

  // optional int32 PriceLevel = 3;
  if (this->pricelevel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pricelevel());
  }

  // optional string QuoteID = 4;
  if (this->quoteid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->quoteid());
  }

  // optional int32 QuoteDate = 5;
  if (this->quotedate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->quotedate());
  }

  // optional int32 QuoteTime = 6;
  if (this->quotetime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->quotetime());
  }

  // optional int64 CleanPrice = 7;
  if (this->cleanprice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->cleanprice());
  }

  // optional int64 DirtyPrice = 8;
  if (this->dirtyprice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->dirtyprice());
  }

  // optional int64 TotalFaceValue = 9;
  if (this->totalfacevalue() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->totalfacevalue());
  }

  // optional int32 ClearingMethod = 10;
  if (this->clearingmethod() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->clearingmethod());
  }

  // optional string SettlType = 11;
  if (this->settltype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->settltype());
  }

  // optional int32 SettlDate = 12;
  if (this->settldate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->settldate());
  }

  // optional string SettlCurrency = 13;
  if (this->settlcurrency().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->settlcurrency());
  }

  // optional int64 SettlCurrFxRate = 14;
  if (this->settlcurrfxrate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->settlcurrfxrate());
  }

  // optional int32 PartyRole = 15;
  if (this->partyrole() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->partyrole());
  }

  // optional string TraderCode = 16;
  if (this->tradercode().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tradercode());
  }

  // optional int64 MaturityYield = 17;
  if (this->maturityyield() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->maturityyield());
  }

  // optional int32 DeliveryType = 18;
  if (this->deliverytype() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->deliverytype());
  }

  // optional string TraderAccountID = 19;
  if (this->traderaccountid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->traderaccountid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MDCashBondQuote::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.MDCashBondQuote)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MDCashBondQuote* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MDCashBondQuote>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.MDCashBondQuote)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.MDCashBondQuote)
    UnsafeMergeFrom(*source);
  }
}

void MDCashBondQuote::MergeFrom(const MDCashBondQuote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.MDCashBondQuote)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MDCashBondQuote::UnsafeMergeFrom(const MDCashBondQuote& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.quotetype() != 0) {
    set_quotetype(from.quotetype());
  }
  if (from.side() != 0) {
    set_side(from.side());
  }
  if (from.pricelevel() != 0) {
    set_pricelevel(from.pricelevel());
  }
  if (from.quoteid().size() > 0) {

    quoteid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.quoteid_);
  }
  if (from.quotedate() != 0) {
    set_quotedate(from.quotedate());
  }
  if (from.quotetime() != 0) {
    set_quotetime(from.quotetime());
  }
  if (from.cleanprice() != 0) {
    set_cleanprice(from.cleanprice());
  }
  if (from.dirtyprice() != 0) {
    set_dirtyprice(from.dirtyprice());
  }
  if (from.totalfacevalue() != 0) {
    set_totalfacevalue(from.totalfacevalue());
  }
  if (from.clearingmethod() != 0) {
    set_clearingmethod(from.clearingmethod());
  }
  if (from.settltype().size() > 0) {

    settltype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.settltype_);
  }
  if (from.settldate() != 0) {
    set_settldate(from.settldate());
  }
  if (from.settlcurrency().size() > 0) {

    settlcurrency_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.settlcurrency_);
  }
  if (from.settlcurrfxrate() != 0) {
    set_settlcurrfxrate(from.settlcurrfxrate());
  }
  if (from.partyrole() != 0) {
    set_partyrole(from.partyrole());
  }
  if (from.tradercode().size() > 0) {

    tradercode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradercode_);
  }
  if (from.maturityyield() != 0) {
    set_maturityyield(from.maturityyield());
  }
  if (from.deliverytype() != 0) {
    set_deliverytype(from.deliverytype());
  }
  if (from.traderaccountid().size() > 0) {

    traderaccountid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.traderaccountid_);
  }
}

void MDCashBondQuote::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.MDCashBondQuote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MDCashBondQuote::CopyFrom(const MDCashBondQuote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.MDCashBondQuote)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MDCashBondQuote::IsInitialized() const {

  return true;
}

void MDCashBondQuote::Swap(MDCashBondQuote* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MDCashBondQuote::InternalSwap(MDCashBondQuote* other) {
  std::swap(quotetype_, other->quotetype_);
  std::swap(side_, other->side_);
  std::swap(pricelevel_, other->pricelevel_);
  quoteid_.Swap(&other->quoteid_);
  std::swap(quotedate_, other->quotedate_);
  std::swap(quotetime_, other->quotetime_);
  std::swap(cleanprice_, other->cleanprice_);
  std::swap(dirtyprice_, other->dirtyprice_);
  std::swap(totalfacevalue_, other->totalfacevalue_);
  std::swap(clearingmethod_, other->clearingmethod_);
  settltype_.Swap(&other->settltype_);
  std::swap(settldate_, other->settldate_);
  settlcurrency_.Swap(&other->settlcurrency_);
  std::swap(settlcurrfxrate_, other->settlcurrfxrate_);
  std::swap(partyrole_, other->partyrole_);
  tradercode_.Swap(&other->tradercode_);
  std::swap(maturityyield_, other->maturityyield_);
  std::swap(deliverytype_, other->deliverytype_);
  traderaccountid_.Swap(&other->traderaccountid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MDCashBondQuote::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MDCashBondQuote_descriptor_;
  metadata.reflection = MDCashBondQuote_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MDCashBondQuote

// optional int32 QuoteType = 1;
void MDCashBondQuote::clear_quotetype() {
  quotetype_ = 0;
}
::google::protobuf::int32 MDCashBondQuote::quotetype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.QuoteType)
  return quotetype_;
}
void MDCashBondQuote::set_quotetype(::google::protobuf::int32 value) {
  
  quotetype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.QuoteType)
}

// optional int32 Side = 2;
void MDCashBondQuote::clear_side() {
  side_ = 0;
}
::google::protobuf::int32 MDCashBondQuote::side() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.Side)
  return side_;
}
void MDCashBondQuote::set_side(::google::protobuf::int32 value) {
  
  side_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.Side)
}

// optional int32 PriceLevel = 3;
void MDCashBondQuote::clear_pricelevel() {
  pricelevel_ = 0;
}
::google::protobuf::int32 MDCashBondQuote::pricelevel() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.PriceLevel)
  return pricelevel_;
}
void MDCashBondQuote::set_pricelevel(::google::protobuf::int32 value) {
  
  pricelevel_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.PriceLevel)
}

// optional string QuoteID = 4;
void MDCashBondQuote::clear_quoteid() {
  quoteid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MDCashBondQuote::quoteid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.QuoteID)
  return quoteid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MDCashBondQuote::set_quoteid(const ::std::string& value) {
  
  quoteid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.QuoteID)
}
void MDCashBondQuote::set_quoteid(const char* value) {
  
  quoteid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDCashBondQuote.QuoteID)
}
void MDCashBondQuote::set_quoteid(const char* value, size_t size) {
  
  quoteid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDCashBondQuote.QuoteID)
}
::std::string* MDCashBondQuote::mutable_quoteid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCashBondQuote.QuoteID)
  return quoteid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MDCashBondQuote::release_quoteid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCashBondQuote.QuoteID)
  
  return quoteid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MDCashBondQuote::set_allocated_quoteid(::std::string* quoteid) {
  if (quoteid != NULL) {
    
  } else {
    
  }
  quoteid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), quoteid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCashBondQuote.QuoteID)
}

// optional int32 QuoteDate = 5;
void MDCashBondQuote::clear_quotedate() {
  quotedate_ = 0;
}
::google::protobuf::int32 MDCashBondQuote::quotedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.QuoteDate)
  return quotedate_;
}
void MDCashBondQuote::set_quotedate(::google::protobuf::int32 value) {
  
  quotedate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.QuoteDate)
}

// optional int32 QuoteTime = 6;
void MDCashBondQuote::clear_quotetime() {
  quotetime_ = 0;
}
::google::protobuf::int32 MDCashBondQuote::quotetime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.QuoteTime)
  return quotetime_;
}
void MDCashBondQuote::set_quotetime(::google::protobuf::int32 value) {
  
  quotetime_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.QuoteTime)
}

// optional int64 CleanPrice = 7;
void MDCashBondQuote::clear_cleanprice() {
  cleanprice_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MDCashBondQuote::cleanprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.CleanPrice)
  return cleanprice_;
}
void MDCashBondQuote::set_cleanprice(::google::protobuf::int64 value) {
  
  cleanprice_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.CleanPrice)
}

// optional int64 DirtyPrice = 8;
void MDCashBondQuote::clear_dirtyprice() {
  dirtyprice_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MDCashBondQuote::dirtyprice() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.DirtyPrice)
  return dirtyprice_;
}
void MDCashBondQuote::set_dirtyprice(::google::protobuf::int64 value) {
  
  dirtyprice_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.DirtyPrice)
}

// optional int64 TotalFaceValue = 9;
void MDCashBondQuote::clear_totalfacevalue() {
  totalfacevalue_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MDCashBondQuote::totalfacevalue() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.TotalFaceValue)
  return totalfacevalue_;
}
void MDCashBondQuote::set_totalfacevalue(::google::protobuf::int64 value) {
  
  totalfacevalue_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.TotalFaceValue)
}

// optional int32 ClearingMethod = 10;
void MDCashBondQuote::clear_clearingmethod() {
  clearingmethod_ = 0;
}
::google::protobuf::int32 MDCashBondQuote::clearingmethod() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.ClearingMethod)
  return clearingmethod_;
}
void MDCashBondQuote::set_clearingmethod(::google::protobuf::int32 value) {
  
  clearingmethod_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.ClearingMethod)
}

// optional string SettlType = 11;
void MDCashBondQuote::clear_settltype() {
  settltype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MDCashBondQuote::settltype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.SettlType)
  return settltype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MDCashBondQuote::set_settltype(const ::std::string& value) {
  
  settltype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.SettlType)
}
void MDCashBondQuote::set_settltype(const char* value) {
  
  settltype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDCashBondQuote.SettlType)
}
void MDCashBondQuote::set_settltype(const char* value, size_t size) {
  
  settltype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDCashBondQuote.SettlType)
}
::std::string* MDCashBondQuote::mutable_settltype() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCashBondQuote.SettlType)
  return settltype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MDCashBondQuote::release_settltype() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCashBondQuote.SettlType)
  
  return settltype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MDCashBondQuote::set_allocated_settltype(::std::string* settltype) {
  if (settltype != NULL) {
    
  } else {
    
  }
  settltype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), settltype);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCashBondQuote.SettlType)
}

// optional int32 SettlDate = 12;
void MDCashBondQuote::clear_settldate() {
  settldate_ = 0;
}
::google::protobuf::int32 MDCashBondQuote::settldate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.SettlDate)
  return settldate_;
}
void MDCashBondQuote::set_settldate(::google::protobuf::int32 value) {
  
  settldate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.SettlDate)
}

// optional string SettlCurrency = 13;
void MDCashBondQuote::clear_settlcurrency() {
  settlcurrency_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MDCashBondQuote::settlcurrency() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.SettlCurrency)
  return settlcurrency_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MDCashBondQuote::set_settlcurrency(const ::std::string& value) {
  
  settlcurrency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.SettlCurrency)
}
void MDCashBondQuote::set_settlcurrency(const char* value) {
  
  settlcurrency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDCashBondQuote.SettlCurrency)
}
void MDCashBondQuote::set_settlcurrency(const char* value, size_t size) {
  
  settlcurrency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDCashBondQuote.SettlCurrency)
}
::std::string* MDCashBondQuote::mutable_settlcurrency() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCashBondQuote.SettlCurrency)
  return settlcurrency_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MDCashBondQuote::release_settlcurrency() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCashBondQuote.SettlCurrency)
  
  return settlcurrency_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MDCashBondQuote::set_allocated_settlcurrency(::std::string* settlcurrency) {
  if (settlcurrency != NULL) {
    
  } else {
    
  }
  settlcurrency_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), settlcurrency);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCashBondQuote.SettlCurrency)
}

// optional int64 SettlCurrFxRate = 14;
void MDCashBondQuote::clear_settlcurrfxrate() {
  settlcurrfxrate_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MDCashBondQuote::settlcurrfxrate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.SettlCurrFxRate)
  return settlcurrfxrate_;
}
void MDCashBondQuote::set_settlcurrfxrate(::google::protobuf::int64 value) {
  
  settlcurrfxrate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.SettlCurrFxRate)
}

// optional int32 PartyRole = 15;
void MDCashBondQuote::clear_partyrole() {
  partyrole_ = 0;
}
::google::protobuf::int32 MDCashBondQuote::partyrole() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.PartyRole)
  return partyrole_;
}
void MDCashBondQuote::set_partyrole(::google::protobuf::int32 value) {
  
  partyrole_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.PartyRole)
}

// optional string TraderCode = 16;
void MDCashBondQuote::clear_tradercode() {
  tradercode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MDCashBondQuote::tradercode() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.TraderCode)
  return tradercode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MDCashBondQuote::set_tradercode(const ::std::string& value) {
  
  tradercode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.TraderCode)
}
void MDCashBondQuote::set_tradercode(const char* value) {
  
  tradercode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDCashBondQuote.TraderCode)
}
void MDCashBondQuote::set_tradercode(const char* value, size_t size) {
  
  tradercode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDCashBondQuote.TraderCode)
}
::std::string* MDCashBondQuote::mutable_tradercode() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCashBondQuote.TraderCode)
  return tradercode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MDCashBondQuote::release_tradercode() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCashBondQuote.TraderCode)
  
  return tradercode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MDCashBondQuote::set_allocated_tradercode(::std::string* tradercode) {
  if (tradercode != NULL) {
    
  } else {
    
  }
  tradercode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradercode);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCashBondQuote.TraderCode)
}

// optional int64 MaturityYield = 17;
void MDCashBondQuote::clear_maturityyield() {
  maturityyield_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MDCashBondQuote::maturityyield() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.MaturityYield)
  return maturityyield_;
}
void MDCashBondQuote::set_maturityyield(::google::protobuf::int64 value) {
  
  maturityyield_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.MaturityYield)
}

// optional int32 DeliveryType = 18;
void MDCashBondQuote::clear_deliverytype() {
  deliverytype_ = 0;
}
::google::protobuf::int32 MDCashBondQuote::deliverytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.DeliveryType)
  return deliverytype_;
}
void MDCashBondQuote::set_deliverytype(::google::protobuf::int32 value) {
  
  deliverytype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.DeliveryType)
}

// optional string TraderAccountID = 19;
void MDCashBondQuote::clear_traderaccountid() {
  traderaccountid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MDCashBondQuote::traderaccountid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.MDCashBondQuote.TraderAccountID)
  return traderaccountid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MDCashBondQuote::set_traderaccountid(const ::std::string& value) {
  
  traderaccountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.MDCashBondQuote.TraderAccountID)
}
void MDCashBondQuote::set_traderaccountid(const char* value) {
  
  traderaccountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.MDCashBondQuote.TraderAccountID)
}
void MDCashBondQuote::set_traderaccountid(const char* value, size_t size) {
  
  traderaccountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.MDCashBondQuote.TraderAccountID)
}
::std::string* MDCashBondQuote::mutable_traderaccountid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.MDCashBondQuote.TraderAccountID)
  return traderaccountid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MDCashBondQuote::release_traderaccountid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.MDCashBondQuote.TraderAccountID)
  
  return traderaccountid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MDCashBondQuote::set_allocated_traderaccountid(::std::string* traderaccountid) {
  if (traderaccountid != NULL) {
    
  } else {
    
  }
  traderaccountid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), traderaccountid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.MDCashBondQuote.TraderAccountID)
}

inline const MDCashBondQuote* MDCashBondQuote::internal_default_instance() {
  return &MDCashBondQuote_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)
