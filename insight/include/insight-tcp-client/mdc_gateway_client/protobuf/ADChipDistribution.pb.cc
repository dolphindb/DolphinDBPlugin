// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ADChipDistribution.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ADChipDistribution.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

namespace {

const ::google::protobuf::Descriptor* ADChipDistribution_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ADChipDistribution_reflection_ = NULL;
const ::google::protobuf::Descriptor* ADChipDistributionDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ADChipDistributionDetail_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ADChipDistribution_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ADChipDistribution_2eproto() {
  protobuf_AddDesc_ADChipDistribution_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ADChipDistribution.proto");
  GOOGLE_CHECK(file != NULL);
  ADChipDistribution_descriptor_ = file->message_type(0);
  static const int ADChipDistribution_offsets_[42] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADChipDistribution, htscsecurityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADChipDistribution, mddate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADChipDistribution, mdtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADChipDistribution, datatimestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADChipDistribution, securityidsource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADChipDistribution, securitytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADChipDistribution, exchangedate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADChipDistribution, exchangetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADChipDistribution, lastpx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADChipDistribution, preclosepx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADChipDistribution, sharetotalnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADChipDistribution, isfinalsettlement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADChipDistribution, totalshare_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADChipDistribution, atotalshare_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADChipDistribution, alistedtotalshare_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADChipDistribution, tradabledetails_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADChipDistribution, tradablemcst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADChipDistribution, tradablemaxcostofpositions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADChipDistribution, tradablemincostofpositions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADChipDistribution, tradableprofitpercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADChipDistribution, tradablechipdispersionpercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADChipDistribution, tradablepreprofitpercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADChipDistribution, tradableprofitchangepercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADChipDistribution, tradablecentralizedpercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADChipDistribution, tradablecentralizedmaxcostofpositions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADChipDistribution, tradablecentralizedmincostofpositions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADChipDistribution, tradablesharetotalnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADChipDistribution, tradablesharepercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADChipDistribution, restricteddetails_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADChipDistribution, restrictedmcst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADChipDistribution, restrictedmaxcostofpositions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADChipDistribution, restrictedmincostofpositions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADChipDistribution, restrictedsharetotalnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADChipDistribution, restrictedsharepercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADChipDistribution, restrictedholddetails_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADChipDistribution, largeshareholdersdetails_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADChipDistribution, largeshareholdersmcst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADChipDistribution, largeshareholdersmaxcostofpositions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADChipDistribution, largeshareholdersmincostofpositions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADChipDistribution, largeshareholderssharetotalnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADChipDistribution, largeshareholderssharepercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADChipDistribution, datamultiplepowerof10_),
  };
  ADChipDistribution_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ADChipDistribution_descriptor_,
      ADChipDistribution::internal_default_instance(),
      ADChipDistribution_offsets_,
      -1,
      -1,
      -1,
      sizeof(ADChipDistribution),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADChipDistribution, _internal_metadata_));
  ADChipDistributionDetail_descriptor_ = file->message_type(1);
  static const int ADChipDistributionDetail_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADChipDistributionDetail, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADChipDistributionDetail, numberofshares_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADChipDistributionDetail, numberofsharespercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADChipDistributionDetail, listeddate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADChipDistributionDetail, shareholdername_),
  };
  ADChipDistributionDetail_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ADChipDistributionDetail_descriptor_,
      ADChipDistributionDetail::internal_default_instance(),
      ADChipDistributionDetail_offsets_,
      -1,
      -1,
      -1,
      sizeof(ADChipDistributionDetail),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADChipDistributionDetail, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ADChipDistribution_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ADChipDistribution_descriptor_, ADChipDistribution::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ADChipDistributionDetail_descriptor_, ADChipDistributionDetail::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ADChipDistribution_2eproto() {
  ADChipDistribution_default_instance_.Shutdown();
  delete ADChipDistribution_reflection_;
  ADChipDistributionDetail_default_instance_.Shutdown();
  delete ADChipDistributionDetail_reflection_;
}

void protobuf_InitDefaults_ADChipDistribution_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::com::htsc::mdc::model::protobuf_InitDefaults_ESecurityType_2eproto();
  ::com::htsc::mdc::model::protobuf_InitDefaults_ESecurityIDSource_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  ADChipDistribution_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ADChipDistributionDetail_default_instance_.DefaultConstruct();
  ADChipDistribution_default_instance_.get_mutable()->InitAsDefaultInstance();
  ADChipDistributionDetail_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_ADChipDistribution_2eproto_once_);
void protobuf_InitDefaults_ADChipDistribution_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_ADChipDistribution_2eproto_once_,
                 &protobuf_InitDefaults_ADChipDistribution_2eproto_impl);
}
void protobuf_AddDesc_ADChipDistribution_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_ADChipDistribution_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030ADChipDistribution.proto\022\032com.htsc.mdc"
    ".insight.model\032\023ESecurityType.proto\032\027ESe"
    "curityIDSource.proto\"\262\014\n\022ADChipDistribut"
    "ion\022\026\n\016HTSCSecurityID\030\001 \001(\t\022\016\n\006MDDate\030\002 "
    "\001(\005\022\016\n\006MDTime\030\003 \001(\005\022\025\n\rDataTimestamp\030\004 \001"
    "(\003\022\?\n\020securityIDSource\030\005 \001(\0162%.com.htsc."
    "mdc.model.ESecurityIDSource\0227\n\014securityT"
    "ype\030\006 \001(\0162!.com.htsc.mdc.model.ESecurity"
    "Type\022\024\n\014ExchangeDate\030\007 \001(\005\022\024\n\014ExchangeTi"
    "me\030\010 \001(\005\022\016\n\006LastPx\030\013 \001(\003\022\022\n\nPreClosePx\030\014"
    " \001(\003\022\030\n\020ShareTotalNumber\030\r \001(\003\022\031\n\021IsFina"
    "lSettlement\030\016 \001(\010\022\022\n\nTotalShare\030\017 \001(\003\022\023\n"
    "\013ATotalShare\030\020 \001(\003\022\031\n\021AListedTotalShare\030"
    "\021 \001(\003\022M\n\017TradableDetails\030\024 \003(\01324.com.hts"
    "c.mdc.insight.model.ADChipDistributionDe"
    "tail\022\024\n\014TradableMCST\030\025 \001(\003\022\"\n\032TradableMa"
    "xCostOfPositions\030\026 \001(\003\022\"\n\032TradableMinCos"
    "tOfPositions\030\027 \001(\003\022\035\n\025TradableProfitPerc"
    "ent\030\030 \001(\003\022%\n\035TradableChipDispersionPerce"
    "nt\030\031 \001(\003\022 \n\030TradablePreProfitPercent\030\032 \001"
    "(\003\022#\n\033TradableProfitChangePercent\030\033 \001(\003\022"
    "\"\n\032TradableCentralizedPercent\030\034 \001(\003\022-\n%T"
    "radableCentralizedMaxCostOfPositions\030\035 \001"
    "(\003\022-\n%TradableCentralizedMinCostOfPositi"
    "ons\030\036 \001(\003\022 \n\030TradableShareTotalNumber\030\037 "
    "\001(\003\022\034\n\024TradableSharePercent\030  \001(\003\022O\n\021Res"
    "trictedDetails\030( \003(\01324.com.htsc.mdc.insi"
    "ght.model.ADChipDistributionDetail\022\026\n\016Re"
    "strictedMCST\030) \001(\003\022$\n\034RestrictedMaxCostO"
    "fPositions\030* \001(\003\022$\n\034RestrictedMinCostOfP"
    "ositions\030+ \001(\003\022\"\n\032RestrictedShareTotalNu"
    "mber\030. \001(\003\022\036\n\026RestrictedSharePercent\030/ \001"
    "(\003\022S\n\025RestrictedHoldDetails\0300 \003(\01324.com."
    "htsc.mdc.insight.model.ADChipDistributio"
    "nDetail\022V\n\030LargeShareholdersDetails\0302 \003("
    "\01324.com.htsc.mdc.insight.model.ADChipDis"
    "tributionDetail\022\035\n\025LargeShareholdersMCST"
    "\0303 \001(\003\022+\n#LargeShareholdersMaxCostOfPosi"
    "tions\0304 \001(\003\022+\n#LargeShareholdersMinCostO"
    "fPositions\0305 \001(\003\022)\n!LargeShareholdersSha"
    "reTotalNumber\0306 \001(\003\022%\n\035LargeShareholders"
    "SharePercent\0307 \001(\003\022\035\n\025DataMultiplePowerO"
    "f10\0308 \001(\005\"\215\001\n\030ADChipDistributionDetail\022\r"
    "\n\005Price\030\001 \001(\003\022\026\n\016NumberOfShares\030\002 \001(\003\022\035\n"
    "\025NumberOfSharesPercent\030\003 \001(\003\022\022\n\nListedDa"
    "te\030\004 \001(\003\022\027\n\017ShareHolderName\030\005 \001(\tB;\n\032com"
    ".htsc.mdc.insight.modelB\030ADChipDistribut"
    "ionProtosH\001\240\001\001b\006proto3", 1902);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ADChipDistribution.proto", &protobuf_RegisterTypes);
  ::com::htsc::mdc::model::protobuf_AddDesc_ESecurityType_2eproto();
  ::com::htsc::mdc::model::protobuf_AddDesc_ESecurityIDSource_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ADChipDistribution_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ADChipDistribution_2eproto_once_);
void protobuf_AddDesc_ADChipDistribution_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ADChipDistribution_2eproto_once_,
                 &protobuf_AddDesc_ADChipDistribution_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ADChipDistribution_2eproto {
  StaticDescriptorInitializer_ADChipDistribution_2eproto() {
    protobuf_AddDesc_ADChipDistribution_2eproto();
  }
} static_descriptor_initializer_ADChipDistribution_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADChipDistribution::kHTSCSecurityIDFieldNumber;
const int ADChipDistribution::kMDDateFieldNumber;
const int ADChipDistribution::kMDTimeFieldNumber;
const int ADChipDistribution::kDataTimestampFieldNumber;
const int ADChipDistribution::kSecurityIDSourceFieldNumber;
const int ADChipDistribution::kSecurityTypeFieldNumber;
const int ADChipDistribution::kExchangeDateFieldNumber;
const int ADChipDistribution::kExchangeTimeFieldNumber;
const int ADChipDistribution::kLastPxFieldNumber;
const int ADChipDistribution::kPreClosePxFieldNumber;
const int ADChipDistribution::kShareTotalNumberFieldNumber;
const int ADChipDistribution::kIsFinalSettlementFieldNumber;
const int ADChipDistribution::kTotalShareFieldNumber;
const int ADChipDistribution::kATotalShareFieldNumber;
const int ADChipDistribution::kAListedTotalShareFieldNumber;
const int ADChipDistribution::kTradableDetailsFieldNumber;
const int ADChipDistribution::kTradableMCSTFieldNumber;
const int ADChipDistribution::kTradableMaxCostOfPositionsFieldNumber;
const int ADChipDistribution::kTradableMinCostOfPositionsFieldNumber;
const int ADChipDistribution::kTradableProfitPercentFieldNumber;
const int ADChipDistribution::kTradableChipDispersionPercentFieldNumber;
const int ADChipDistribution::kTradablePreProfitPercentFieldNumber;
const int ADChipDistribution::kTradableProfitChangePercentFieldNumber;
const int ADChipDistribution::kTradableCentralizedPercentFieldNumber;
const int ADChipDistribution::kTradableCentralizedMaxCostOfPositionsFieldNumber;
const int ADChipDistribution::kTradableCentralizedMinCostOfPositionsFieldNumber;
const int ADChipDistribution::kTradableShareTotalNumberFieldNumber;
const int ADChipDistribution::kTradableSharePercentFieldNumber;
const int ADChipDistribution::kRestrictedDetailsFieldNumber;
const int ADChipDistribution::kRestrictedMCSTFieldNumber;
const int ADChipDistribution::kRestrictedMaxCostOfPositionsFieldNumber;
const int ADChipDistribution::kRestrictedMinCostOfPositionsFieldNumber;
const int ADChipDistribution::kRestrictedShareTotalNumberFieldNumber;
const int ADChipDistribution::kRestrictedSharePercentFieldNumber;
const int ADChipDistribution::kRestrictedHoldDetailsFieldNumber;
const int ADChipDistribution::kLargeShareholdersDetailsFieldNumber;
const int ADChipDistribution::kLargeShareholdersMCSTFieldNumber;
const int ADChipDistribution::kLargeShareholdersMaxCostOfPositionsFieldNumber;
const int ADChipDistribution::kLargeShareholdersMinCostOfPositionsFieldNumber;
const int ADChipDistribution::kLargeShareholdersShareTotalNumberFieldNumber;
const int ADChipDistribution::kLargeShareholdersSharePercentFieldNumber;
const int ADChipDistribution::kDataMultiplePowerOf10FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADChipDistribution::ADChipDistribution()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ADChipDistribution_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.ADChipDistribution)
}

void ADChipDistribution::InitAsDefaultInstance() {
}

ADChipDistribution::ADChipDistribution(const ADChipDistribution& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADChipDistribution)
}

void ADChipDistribution::SharedCtor() {
  htscsecurityid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mddate_, 0, reinterpret_cast<char*>(&largeshareholderssharepercent_) -
    reinterpret_cast<char*>(&mddate_) + sizeof(largeshareholderssharepercent_));
  _cached_size_ = 0;
}

ADChipDistribution::~ADChipDistribution() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADChipDistribution)
  SharedDtor();
}

void ADChipDistribution::SharedDtor() {
  htscsecurityid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ADChipDistribution::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ADChipDistribution::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ADChipDistribution_descriptor_;
}

const ADChipDistribution& ADChipDistribution::default_instance() {
  protobuf_InitDefaults_ADChipDistribution_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ADChipDistribution> ADChipDistribution_default_instance_;

ADChipDistribution* ADChipDistribution::New(::google::protobuf::Arena* arena) const {
  ADChipDistribution* n = new ADChipDistribution;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ADChipDistribution::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADChipDistribution)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ADChipDistribution, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ADChipDistribution*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mddate_, exchangetime_);
  htscsecurityid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(lastpx_, alistedtotalshare_);
  isfinalsettlement_ = false;
  ZR_(tradablemcst_, tradablecentralizedpercent_);
  ZR_(tradablecentralizedmaxcostofpositions_, tradablesharetotalnumber_);
  ZR_(tradablesharepercent_, restrictedmincostofpositions_);
  ZR_(restrictedsharetotalnumber_, largeshareholderssharetotalnumber_);
  largeshareholderssharepercent_ = GOOGLE_LONGLONG(0);
  datamultiplepowerof10_ = 0;

#undef ZR_HELPER_
#undef ZR_

  tradabledetails_.Clear();
  restricteddetails_.Clear();
  restrictedholddetails_.Clear();
  largeshareholdersdetails_.Clear();
}

bool ADChipDistribution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.ADChipDistribution)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string HTSCSecurityID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_htscsecurityid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->htscsecurityid().data(), this->htscsecurityid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.ADChipDistribution.HTSCSecurityID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MDDate;
        break;
      }

      // optional int32 MDDate = 2;
      case 2: {
        if (tag == 16) {
         parse_MDDate:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mddate_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MDTime;
        break;
      }

      // optional int32 MDTime = 3;
      case 3: {
        if (tag == 24) {
         parse_MDTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mdtime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_DataTimestamp;
        break;
      }

      // optional int64 DataTimestamp = 4;
      case 4: {
        if (tag == 32) {
         parse_DataTimestamp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &datatimestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_securityIDSource;
        break;
      }

      // optional .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
      case 5: {
        if (tag == 40) {
         parse_securityIDSource:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_securityidsource(static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_securityType;
        break;
      }

      // optional .com.htsc.mdc.model.ESecurityType securityType = 6;
      case 6: {
        if (tag == 48) {
         parse_securityType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_securitytype(static_cast< ::com::htsc::mdc::model::ESecurityType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_ExchangeDate;
        break;
      }

      // optional int32 ExchangeDate = 7;
      case 7: {
        if (tag == 56) {
         parse_ExchangeDate:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchangedate_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ExchangeTime;
        break;
      }

      // optional int32 ExchangeTime = 8;
      case 8: {
        if (tag == 64) {
         parse_ExchangeTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchangetime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_LastPx;
        break;
      }

      // optional int64 LastPx = 11;
      case 11: {
        if (tag == 88) {
         parse_LastPx:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastpx_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_PreClosePx;
        break;
      }

      // optional int64 PreClosePx = 12;
      case 12: {
        if (tag == 96) {
         parse_PreClosePx:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &preclosepx_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_ShareTotalNumber;
        break;
      }

      // optional int64 ShareTotalNumber = 13;
      case 13: {
        if (tag == 104) {
         parse_ShareTotalNumber:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sharetotalnumber_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_IsFinalSettlement;
        break;
      }

      // optional bool IsFinalSettlement = 14;
      case 14: {
        if (tag == 112) {
         parse_IsFinalSettlement:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfinalsettlement_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_TotalShare;
        break;
      }

      // optional int64 TotalShare = 15;
      case 15: {
        if (tag == 120) {
         parse_TotalShare:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalshare_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_ATotalShare;
        break;
      }

      // optional int64 ATotalShare = 16;
      case 16: {
        if (tag == 128) {
         parse_ATotalShare:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &atotalshare_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_AListedTotalShare;
        break;
      }

      // optional int64 AListedTotalShare = 17;
      case 17: {
        if (tag == 136) {
         parse_AListedTotalShare:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &alistedtotalshare_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_TradableDetails;
        break;
      }

      // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail TradableDetails = 20;
      case 20: {
        if (tag == 162) {
         parse_TradableDetails:
          DO_(input->IncrementRecursionDepth());
         parse_loop_TradableDetails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tradabledetails()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_loop_TradableDetails;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(168)) goto parse_TradableMCST;
        break;
      }

      // optional int64 TradableMCST = 21;
      case 21: {
        if (tag == 168) {
         parse_TradableMCST:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tradablemcst_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_TradableMaxCostOfPositions;
        break;
      }

      // optional int64 TradableMaxCostOfPositions = 22;
      case 22: {
        if (tag == 176) {
         parse_TradableMaxCostOfPositions:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tradablemaxcostofpositions_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_TradableMinCostOfPositions;
        break;
      }

      // optional int64 TradableMinCostOfPositions = 23;
      case 23: {
        if (tag == 184) {
         parse_TradableMinCostOfPositions:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tradablemincostofpositions_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_TradableProfitPercent;
        break;
      }

      // optional int64 TradableProfitPercent = 24;
      case 24: {
        if (tag == 192) {
         parse_TradableProfitPercent:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tradableprofitpercent_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_TradableChipDispersionPercent;
        break;
      }

      // optional int64 TradableChipDispersionPercent = 25;
      case 25: {
        if (tag == 200) {
         parse_TradableChipDispersionPercent:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tradablechipdispersionpercent_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_TradablePreProfitPercent;
        break;
      }

      // optional int64 TradablePreProfitPercent = 26;
      case 26: {
        if (tag == 208) {
         parse_TradablePreProfitPercent:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tradablepreprofitpercent_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_TradableProfitChangePercent;
        break;
      }

      // optional int64 TradableProfitChangePercent = 27;
      case 27: {
        if (tag == 216) {
         parse_TradableProfitChangePercent:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tradableprofitchangepercent_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_TradableCentralizedPercent;
        break;
      }

      // optional int64 TradableCentralizedPercent = 28;
      case 28: {
        if (tag == 224) {
         parse_TradableCentralizedPercent:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tradablecentralizedpercent_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_TradableCentralizedMaxCostOfPositions;
        break;
      }

      // optional int64 TradableCentralizedMaxCostOfPositions = 29;
      case 29: {
        if (tag == 232) {
         parse_TradableCentralizedMaxCostOfPositions:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tradablecentralizedmaxcostofpositions_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_TradableCentralizedMinCostOfPositions;
        break;
      }

      // optional int64 TradableCentralizedMinCostOfPositions = 30;
      case 30: {
        if (tag == 240) {
         parse_TradableCentralizedMinCostOfPositions:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tradablecentralizedmincostofpositions_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_TradableShareTotalNumber;
        break;
      }

      // optional int64 TradableShareTotalNumber = 31;
      case 31: {
        if (tag == 248) {
         parse_TradableShareTotalNumber:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tradablesharetotalnumber_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_TradableSharePercent;
        break;
      }

      // optional int64 TradableSharePercent = 32;
      case 32: {
        if (tag == 256) {
         parse_TradableSharePercent:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tradablesharepercent_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(322)) goto parse_RestrictedDetails;
        break;
      }

      // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail RestrictedDetails = 40;
      case 40: {
        if (tag == 322) {
         parse_RestrictedDetails:
          DO_(input->IncrementRecursionDepth());
         parse_loop_RestrictedDetails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_restricteddetails()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(322)) goto parse_loop_RestrictedDetails;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(328)) goto parse_RestrictedMCST;
        break;
      }

      // optional int64 RestrictedMCST = 41;
      case 41: {
        if (tag == 328) {
         parse_RestrictedMCST:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &restrictedmcst_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_RestrictedMaxCostOfPositions;
        break;
      }

      // optional int64 RestrictedMaxCostOfPositions = 42;
      case 42: {
        if (tag == 336) {
         parse_RestrictedMaxCostOfPositions:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &restrictedmaxcostofpositions_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(344)) goto parse_RestrictedMinCostOfPositions;
        break;
      }

      // optional int64 RestrictedMinCostOfPositions = 43;
      case 43: {
        if (tag == 344) {
         parse_RestrictedMinCostOfPositions:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &restrictedmincostofpositions_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(368)) goto parse_RestrictedShareTotalNumber;
        break;
      }

      // optional int64 RestrictedShareTotalNumber = 46;
      case 46: {
        if (tag == 368) {
         parse_RestrictedShareTotalNumber:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &restrictedsharetotalnumber_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(376)) goto parse_RestrictedSharePercent;
        break;
      }

      // optional int64 RestrictedSharePercent = 47;
      case 47: {
        if (tag == 376) {
         parse_RestrictedSharePercent:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &restrictedsharepercent_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(386)) goto parse_RestrictedHoldDetails;
        break;
      }

      // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail RestrictedHoldDetails = 48;
      case 48: {
        if (tag == 386) {
         parse_RestrictedHoldDetails:
          DO_(input->IncrementRecursionDepth());
         parse_loop_RestrictedHoldDetails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_restrictedholddetails()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(386)) goto parse_loop_RestrictedHoldDetails;
        if (input->ExpectTag(402)) goto parse_loop_LargeShareholdersDetails;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail LargeShareholdersDetails = 50;
      case 50: {
        if (tag == 402) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_LargeShareholdersDetails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_largeshareholdersdetails()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(402)) goto parse_loop_LargeShareholdersDetails;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(408)) goto parse_LargeShareholdersMCST;
        break;
      }

      // optional int64 LargeShareholdersMCST = 51;
      case 51: {
        if (tag == 408) {
         parse_LargeShareholdersMCST:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &largeshareholdersmcst_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(416)) goto parse_LargeShareholdersMaxCostOfPositions;
        break;
      }

      // optional int64 LargeShareholdersMaxCostOfPositions = 52;
      case 52: {
        if (tag == 416) {
         parse_LargeShareholdersMaxCostOfPositions:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &largeshareholdersmaxcostofpositions_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(424)) goto parse_LargeShareholdersMinCostOfPositions;
        break;
      }

      // optional int64 LargeShareholdersMinCostOfPositions = 53;
      case 53: {
        if (tag == 424) {
         parse_LargeShareholdersMinCostOfPositions:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &largeshareholdersmincostofpositions_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(432)) goto parse_LargeShareholdersShareTotalNumber;
        break;
      }

      // optional int64 LargeShareholdersShareTotalNumber = 54;
      case 54: {
        if (tag == 432) {
         parse_LargeShareholdersShareTotalNumber:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &largeshareholderssharetotalnumber_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(440)) goto parse_LargeShareholdersSharePercent;
        break;
      }

      // optional int64 LargeShareholdersSharePercent = 55;
      case 55: {
        if (tag == 440) {
         parse_LargeShareholdersSharePercent:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &largeshareholderssharepercent_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(448)) goto parse_DataMultiplePowerOf10;
        break;
      }

      // optional int32 DataMultiplePowerOf10 = 56;
      case 56: {
        if (tag == 448) {
         parse_DataMultiplePowerOf10:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datamultiplepowerof10_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.ADChipDistribution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.ADChipDistribution)
  return false;
#undef DO_
}

void ADChipDistribution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.ADChipDistribution)
  // optional string HTSCSecurityID = 1;
  if (this->htscsecurityid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->htscsecurityid().data(), this->htscsecurityid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADChipDistribution.HTSCSecurityID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->htscsecurityid(), output);
  }

  // optional int32 MDDate = 2;
  if (this->mddate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mddate(), output);
  }

  // optional int32 MDTime = 3;
  if (this->mdtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mdtime(), output);
  }

  // optional int64 DataTimestamp = 4;
  if (this->datatimestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->datatimestamp(), output);
  }

  // optional .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  if (this->securityidsource() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->securityidsource(), output);
  }

  // optional .com.htsc.mdc.model.ESecurityType securityType = 6;
  if (this->securitytype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->securitytype(), output);
  }

  // optional int32 ExchangeDate = 7;
  if (this->exchangedate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->exchangedate(), output);
  }

  // optional int32 ExchangeTime = 8;
  if (this->exchangetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->exchangetime(), output);
  }

  // optional int64 LastPx = 11;
  if (this->lastpx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->lastpx(), output);
  }

  // optional int64 PreClosePx = 12;
  if (this->preclosepx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->preclosepx(), output);
  }

  // optional int64 ShareTotalNumber = 13;
  if (this->sharetotalnumber() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->sharetotalnumber(), output);
  }

  // optional bool IsFinalSettlement = 14;
  if (this->isfinalsettlement() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->isfinalsettlement(), output);
  }

  // optional int64 TotalShare = 15;
  if (this->totalshare() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->totalshare(), output);
  }

  // optional int64 ATotalShare = 16;
  if (this->atotalshare() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->atotalshare(), output);
  }

  // optional int64 AListedTotalShare = 17;
  if (this->alistedtotalshare() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->alistedtotalshare(), output);
  }

  // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail TradableDetails = 20;
  for (unsigned int i = 0, n = this->tradabledetails_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->tradabledetails(i), output);
  }

  // optional int64 TradableMCST = 21;
  if (this->tradablemcst() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->tradablemcst(), output);
  }

  // optional int64 TradableMaxCostOfPositions = 22;
  if (this->tradablemaxcostofpositions() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->tradablemaxcostofpositions(), output);
  }

  // optional int64 TradableMinCostOfPositions = 23;
  if (this->tradablemincostofpositions() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->tradablemincostofpositions(), output);
  }

  // optional int64 TradableProfitPercent = 24;
  if (this->tradableprofitpercent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(24, this->tradableprofitpercent(), output);
  }

  // optional int64 TradableChipDispersionPercent = 25;
  if (this->tradablechipdispersionpercent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(25, this->tradablechipdispersionpercent(), output);
  }

  // optional int64 TradablePreProfitPercent = 26;
  if (this->tradablepreprofitpercent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(26, this->tradablepreprofitpercent(), output);
  }

  // optional int64 TradableProfitChangePercent = 27;
  if (this->tradableprofitchangepercent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(27, this->tradableprofitchangepercent(), output);
  }

  // optional int64 TradableCentralizedPercent = 28;
  if (this->tradablecentralizedpercent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(28, this->tradablecentralizedpercent(), output);
  }

  // optional int64 TradableCentralizedMaxCostOfPositions = 29;
  if (this->tradablecentralizedmaxcostofpositions() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(29, this->tradablecentralizedmaxcostofpositions(), output);
  }

  // optional int64 TradableCentralizedMinCostOfPositions = 30;
  if (this->tradablecentralizedmincostofpositions() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(30, this->tradablecentralizedmincostofpositions(), output);
  }

  // optional int64 TradableShareTotalNumber = 31;
  if (this->tradablesharetotalnumber() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(31, this->tradablesharetotalnumber(), output);
  }

  // optional int64 TradableSharePercent = 32;
  if (this->tradablesharepercent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(32, this->tradablesharepercent(), output);
  }

  // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail RestrictedDetails = 40;
  for (unsigned int i = 0, n = this->restricteddetails_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->restricteddetails(i), output);
  }

  // optional int64 RestrictedMCST = 41;
  if (this->restrictedmcst() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(41, this->restrictedmcst(), output);
  }

  // optional int64 RestrictedMaxCostOfPositions = 42;
  if (this->restrictedmaxcostofpositions() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(42, this->restrictedmaxcostofpositions(), output);
  }

  // optional int64 RestrictedMinCostOfPositions = 43;
  if (this->restrictedmincostofpositions() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(43, this->restrictedmincostofpositions(), output);
  }

  // optional int64 RestrictedShareTotalNumber = 46;
  if (this->restrictedsharetotalnumber() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(46, this->restrictedsharetotalnumber(), output);
  }

  // optional int64 RestrictedSharePercent = 47;
  if (this->restrictedsharepercent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(47, this->restrictedsharepercent(), output);
  }

  // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail RestrictedHoldDetails = 48;
  for (unsigned int i = 0, n = this->restrictedholddetails_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      48, this->restrictedholddetails(i), output);
  }

  // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail LargeShareholdersDetails = 50;
  for (unsigned int i = 0, n = this->largeshareholdersdetails_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->largeshareholdersdetails(i), output);
  }

  // optional int64 LargeShareholdersMCST = 51;
  if (this->largeshareholdersmcst() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(51, this->largeshareholdersmcst(), output);
  }

  // optional int64 LargeShareholdersMaxCostOfPositions = 52;
  if (this->largeshareholdersmaxcostofpositions() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(52, this->largeshareholdersmaxcostofpositions(), output);
  }

  // optional int64 LargeShareholdersMinCostOfPositions = 53;
  if (this->largeshareholdersmincostofpositions() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(53, this->largeshareholdersmincostofpositions(), output);
  }

  // optional int64 LargeShareholdersShareTotalNumber = 54;
  if (this->largeshareholderssharetotalnumber() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(54, this->largeshareholderssharetotalnumber(), output);
  }

  // optional int64 LargeShareholdersSharePercent = 55;
  if (this->largeshareholderssharepercent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(55, this->largeshareholderssharepercent(), output);
  }

  // optional int32 DataMultiplePowerOf10 = 56;
  if (this->datamultiplepowerof10() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(56, this->datamultiplepowerof10(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.ADChipDistribution)
}

::google::protobuf::uint8* ADChipDistribution::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADChipDistribution)
  // optional string HTSCSecurityID = 1;
  if (this->htscsecurityid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->htscsecurityid().data(), this->htscsecurityid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADChipDistribution.HTSCSecurityID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->htscsecurityid(), target);
  }

  // optional int32 MDDate = 2;
  if (this->mddate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mddate(), target);
  }

  // optional int32 MDTime = 3;
  if (this->mdtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mdtime(), target);
  }

  // optional int64 DataTimestamp = 4;
  if (this->datatimestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->datatimestamp(), target);
  }

  // optional .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  if (this->securityidsource() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->securityidsource(), target);
  }

  // optional .com.htsc.mdc.model.ESecurityType securityType = 6;
  if (this->securitytype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->securitytype(), target);
  }

  // optional int32 ExchangeDate = 7;
  if (this->exchangedate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->exchangedate(), target);
  }

  // optional int32 ExchangeTime = 8;
  if (this->exchangetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->exchangetime(), target);
  }

  // optional int64 LastPx = 11;
  if (this->lastpx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->lastpx(), target);
  }

  // optional int64 PreClosePx = 12;
  if (this->preclosepx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->preclosepx(), target);
  }

  // optional int64 ShareTotalNumber = 13;
  if (this->sharetotalnumber() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->sharetotalnumber(), target);
  }

  // optional bool IsFinalSettlement = 14;
  if (this->isfinalsettlement() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->isfinalsettlement(), target);
  }

  // optional int64 TotalShare = 15;
  if (this->totalshare() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->totalshare(), target);
  }

  // optional int64 ATotalShare = 16;
  if (this->atotalshare() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->atotalshare(), target);
  }

  // optional int64 AListedTotalShare = 17;
  if (this->alistedtotalshare() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->alistedtotalshare(), target);
  }

  // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail TradableDetails = 20;
  for (unsigned int i = 0, n = this->tradabledetails_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, this->tradabledetails(i), false, target);
  }

  // optional int64 TradableMCST = 21;
  if (this->tradablemcst() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->tradablemcst(), target);
  }

  // optional int64 TradableMaxCostOfPositions = 22;
  if (this->tradablemaxcostofpositions() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->tradablemaxcostofpositions(), target);
  }

  // optional int64 TradableMinCostOfPositions = 23;
  if (this->tradablemincostofpositions() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(23, this->tradablemincostofpositions(), target);
  }

  // optional int64 TradableProfitPercent = 24;
  if (this->tradableprofitpercent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(24, this->tradableprofitpercent(), target);
  }

  // optional int64 TradableChipDispersionPercent = 25;
  if (this->tradablechipdispersionpercent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(25, this->tradablechipdispersionpercent(), target);
  }

  // optional int64 TradablePreProfitPercent = 26;
  if (this->tradablepreprofitpercent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(26, this->tradablepreprofitpercent(), target);
  }

  // optional int64 TradableProfitChangePercent = 27;
  if (this->tradableprofitchangepercent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(27, this->tradableprofitchangepercent(), target);
  }

  // optional int64 TradableCentralizedPercent = 28;
  if (this->tradablecentralizedpercent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(28, this->tradablecentralizedpercent(), target);
  }

  // optional int64 TradableCentralizedMaxCostOfPositions = 29;
  if (this->tradablecentralizedmaxcostofpositions() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(29, this->tradablecentralizedmaxcostofpositions(), target);
  }

  // optional int64 TradableCentralizedMinCostOfPositions = 30;
  if (this->tradablecentralizedmincostofpositions() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(30, this->tradablecentralizedmincostofpositions(), target);
  }

  // optional int64 TradableShareTotalNumber = 31;
  if (this->tradablesharetotalnumber() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(31, this->tradablesharetotalnumber(), target);
  }

  // optional int64 TradableSharePercent = 32;
  if (this->tradablesharepercent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(32, this->tradablesharepercent(), target);
  }

  // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail RestrictedDetails = 40;
  for (unsigned int i = 0, n = this->restricteddetails_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        40, this->restricteddetails(i), false, target);
  }

  // optional int64 RestrictedMCST = 41;
  if (this->restrictedmcst() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(41, this->restrictedmcst(), target);
  }

  // optional int64 RestrictedMaxCostOfPositions = 42;
  if (this->restrictedmaxcostofpositions() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(42, this->restrictedmaxcostofpositions(), target);
  }

  // optional int64 RestrictedMinCostOfPositions = 43;
  if (this->restrictedmincostofpositions() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(43, this->restrictedmincostofpositions(), target);
  }

  // optional int64 RestrictedShareTotalNumber = 46;
  if (this->restrictedsharetotalnumber() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(46, this->restrictedsharetotalnumber(), target);
  }

  // optional int64 RestrictedSharePercent = 47;
  if (this->restrictedsharepercent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(47, this->restrictedsharepercent(), target);
  }

  // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail RestrictedHoldDetails = 48;
  for (unsigned int i = 0, n = this->restrictedholddetails_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        48, this->restrictedholddetails(i), false, target);
  }

  // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail LargeShareholdersDetails = 50;
  for (unsigned int i = 0, n = this->largeshareholdersdetails_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        50, this->largeshareholdersdetails(i), false, target);
  }

  // optional int64 LargeShareholdersMCST = 51;
  if (this->largeshareholdersmcst() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(51, this->largeshareholdersmcst(), target);
  }

  // optional int64 LargeShareholdersMaxCostOfPositions = 52;
  if (this->largeshareholdersmaxcostofpositions() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(52, this->largeshareholdersmaxcostofpositions(), target);
  }

  // optional int64 LargeShareholdersMinCostOfPositions = 53;
  if (this->largeshareholdersmincostofpositions() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(53, this->largeshareholdersmincostofpositions(), target);
  }

  // optional int64 LargeShareholdersShareTotalNumber = 54;
  if (this->largeshareholderssharetotalnumber() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(54, this->largeshareholderssharetotalnumber(), target);
  }

  // optional int64 LargeShareholdersSharePercent = 55;
  if (this->largeshareholderssharepercent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(55, this->largeshareholderssharepercent(), target);
  }

  // optional int32 DataMultiplePowerOf10 = 56;
  if (this->datamultiplepowerof10() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(56, this->datamultiplepowerof10(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADChipDistribution)
  return target;
}

size_t ADChipDistribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADChipDistribution)
  size_t total_size = 0;

  // optional string HTSCSecurityID = 1;
  if (this->htscsecurityid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->htscsecurityid());
  }

  // optional int32 MDDate = 2;
  if (this->mddate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mddate());
  }

  // optional int32 MDTime = 3;
  if (this->mdtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mdtime());
  }

  // optional int64 DataTimestamp = 4;
  if (this->datatimestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->datatimestamp());
  }

  // optional .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
  if (this->securityidsource() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->securityidsource());
  }

  // optional .com.htsc.mdc.model.ESecurityType securityType = 6;
  if (this->securitytype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->securitytype());
  }

  // optional int32 ExchangeDate = 7;
  if (this->exchangedate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exchangedate());
  }

  // optional int32 ExchangeTime = 8;
  if (this->exchangetime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exchangetime());
  }

  // optional int64 LastPx = 11;
  if (this->lastpx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lastpx());
  }

  // optional int64 PreClosePx = 12;
  if (this->preclosepx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->preclosepx());
  }

  // optional int64 ShareTotalNumber = 13;
  if (this->sharetotalnumber() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sharetotalnumber());
  }

  // optional bool IsFinalSettlement = 14;
  if (this->isfinalsettlement() != 0) {
    total_size += 1 + 1;
  }

  // optional int64 TotalShare = 15;
  if (this->totalshare() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->totalshare());
  }

  // optional int64 ATotalShare = 16;
  if (this->atotalshare() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->atotalshare());
  }

  // optional int64 AListedTotalShare = 17;
  if (this->alistedtotalshare() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->alistedtotalshare());
  }

  // optional int64 TradableMCST = 21;
  if (this->tradablemcst() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tradablemcst());
  }

  // optional int64 TradableMaxCostOfPositions = 22;
  if (this->tradablemaxcostofpositions() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tradablemaxcostofpositions());
  }

  // optional int64 TradableMinCostOfPositions = 23;
  if (this->tradablemincostofpositions() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tradablemincostofpositions());
  }

  // optional int64 TradableProfitPercent = 24;
  if (this->tradableprofitpercent() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tradableprofitpercent());
  }

  // optional int64 TradableChipDispersionPercent = 25;
  if (this->tradablechipdispersionpercent() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tradablechipdispersionpercent());
  }

  // optional int64 TradablePreProfitPercent = 26;
  if (this->tradablepreprofitpercent() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tradablepreprofitpercent());
  }

  // optional int64 TradableProfitChangePercent = 27;
  if (this->tradableprofitchangepercent() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tradableprofitchangepercent());
  }

  // optional int64 TradableCentralizedPercent = 28;
  if (this->tradablecentralizedpercent() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tradablecentralizedpercent());
  }

  // optional int64 TradableCentralizedMaxCostOfPositions = 29;
  if (this->tradablecentralizedmaxcostofpositions() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tradablecentralizedmaxcostofpositions());
  }

  // optional int64 TradableCentralizedMinCostOfPositions = 30;
  if (this->tradablecentralizedmincostofpositions() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tradablecentralizedmincostofpositions());
  }

  // optional int64 TradableShareTotalNumber = 31;
  if (this->tradablesharetotalnumber() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tradablesharetotalnumber());
  }

  // optional int64 TradableSharePercent = 32;
  if (this->tradablesharepercent() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tradablesharepercent());
  }

  // optional int64 RestrictedMCST = 41;
  if (this->restrictedmcst() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->restrictedmcst());
  }

  // optional int64 RestrictedMaxCostOfPositions = 42;
  if (this->restrictedmaxcostofpositions() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->restrictedmaxcostofpositions());
  }

  // optional int64 RestrictedMinCostOfPositions = 43;
  if (this->restrictedmincostofpositions() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->restrictedmincostofpositions());
  }

  // optional int64 RestrictedShareTotalNumber = 46;
  if (this->restrictedsharetotalnumber() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->restrictedsharetotalnumber());
  }

  // optional int64 RestrictedSharePercent = 47;
  if (this->restrictedsharepercent() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->restrictedsharepercent());
  }

  // optional int64 LargeShareholdersMCST = 51;
  if (this->largeshareholdersmcst() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->largeshareholdersmcst());
  }

  // optional int64 LargeShareholdersMaxCostOfPositions = 52;
  if (this->largeshareholdersmaxcostofpositions() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->largeshareholdersmaxcostofpositions());
  }

  // optional int64 LargeShareholdersMinCostOfPositions = 53;
  if (this->largeshareholdersmincostofpositions() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->largeshareholdersmincostofpositions());
  }

  // optional int64 LargeShareholdersShareTotalNumber = 54;
  if (this->largeshareholderssharetotalnumber() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->largeshareholderssharetotalnumber());
  }

  // optional int64 LargeShareholdersSharePercent = 55;
  if (this->largeshareholderssharepercent() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->largeshareholderssharepercent());
  }

  // optional int32 DataMultiplePowerOf10 = 56;
  if (this->datamultiplepowerof10() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->datamultiplepowerof10());
  }

  // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail TradableDetails = 20;
  {
    unsigned int count = this->tradabledetails_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tradabledetails(i));
    }
  }

  // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail RestrictedDetails = 40;
  {
    unsigned int count = this->restricteddetails_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->restricteddetails(i));
    }
  }

  // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail RestrictedHoldDetails = 48;
  {
    unsigned int count = this->restrictedholddetails_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->restrictedholddetails(i));
    }
  }

  // repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail LargeShareholdersDetails = 50;
  {
    unsigned int count = this->largeshareholdersdetails_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->largeshareholdersdetails(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ADChipDistribution::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.ADChipDistribution)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ADChipDistribution* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ADChipDistribution>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.ADChipDistribution)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.ADChipDistribution)
    UnsafeMergeFrom(*source);
  }
}

void ADChipDistribution::MergeFrom(const ADChipDistribution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADChipDistribution)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ADChipDistribution::UnsafeMergeFrom(const ADChipDistribution& from) {
  GOOGLE_DCHECK(&from != this);
  tradabledetails_.MergeFrom(from.tradabledetails_);
  restricteddetails_.MergeFrom(from.restricteddetails_);
  restrictedholddetails_.MergeFrom(from.restrictedholddetails_);
  largeshareholdersdetails_.MergeFrom(from.largeshareholdersdetails_);
  if (from.htscsecurityid().size() > 0) {

    htscsecurityid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.htscsecurityid_);
  }
  if (from.mddate() != 0) {
    set_mddate(from.mddate());
  }
  if (from.mdtime() != 0) {
    set_mdtime(from.mdtime());
  }
  if (from.datatimestamp() != 0) {
    set_datatimestamp(from.datatimestamp());
  }
  if (from.securityidsource() != 0) {
    set_securityidsource(from.securityidsource());
  }
  if (from.securitytype() != 0) {
    set_securitytype(from.securitytype());
  }
  if (from.exchangedate() != 0) {
    set_exchangedate(from.exchangedate());
  }
  if (from.exchangetime() != 0) {
    set_exchangetime(from.exchangetime());
  }
  if (from.lastpx() != 0) {
    set_lastpx(from.lastpx());
  }
  if (from.preclosepx() != 0) {
    set_preclosepx(from.preclosepx());
  }
  if (from.sharetotalnumber() != 0) {
    set_sharetotalnumber(from.sharetotalnumber());
  }
  if (from.isfinalsettlement() != 0) {
    set_isfinalsettlement(from.isfinalsettlement());
  }
  if (from.totalshare() != 0) {
    set_totalshare(from.totalshare());
  }
  if (from.atotalshare() != 0) {
    set_atotalshare(from.atotalshare());
  }
  if (from.alistedtotalshare() != 0) {
    set_alistedtotalshare(from.alistedtotalshare());
  }
  if (from.tradablemcst() != 0) {
    set_tradablemcst(from.tradablemcst());
  }
  if (from.tradablemaxcostofpositions() != 0) {
    set_tradablemaxcostofpositions(from.tradablemaxcostofpositions());
  }
  if (from.tradablemincostofpositions() != 0) {
    set_tradablemincostofpositions(from.tradablemincostofpositions());
  }
  if (from.tradableprofitpercent() != 0) {
    set_tradableprofitpercent(from.tradableprofitpercent());
  }
  if (from.tradablechipdispersionpercent() != 0) {
    set_tradablechipdispersionpercent(from.tradablechipdispersionpercent());
  }
  if (from.tradablepreprofitpercent() != 0) {
    set_tradablepreprofitpercent(from.tradablepreprofitpercent());
  }
  if (from.tradableprofitchangepercent() != 0) {
    set_tradableprofitchangepercent(from.tradableprofitchangepercent());
  }
  if (from.tradablecentralizedpercent() != 0) {
    set_tradablecentralizedpercent(from.tradablecentralizedpercent());
  }
  if (from.tradablecentralizedmaxcostofpositions() != 0) {
    set_tradablecentralizedmaxcostofpositions(from.tradablecentralizedmaxcostofpositions());
  }
  if (from.tradablecentralizedmincostofpositions() != 0) {
    set_tradablecentralizedmincostofpositions(from.tradablecentralizedmincostofpositions());
  }
  if (from.tradablesharetotalnumber() != 0) {
    set_tradablesharetotalnumber(from.tradablesharetotalnumber());
  }
  if (from.tradablesharepercent() != 0) {
    set_tradablesharepercent(from.tradablesharepercent());
  }
  if (from.restrictedmcst() != 0) {
    set_restrictedmcst(from.restrictedmcst());
  }
  if (from.restrictedmaxcostofpositions() != 0) {
    set_restrictedmaxcostofpositions(from.restrictedmaxcostofpositions());
  }
  if (from.restrictedmincostofpositions() != 0) {
    set_restrictedmincostofpositions(from.restrictedmincostofpositions());
  }
  if (from.restrictedsharetotalnumber() != 0) {
    set_restrictedsharetotalnumber(from.restrictedsharetotalnumber());
  }
  if (from.restrictedsharepercent() != 0) {
    set_restrictedsharepercent(from.restrictedsharepercent());
  }
  if (from.largeshareholdersmcst() != 0) {
    set_largeshareholdersmcst(from.largeshareholdersmcst());
  }
  if (from.largeshareholdersmaxcostofpositions() != 0) {
    set_largeshareholdersmaxcostofpositions(from.largeshareholdersmaxcostofpositions());
  }
  if (from.largeshareholdersmincostofpositions() != 0) {
    set_largeshareholdersmincostofpositions(from.largeshareholdersmincostofpositions());
  }
  if (from.largeshareholderssharetotalnumber() != 0) {
    set_largeshareholderssharetotalnumber(from.largeshareholderssharetotalnumber());
  }
  if (from.largeshareholderssharepercent() != 0) {
    set_largeshareholderssharepercent(from.largeshareholderssharepercent());
  }
  if (from.datamultiplepowerof10() != 0) {
    set_datamultiplepowerof10(from.datamultiplepowerof10());
  }
}

void ADChipDistribution::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.ADChipDistribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADChipDistribution::CopyFrom(const ADChipDistribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADChipDistribution)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ADChipDistribution::IsInitialized() const {

  return true;
}

void ADChipDistribution::Swap(ADChipDistribution* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADChipDistribution::InternalSwap(ADChipDistribution* other) {
  htscsecurityid_.Swap(&other->htscsecurityid_);
  std::swap(mddate_, other->mddate_);
  std::swap(mdtime_, other->mdtime_);
  std::swap(datatimestamp_, other->datatimestamp_);
  std::swap(securityidsource_, other->securityidsource_);
  std::swap(securitytype_, other->securitytype_);
  std::swap(exchangedate_, other->exchangedate_);
  std::swap(exchangetime_, other->exchangetime_);
  std::swap(lastpx_, other->lastpx_);
  std::swap(preclosepx_, other->preclosepx_);
  std::swap(sharetotalnumber_, other->sharetotalnumber_);
  std::swap(isfinalsettlement_, other->isfinalsettlement_);
  std::swap(totalshare_, other->totalshare_);
  std::swap(atotalshare_, other->atotalshare_);
  std::swap(alistedtotalshare_, other->alistedtotalshare_);
  tradabledetails_.UnsafeArenaSwap(&other->tradabledetails_);
  std::swap(tradablemcst_, other->tradablemcst_);
  std::swap(tradablemaxcostofpositions_, other->tradablemaxcostofpositions_);
  std::swap(tradablemincostofpositions_, other->tradablemincostofpositions_);
  std::swap(tradableprofitpercent_, other->tradableprofitpercent_);
  std::swap(tradablechipdispersionpercent_, other->tradablechipdispersionpercent_);
  std::swap(tradablepreprofitpercent_, other->tradablepreprofitpercent_);
  std::swap(tradableprofitchangepercent_, other->tradableprofitchangepercent_);
  std::swap(tradablecentralizedpercent_, other->tradablecentralizedpercent_);
  std::swap(tradablecentralizedmaxcostofpositions_, other->tradablecentralizedmaxcostofpositions_);
  std::swap(tradablecentralizedmincostofpositions_, other->tradablecentralizedmincostofpositions_);
  std::swap(tradablesharetotalnumber_, other->tradablesharetotalnumber_);
  std::swap(tradablesharepercent_, other->tradablesharepercent_);
  restricteddetails_.UnsafeArenaSwap(&other->restricteddetails_);
  std::swap(restrictedmcst_, other->restrictedmcst_);
  std::swap(restrictedmaxcostofpositions_, other->restrictedmaxcostofpositions_);
  std::swap(restrictedmincostofpositions_, other->restrictedmincostofpositions_);
  std::swap(restrictedsharetotalnumber_, other->restrictedsharetotalnumber_);
  std::swap(restrictedsharepercent_, other->restrictedsharepercent_);
  restrictedholddetails_.UnsafeArenaSwap(&other->restrictedholddetails_);
  largeshareholdersdetails_.UnsafeArenaSwap(&other->largeshareholdersdetails_);
  std::swap(largeshareholdersmcst_, other->largeshareholdersmcst_);
  std::swap(largeshareholdersmaxcostofpositions_, other->largeshareholdersmaxcostofpositions_);
  std::swap(largeshareholdersmincostofpositions_, other->largeshareholdersmincostofpositions_);
  std::swap(largeshareholderssharetotalnumber_, other->largeshareholderssharetotalnumber_);
  std::swap(largeshareholderssharepercent_, other->largeshareholderssharepercent_);
  std::swap(datamultiplepowerof10_, other->datamultiplepowerof10_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ADChipDistribution::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ADChipDistribution_descriptor_;
  metadata.reflection = ADChipDistribution_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ADChipDistribution

// optional string HTSCSecurityID = 1;
void ADChipDistribution::clear_htscsecurityid() {
  htscsecurityid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ADChipDistribution::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.HTSCSecurityID)
  return htscsecurityid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ADChipDistribution::set_htscsecurityid(const ::std::string& value) {
  
  htscsecurityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.HTSCSecurityID)
}
void ADChipDistribution::set_htscsecurityid(const char* value) {
  
  htscsecurityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.ADChipDistribution.HTSCSecurityID)
}
void ADChipDistribution::set_htscsecurityid(const char* value, size_t size) {
  
  htscsecurityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.ADChipDistribution.HTSCSecurityID)
}
::std::string* ADChipDistribution::mutable_htscsecurityid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADChipDistribution.HTSCSecurityID)
  return htscsecurityid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ADChipDistribution::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADChipDistribution.HTSCSecurityID)
  
  return htscsecurityid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ADChipDistribution::set_allocated_htscsecurityid(::std::string* htscsecurityid) {
  if (htscsecurityid != NULL) {
    
  } else {
    
  }
  htscsecurityid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), htscsecurityid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADChipDistribution.HTSCSecurityID)
}

// optional int32 MDDate = 2;
void ADChipDistribution::clear_mddate() {
  mddate_ = 0;
}
::google::protobuf::int32 ADChipDistribution::mddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.MDDate)
  return mddate_;
}
void ADChipDistribution::set_mddate(::google::protobuf::int32 value) {
  
  mddate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.MDDate)
}

// optional int32 MDTime = 3;
void ADChipDistribution::clear_mdtime() {
  mdtime_ = 0;
}
::google::protobuf::int32 ADChipDistribution::mdtime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.MDTime)
  return mdtime_;
}
void ADChipDistribution::set_mdtime(::google::protobuf::int32 value) {
  
  mdtime_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.MDTime)
}

// optional int64 DataTimestamp = 4;
void ADChipDistribution::clear_datatimestamp() {
  datatimestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADChipDistribution::datatimestamp() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.DataTimestamp)
  return datatimestamp_;
}
void ADChipDistribution::set_datatimestamp(::google::protobuf::int64 value) {
  
  datatimestamp_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.DataTimestamp)
}

// optional .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 5;
void ADChipDistribution::clear_securityidsource() {
  securityidsource_ = 0;
}
::com::htsc::mdc::model::ESecurityIDSource ADChipDistribution::securityidsource() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.securityIDSource)
  return static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(securityidsource_);
}
void ADChipDistribution::set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  
  securityidsource_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.securityIDSource)
}

// optional .com.htsc.mdc.model.ESecurityType securityType = 6;
void ADChipDistribution::clear_securitytype() {
  securitytype_ = 0;
}
::com::htsc::mdc::model::ESecurityType ADChipDistribution::securitytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.securityType)
  return static_cast< ::com::htsc::mdc::model::ESecurityType >(securitytype_);
}
void ADChipDistribution::set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  
  securitytype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.securityType)
}

// optional int32 ExchangeDate = 7;
void ADChipDistribution::clear_exchangedate() {
  exchangedate_ = 0;
}
::google::protobuf::int32 ADChipDistribution::exchangedate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.ExchangeDate)
  return exchangedate_;
}
void ADChipDistribution::set_exchangedate(::google::protobuf::int32 value) {
  
  exchangedate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.ExchangeDate)
}

// optional int32 ExchangeTime = 8;
void ADChipDistribution::clear_exchangetime() {
  exchangetime_ = 0;
}
::google::protobuf::int32 ADChipDistribution::exchangetime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.ExchangeTime)
  return exchangetime_;
}
void ADChipDistribution::set_exchangetime(::google::protobuf::int32 value) {
  
  exchangetime_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.ExchangeTime)
}

// optional int64 LastPx = 11;
void ADChipDistribution::clear_lastpx() {
  lastpx_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADChipDistribution::lastpx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.LastPx)
  return lastpx_;
}
void ADChipDistribution::set_lastpx(::google::protobuf::int64 value) {
  
  lastpx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.LastPx)
}

// optional int64 PreClosePx = 12;
void ADChipDistribution::clear_preclosepx() {
  preclosepx_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADChipDistribution::preclosepx() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.PreClosePx)
  return preclosepx_;
}
void ADChipDistribution::set_preclosepx(::google::protobuf::int64 value) {
  
  preclosepx_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.PreClosePx)
}

// optional int64 ShareTotalNumber = 13;
void ADChipDistribution::clear_sharetotalnumber() {
  sharetotalnumber_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADChipDistribution::sharetotalnumber() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.ShareTotalNumber)
  return sharetotalnumber_;
}
void ADChipDistribution::set_sharetotalnumber(::google::protobuf::int64 value) {
  
  sharetotalnumber_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.ShareTotalNumber)
}

// optional bool IsFinalSettlement = 14;
void ADChipDistribution::clear_isfinalsettlement() {
  isfinalsettlement_ = false;
}
bool ADChipDistribution::isfinalsettlement() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.IsFinalSettlement)
  return isfinalsettlement_;
}
void ADChipDistribution::set_isfinalsettlement(bool value) {
  
  isfinalsettlement_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.IsFinalSettlement)
}

// optional int64 TotalShare = 15;
void ADChipDistribution::clear_totalshare() {
  totalshare_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADChipDistribution::totalshare() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.TotalShare)
  return totalshare_;
}
void ADChipDistribution::set_totalshare(::google::protobuf::int64 value) {
  
  totalshare_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.TotalShare)
}

// optional int64 ATotalShare = 16;
void ADChipDistribution::clear_atotalshare() {
  atotalshare_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADChipDistribution::atotalshare() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.ATotalShare)
  return atotalshare_;
}
void ADChipDistribution::set_atotalshare(::google::protobuf::int64 value) {
  
  atotalshare_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.ATotalShare)
}

// optional int64 AListedTotalShare = 17;
void ADChipDistribution::clear_alistedtotalshare() {
  alistedtotalshare_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADChipDistribution::alistedtotalshare() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.AListedTotalShare)
  return alistedtotalshare_;
}
void ADChipDistribution::set_alistedtotalshare(::google::protobuf::int64 value) {
  
  alistedtotalshare_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.AListedTotalShare)
}

// repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail TradableDetails = 20;
int ADChipDistribution::tradabledetails_size() const {
  return tradabledetails_.size();
}
void ADChipDistribution::clear_tradabledetails() {
  tradabledetails_.Clear();
}
const ::com::htsc::mdc::insight::model::ADChipDistributionDetail& ADChipDistribution::tradabledetails(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.TradableDetails)
  return tradabledetails_.Get(index);
}
::com::htsc::mdc::insight::model::ADChipDistributionDetail* ADChipDistribution::mutable_tradabledetails(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADChipDistribution.TradableDetails)
  return tradabledetails_.Mutable(index);
}
::com::htsc::mdc::insight::model::ADChipDistributionDetail* ADChipDistribution::add_tradabledetails() {
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.ADChipDistribution.TradableDetails)
  return tradabledetails_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADChipDistributionDetail >*
ADChipDistribution::mutable_tradabledetails() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.ADChipDistribution.TradableDetails)
  return &tradabledetails_;
}
const ::google::protobuf::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADChipDistributionDetail >&
ADChipDistribution::tradabledetails() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.ADChipDistribution.TradableDetails)
  return tradabledetails_;
}

// optional int64 TradableMCST = 21;
void ADChipDistribution::clear_tradablemcst() {
  tradablemcst_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADChipDistribution::tradablemcst() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.TradableMCST)
  return tradablemcst_;
}
void ADChipDistribution::set_tradablemcst(::google::protobuf::int64 value) {
  
  tradablemcst_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.TradableMCST)
}

// optional int64 TradableMaxCostOfPositions = 22;
void ADChipDistribution::clear_tradablemaxcostofpositions() {
  tradablemaxcostofpositions_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADChipDistribution::tradablemaxcostofpositions() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.TradableMaxCostOfPositions)
  return tradablemaxcostofpositions_;
}
void ADChipDistribution::set_tradablemaxcostofpositions(::google::protobuf::int64 value) {
  
  tradablemaxcostofpositions_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.TradableMaxCostOfPositions)
}

// optional int64 TradableMinCostOfPositions = 23;
void ADChipDistribution::clear_tradablemincostofpositions() {
  tradablemincostofpositions_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADChipDistribution::tradablemincostofpositions() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.TradableMinCostOfPositions)
  return tradablemincostofpositions_;
}
void ADChipDistribution::set_tradablemincostofpositions(::google::protobuf::int64 value) {
  
  tradablemincostofpositions_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.TradableMinCostOfPositions)
}

// optional int64 TradableProfitPercent = 24;
void ADChipDistribution::clear_tradableprofitpercent() {
  tradableprofitpercent_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADChipDistribution::tradableprofitpercent() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.TradableProfitPercent)
  return tradableprofitpercent_;
}
void ADChipDistribution::set_tradableprofitpercent(::google::protobuf::int64 value) {
  
  tradableprofitpercent_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.TradableProfitPercent)
}

// optional int64 TradableChipDispersionPercent = 25;
void ADChipDistribution::clear_tradablechipdispersionpercent() {
  tradablechipdispersionpercent_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADChipDistribution::tradablechipdispersionpercent() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.TradableChipDispersionPercent)
  return tradablechipdispersionpercent_;
}
void ADChipDistribution::set_tradablechipdispersionpercent(::google::protobuf::int64 value) {
  
  tradablechipdispersionpercent_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.TradableChipDispersionPercent)
}

// optional int64 TradablePreProfitPercent = 26;
void ADChipDistribution::clear_tradablepreprofitpercent() {
  tradablepreprofitpercent_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADChipDistribution::tradablepreprofitpercent() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.TradablePreProfitPercent)
  return tradablepreprofitpercent_;
}
void ADChipDistribution::set_tradablepreprofitpercent(::google::protobuf::int64 value) {
  
  tradablepreprofitpercent_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.TradablePreProfitPercent)
}

// optional int64 TradableProfitChangePercent = 27;
void ADChipDistribution::clear_tradableprofitchangepercent() {
  tradableprofitchangepercent_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADChipDistribution::tradableprofitchangepercent() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.TradableProfitChangePercent)
  return tradableprofitchangepercent_;
}
void ADChipDistribution::set_tradableprofitchangepercent(::google::protobuf::int64 value) {
  
  tradableprofitchangepercent_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.TradableProfitChangePercent)
}

// optional int64 TradableCentralizedPercent = 28;
void ADChipDistribution::clear_tradablecentralizedpercent() {
  tradablecentralizedpercent_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADChipDistribution::tradablecentralizedpercent() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.TradableCentralizedPercent)
  return tradablecentralizedpercent_;
}
void ADChipDistribution::set_tradablecentralizedpercent(::google::protobuf::int64 value) {
  
  tradablecentralizedpercent_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.TradableCentralizedPercent)
}

// optional int64 TradableCentralizedMaxCostOfPositions = 29;
void ADChipDistribution::clear_tradablecentralizedmaxcostofpositions() {
  tradablecentralizedmaxcostofpositions_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADChipDistribution::tradablecentralizedmaxcostofpositions() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.TradableCentralizedMaxCostOfPositions)
  return tradablecentralizedmaxcostofpositions_;
}
void ADChipDistribution::set_tradablecentralizedmaxcostofpositions(::google::protobuf::int64 value) {
  
  tradablecentralizedmaxcostofpositions_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.TradableCentralizedMaxCostOfPositions)
}

// optional int64 TradableCentralizedMinCostOfPositions = 30;
void ADChipDistribution::clear_tradablecentralizedmincostofpositions() {
  tradablecentralizedmincostofpositions_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADChipDistribution::tradablecentralizedmincostofpositions() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.TradableCentralizedMinCostOfPositions)
  return tradablecentralizedmincostofpositions_;
}
void ADChipDistribution::set_tradablecentralizedmincostofpositions(::google::protobuf::int64 value) {
  
  tradablecentralizedmincostofpositions_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.TradableCentralizedMinCostOfPositions)
}

// optional int64 TradableShareTotalNumber = 31;
void ADChipDistribution::clear_tradablesharetotalnumber() {
  tradablesharetotalnumber_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADChipDistribution::tradablesharetotalnumber() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.TradableShareTotalNumber)
  return tradablesharetotalnumber_;
}
void ADChipDistribution::set_tradablesharetotalnumber(::google::protobuf::int64 value) {
  
  tradablesharetotalnumber_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.TradableShareTotalNumber)
}

// optional int64 TradableSharePercent = 32;
void ADChipDistribution::clear_tradablesharepercent() {
  tradablesharepercent_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADChipDistribution::tradablesharepercent() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.TradableSharePercent)
  return tradablesharepercent_;
}
void ADChipDistribution::set_tradablesharepercent(::google::protobuf::int64 value) {
  
  tradablesharepercent_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.TradableSharePercent)
}

// repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail RestrictedDetails = 40;
int ADChipDistribution::restricteddetails_size() const {
  return restricteddetails_.size();
}
void ADChipDistribution::clear_restricteddetails() {
  restricteddetails_.Clear();
}
const ::com::htsc::mdc::insight::model::ADChipDistributionDetail& ADChipDistribution::restricteddetails(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedDetails)
  return restricteddetails_.Get(index);
}
::com::htsc::mdc::insight::model::ADChipDistributionDetail* ADChipDistribution::mutable_restricteddetails(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedDetails)
  return restricteddetails_.Mutable(index);
}
::com::htsc::mdc::insight::model::ADChipDistributionDetail* ADChipDistribution::add_restricteddetails() {
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedDetails)
  return restricteddetails_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADChipDistributionDetail >*
ADChipDistribution::mutable_restricteddetails() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedDetails)
  return &restricteddetails_;
}
const ::google::protobuf::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADChipDistributionDetail >&
ADChipDistribution::restricteddetails() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedDetails)
  return restricteddetails_;
}

// optional int64 RestrictedMCST = 41;
void ADChipDistribution::clear_restrictedmcst() {
  restrictedmcst_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADChipDistribution::restrictedmcst() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedMCST)
  return restrictedmcst_;
}
void ADChipDistribution::set_restrictedmcst(::google::protobuf::int64 value) {
  
  restrictedmcst_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedMCST)
}

// optional int64 RestrictedMaxCostOfPositions = 42;
void ADChipDistribution::clear_restrictedmaxcostofpositions() {
  restrictedmaxcostofpositions_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADChipDistribution::restrictedmaxcostofpositions() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedMaxCostOfPositions)
  return restrictedmaxcostofpositions_;
}
void ADChipDistribution::set_restrictedmaxcostofpositions(::google::protobuf::int64 value) {
  
  restrictedmaxcostofpositions_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedMaxCostOfPositions)
}

// optional int64 RestrictedMinCostOfPositions = 43;
void ADChipDistribution::clear_restrictedmincostofpositions() {
  restrictedmincostofpositions_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADChipDistribution::restrictedmincostofpositions() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedMinCostOfPositions)
  return restrictedmincostofpositions_;
}
void ADChipDistribution::set_restrictedmincostofpositions(::google::protobuf::int64 value) {
  
  restrictedmincostofpositions_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedMinCostOfPositions)
}

// optional int64 RestrictedShareTotalNumber = 46;
void ADChipDistribution::clear_restrictedsharetotalnumber() {
  restrictedsharetotalnumber_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADChipDistribution::restrictedsharetotalnumber() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedShareTotalNumber)
  return restrictedsharetotalnumber_;
}
void ADChipDistribution::set_restrictedsharetotalnumber(::google::protobuf::int64 value) {
  
  restrictedsharetotalnumber_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedShareTotalNumber)
}

// optional int64 RestrictedSharePercent = 47;
void ADChipDistribution::clear_restrictedsharepercent() {
  restrictedsharepercent_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADChipDistribution::restrictedsharepercent() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedSharePercent)
  return restrictedsharepercent_;
}
void ADChipDistribution::set_restrictedsharepercent(::google::protobuf::int64 value) {
  
  restrictedsharepercent_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedSharePercent)
}

// repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail RestrictedHoldDetails = 48;
int ADChipDistribution::restrictedholddetails_size() const {
  return restrictedholddetails_.size();
}
void ADChipDistribution::clear_restrictedholddetails() {
  restrictedholddetails_.Clear();
}
const ::com::htsc::mdc::insight::model::ADChipDistributionDetail& ADChipDistribution::restrictedholddetails(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedHoldDetails)
  return restrictedholddetails_.Get(index);
}
::com::htsc::mdc::insight::model::ADChipDistributionDetail* ADChipDistribution::mutable_restrictedholddetails(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedHoldDetails)
  return restrictedholddetails_.Mutable(index);
}
::com::htsc::mdc::insight::model::ADChipDistributionDetail* ADChipDistribution::add_restrictedholddetails() {
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedHoldDetails)
  return restrictedholddetails_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADChipDistributionDetail >*
ADChipDistribution::mutable_restrictedholddetails() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedHoldDetails)
  return &restrictedholddetails_;
}
const ::google::protobuf::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADChipDistributionDetail >&
ADChipDistribution::restrictedholddetails() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.ADChipDistribution.RestrictedHoldDetails)
  return restrictedholddetails_;
}

// repeated .com.htsc.mdc.insight.model.ADChipDistributionDetail LargeShareholdersDetails = 50;
int ADChipDistribution::largeshareholdersdetails_size() const {
  return largeshareholdersdetails_.size();
}
void ADChipDistribution::clear_largeshareholdersdetails() {
  largeshareholdersdetails_.Clear();
}
const ::com::htsc::mdc::insight::model::ADChipDistributionDetail& ADChipDistribution::largeshareholdersdetails(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.LargeShareholdersDetails)
  return largeshareholdersdetails_.Get(index);
}
::com::htsc::mdc::insight::model::ADChipDistributionDetail* ADChipDistribution::mutable_largeshareholdersdetails(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADChipDistribution.LargeShareholdersDetails)
  return largeshareholdersdetails_.Mutable(index);
}
::com::htsc::mdc::insight::model::ADChipDistributionDetail* ADChipDistribution::add_largeshareholdersdetails() {
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.ADChipDistribution.LargeShareholdersDetails)
  return largeshareholdersdetails_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADChipDistributionDetail >*
ADChipDistribution::mutable_largeshareholdersdetails() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.ADChipDistribution.LargeShareholdersDetails)
  return &largeshareholdersdetails_;
}
const ::google::protobuf::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADChipDistributionDetail >&
ADChipDistribution::largeshareholdersdetails() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.ADChipDistribution.LargeShareholdersDetails)
  return largeshareholdersdetails_;
}

// optional int64 LargeShareholdersMCST = 51;
void ADChipDistribution::clear_largeshareholdersmcst() {
  largeshareholdersmcst_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADChipDistribution::largeshareholdersmcst() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.LargeShareholdersMCST)
  return largeshareholdersmcst_;
}
void ADChipDistribution::set_largeshareholdersmcst(::google::protobuf::int64 value) {
  
  largeshareholdersmcst_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.LargeShareholdersMCST)
}

// optional int64 LargeShareholdersMaxCostOfPositions = 52;
void ADChipDistribution::clear_largeshareholdersmaxcostofpositions() {
  largeshareholdersmaxcostofpositions_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADChipDistribution::largeshareholdersmaxcostofpositions() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.LargeShareholdersMaxCostOfPositions)
  return largeshareholdersmaxcostofpositions_;
}
void ADChipDistribution::set_largeshareholdersmaxcostofpositions(::google::protobuf::int64 value) {
  
  largeshareholdersmaxcostofpositions_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.LargeShareholdersMaxCostOfPositions)
}

// optional int64 LargeShareholdersMinCostOfPositions = 53;
void ADChipDistribution::clear_largeshareholdersmincostofpositions() {
  largeshareholdersmincostofpositions_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADChipDistribution::largeshareholdersmincostofpositions() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.LargeShareholdersMinCostOfPositions)
  return largeshareholdersmincostofpositions_;
}
void ADChipDistribution::set_largeshareholdersmincostofpositions(::google::protobuf::int64 value) {
  
  largeshareholdersmincostofpositions_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.LargeShareholdersMinCostOfPositions)
}

// optional int64 LargeShareholdersShareTotalNumber = 54;
void ADChipDistribution::clear_largeshareholderssharetotalnumber() {
  largeshareholderssharetotalnumber_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADChipDistribution::largeshareholderssharetotalnumber() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.LargeShareholdersShareTotalNumber)
  return largeshareholderssharetotalnumber_;
}
void ADChipDistribution::set_largeshareholderssharetotalnumber(::google::protobuf::int64 value) {
  
  largeshareholderssharetotalnumber_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.LargeShareholdersShareTotalNumber)
}

// optional int64 LargeShareholdersSharePercent = 55;
void ADChipDistribution::clear_largeshareholderssharepercent() {
  largeshareholderssharepercent_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADChipDistribution::largeshareholderssharepercent() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.LargeShareholdersSharePercent)
  return largeshareholderssharepercent_;
}
void ADChipDistribution::set_largeshareholderssharepercent(::google::protobuf::int64 value) {
  
  largeshareholderssharepercent_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.LargeShareholdersSharePercent)
}

// optional int32 DataMultiplePowerOf10 = 56;
void ADChipDistribution::clear_datamultiplepowerof10() {
  datamultiplepowerof10_ = 0;
}
::google::protobuf::int32 ADChipDistribution::datamultiplepowerof10() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistribution.DataMultiplePowerOf10)
  return datamultiplepowerof10_;
}
void ADChipDistribution::set_datamultiplepowerof10(::google::protobuf::int32 value) {
  
  datamultiplepowerof10_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistribution.DataMultiplePowerOf10)
}

inline const ADChipDistribution* ADChipDistribution::internal_default_instance() {
  return &ADChipDistribution_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADChipDistributionDetail::kPriceFieldNumber;
const int ADChipDistributionDetail::kNumberOfSharesFieldNumber;
const int ADChipDistributionDetail::kNumberOfSharesPercentFieldNumber;
const int ADChipDistributionDetail::kListedDateFieldNumber;
const int ADChipDistributionDetail::kShareHolderNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADChipDistributionDetail::ADChipDistributionDetail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ADChipDistribution_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.htsc.mdc.insight.model.ADChipDistributionDetail)
}

void ADChipDistributionDetail::InitAsDefaultInstance() {
}

ADChipDistributionDetail::ADChipDistributionDetail(const ADChipDistributionDetail& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.htsc.mdc.insight.model.ADChipDistributionDetail)
}

void ADChipDistributionDetail::SharedCtor() {
  shareholdername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&price_, 0, reinterpret_cast<char*>(&listeddate_) -
    reinterpret_cast<char*>(&price_) + sizeof(listeddate_));
  _cached_size_ = 0;
}

ADChipDistributionDetail::~ADChipDistributionDetail() {
  // @@protoc_insertion_point(destructor:com.htsc.mdc.insight.model.ADChipDistributionDetail)
  SharedDtor();
}

void ADChipDistributionDetail::SharedDtor() {
  shareholdername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ADChipDistributionDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ADChipDistributionDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ADChipDistributionDetail_descriptor_;
}

const ADChipDistributionDetail& ADChipDistributionDetail::default_instance() {
  protobuf_InitDefaults_ADChipDistribution_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ADChipDistributionDetail> ADChipDistributionDetail_default_instance_;

ADChipDistributionDetail* ADChipDistributionDetail::New(::google::protobuf::Arena* arena) const {
  ADChipDistributionDetail* n = new ADChipDistributionDetail;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ADChipDistributionDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:com.htsc.mdc.insight.model.ADChipDistributionDetail)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ADChipDistributionDetail, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ADChipDistributionDetail*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(price_, listeddate_);
  shareholdername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool ADChipDistributionDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.htsc.mdc.insight.model.ADChipDistributionDetail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 Price = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_NumberOfShares;
        break;
      }

      // optional int64 NumberOfShares = 2;
      case 2: {
        if (tag == 16) {
         parse_NumberOfShares:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &numberofshares_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_NumberOfSharesPercent;
        break;
      }

      // optional int64 NumberOfSharesPercent = 3;
      case 3: {
        if (tag == 24) {
         parse_NumberOfSharesPercent:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &numberofsharespercent_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ListedDate;
        break;
      }

      // optional int64 ListedDate = 4;
      case 4: {
        if (tag == 32) {
         parse_ListedDate:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &listeddate_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ShareHolderName;
        break;
      }

      // optional string ShareHolderName = 5;
      case 5: {
        if (tag == 42) {
         parse_ShareHolderName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shareholdername()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->shareholdername().data(), this->shareholdername().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.htsc.mdc.insight.model.ADChipDistributionDetail.ShareHolderName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.htsc.mdc.insight.model.ADChipDistributionDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.htsc.mdc.insight.model.ADChipDistributionDetail)
  return false;
#undef DO_
}

void ADChipDistributionDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.htsc.mdc.insight.model.ADChipDistributionDetail)
  // optional int64 Price = 1;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->price(), output);
  }

  // optional int64 NumberOfShares = 2;
  if (this->numberofshares() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->numberofshares(), output);
  }

  // optional int64 NumberOfSharesPercent = 3;
  if (this->numberofsharespercent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->numberofsharespercent(), output);
  }

  // optional int64 ListedDate = 4;
  if (this->listeddate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->listeddate(), output);
  }

  // optional string ShareHolderName = 5;
  if (this->shareholdername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->shareholdername().data(), this->shareholdername().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADChipDistributionDetail.ShareHolderName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->shareholdername(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.htsc.mdc.insight.model.ADChipDistributionDetail)
}

::google::protobuf::uint8* ADChipDistributionDetail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.htsc.mdc.insight.model.ADChipDistributionDetail)
  // optional int64 Price = 1;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->price(), target);
  }

  // optional int64 NumberOfShares = 2;
  if (this->numberofshares() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->numberofshares(), target);
  }

  // optional int64 NumberOfSharesPercent = 3;
  if (this->numberofsharespercent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->numberofsharespercent(), target);
  }

  // optional int64 ListedDate = 4;
  if (this->listeddate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->listeddate(), target);
  }

  // optional string ShareHolderName = 5;
  if (this->shareholdername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->shareholdername().data(), this->shareholdername().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.htsc.mdc.insight.model.ADChipDistributionDetail.ShareHolderName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->shareholdername(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.htsc.mdc.insight.model.ADChipDistributionDetail)
  return target;
}

size_t ADChipDistributionDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.htsc.mdc.insight.model.ADChipDistributionDetail)
  size_t total_size = 0;

  // optional int64 Price = 1;
  if (this->price() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->price());
  }

  // optional int64 NumberOfShares = 2;
  if (this->numberofshares() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->numberofshares());
  }

  // optional int64 NumberOfSharesPercent = 3;
  if (this->numberofsharespercent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->numberofsharespercent());
  }

  // optional int64 ListedDate = 4;
  if (this->listeddate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->listeddate());
  }

  // optional string ShareHolderName = 5;
  if (this->shareholdername().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->shareholdername());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ADChipDistributionDetail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.htsc.mdc.insight.model.ADChipDistributionDetail)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ADChipDistributionDetail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ADChipDistributionDetail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.htsc.mdc.insight.model.ADChipDistributionDetail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.htsc.mdc.insight.model.ADChipDistributionDetail)
    UnsafeMergeFrom(*source);
  }
}

void ADChipDistributionDetail::MergeFrom(const ADChipDistributionDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.htsc.mdc.insight.model.ADChipDistributionDetail)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ADChipDistributionDetail::UnsafeMergeFrom(const ADChipDistributionDetail& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.numberofshares() != 0) {
    set_numberofshares(from.numberofshares());
  }
  if (from.numberofsharespercent() != 0) {
    set_numberofsharespercent(from.numberofsharespercent());
  }
  if (from.listeddate() != 0) {
    set_listeddate(from.listeddate());
  }
  if (from.shareholdername().size() > 0) {

    shareholdername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shareholdername_);
  }
}

void ADChipDistributionDetail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.htsc.mdc.insight.model.ADChipDistributionDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADChipDistributionDetail::CopyFrom(const ADChipDistributionDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.htsc.mdc.insight.model.ADChipDistributionDetail)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ADChipDistributionDetail::IsInitialized() const {

  return true;
}

void ADChipDistributionDetail::Swap(ADChipDistributionDetail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADChipDistributionDetail::InternalSwap(ADChipDistributionDetail* other) {
  std::swap(price_, other->price_);
  std::swap(numberofshares_, other->numberofshares_);
  std::swap(numberofsharespercent_, other->numberofsharespercent_);
  std::swap(listeddate_, other->listeddate_);
  shareholdername_.Swap(&other->shareholdername_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ADChipDistributionDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ADChipDistributionDetail_descriptor_;
  metadata.reflection = ADChipDistributionDetail_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ADChipDistributionDetail

// optional int64 Price = 1;
void ADChipDistributionDetail::clear_price() {
  price_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADChipDistributionDetail::price() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistributionDetail.Price)
  return price_;
}
void ADChipDistributionDetail::set_price(::google::protobuf::int64 value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistributionDetail.Price)
}

// optional int64 NumberOfShares = 2;
void ADChipDistributionDetail::clear_numberofshares() {
  numberofshares_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADChipDistributionDetail::numberofshares() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistributionDetail.NumberOfShares)
  return numberofshares_;
}
void ADChipDistributionDetail::set_numberofshares(::google::protobuf::int64 value) {
  
  numberofshares_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistributionDetail.NumberOfShares)
}

// optional int64 NumberOfSharesPercent = 3;
void ADChipDistributionDetail::clear_numberofsharespercent() {
  numberofsharespercent_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADChipDistributionDetail::numberofsharespercent() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistributionDetail.NumberOfSharesPercent)
  return numberofsharespercent_;
}
void ADChipDistributionDetail::set_numberofsharespercent(::google::protobuf::int64 value) {
  
  numberofsharespercent_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistributionDetail.NumberOfSharesPercent)
}

// optional int64 ListedDate = 4;
void ADChipDistributionDetail::clear_listeddate() {
  listeddate_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ADChipDistributionDetail::listeddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistributionDetail.ListedDate)
  return listeddate_;
}
void ADChipDistributionDetail::set_listeddate(::google::protobuf::int64 value) {
  
  listeddate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistributionDetail.ListedDate)
}

// optional string ShareHolderName = 5;
void ADChipDistributionDetail::clear_shareholdername() {
  shareholdername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ADChipDistributionDetail::shareholdername() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADChipDistributionDetail.ShareHolderName)
  return shareholdername_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ADChipDistributionDetail::set_shareholdername(const ::std::string& value) {
  
  shareholdername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADChipDistributionDetail.ShareHolderName)
}
void ADChipDistributionDetail::set_shareholdername(const char* value) {
  
  shareholdername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.ADChipDistributionDetail.ShareHolderName)
}
void ADChipDistributionDetail::set_shareholdername(const char* value, size_t size) {
  
  shareholdername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.ADChipDistributionDetail.ShareHolderName)
}
::std::string* ADChipDistributionDetail::mutable_shareholdername() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADChipDistributionDetail.ShareHolderName)
  return shareholdername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ADChipDistributionDetail::release_shareholdername() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADChipDistributionDetail.ShareHolderName)
  
  return shareholdername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ADChipDistributionDetail::set_allocated_shareholdername(::std::string* shareholdername) {
  if (shareholdername != NULL) {
    
  } else {
    
  }
  shareholdername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), shareholdername);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADChipDistributionDetail.ShareHolderName)
}

inline const ADChipDistributionDetail* ADChipDistributionDetail::internal_default_instance() {
  return &ADChipDistributionDetail_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)
