// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ADNews.proto

#ifndef PROTOBUF_ADNews_2eproto__INCLUDED
#define PROTOBUF_ADNews_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ESecurityType.pb.h"
#include "ESecurityIDSource.pb.h"
// @@protoc_insertion_point(includes)

namespace com {
namespace htsc {
namespace mdc {
namespace insight {
namespace model {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ADNews_2eproto();
void protobuf_InitDefaults_ADNews_2eproto();
void protobuf_AssignDesc_ADNews_2eproto();
void protobuf_ShutdownFile_ADNews_2eproto();

class ADInvolvedSecurity;
class ADNews;
class ADNewsEmotion;
class ADRelatedCompany;
class ADRelatedPerson;

// ===================================================================

class ADNews : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.ADNews) */ {
 public:
  ADNews();
  virtual ~ADNews();

  ADNews(const ADNews& from);

  inline ADNews& operator=(const ADNews& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ADNews& default_instance();

  static const ADNews* internal_default_instance();

  void Swap(ADNews* other);

  // implements Message ----------------------------------------------

  inline ADNews* New() const { return New(NULL); }

  ADNews* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ADNews& from);
  void MergeFrom(const ADNews& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ADNews* other);
  void UnsafeMergeFrom(const ADNews& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string HTSCSecurityID = 1;
  void clear_htscsecurityid();
  static const int kHTSCSecurityIDFieldNumber = 1;
  const ::std::string& htscsecurityid() const;
  void set_htscsecurityid(const ::std::string& value);
  void set_htscsecurityid(const char* value);
  void set_htscsecurityid(const char* value, size_t size);
  ::std::string* mutable_htscsecurityid();
  ::std::string* release_htscsecurityid();
  void set_allocated_htscsecurityid(::std::string* htscsecurityid);

  // optional int32 MDDate = 2;
  void clear_mddate();
  static const int kMDDateFieldNumber = 2;
  ::google::protobuf::int32 mddate() const;
  void set_mddate(::google::protobuf::int32 value);

  // optional int32 MDTime = 3;
  void clear_mdtime();
  static const int kMDTimeFieldNumber = 3;
  ::google::protobuf::int32 mdtime() const;
  void set_mdtime(::google::protobuf::int32 value);

  // optional int64 DataTimestamp = 4;
  void clear_datatimestamp();
  static const int kDataTimestampFieldNumber = 4;
  ::google::protobuf::int64 datatimestamp() const;
  void set_datatimestamp(::google::protobuf::int64 value);

  // optional string TradingPhaseCode = 5;
  void clear_tradingphasecode();
  static const int kTradingPhaseCodeFieldNumber = 5;
  const ::std::string& tradingphasecode() const;
  void set_tradingphasecode(const ::std::string& value);
  void set_tradingphasecode(const char* value);
  void set_tradingphasecode(const char* value, size_t size);
  ::std::string* mutable_tradingphasecode();
  ::std::string* release_tradingphasecode();
  void set_allocated_tradingphasecode(::std::string* tradingphasecode);

  // optional .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
  void clear_securityidsource();
  static const int kSecurityIDSourceFieldNumber = 6;
  ::com::htsc::mdc::model::ESecurityIDSource securityidsource() const;
  void set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value);

  // optional .com.htsc.mdc.model.ESecurityType securityType = 7;
  void clear_securitytype();
  static const int kSecurityTypeFieldNumber = 7;
  ::com::htsc::mdc::model::ESecurityType securitytype() const;
  void set_securitytype(::com::htsc::mdc::model::ESecurityType value);

  // optional string author = 8;
  void clear_author();
  static const int kAuthorFieldNumber = 8;
  const ::std::string& author() const;
  void set_author(const ::std::string& value);
  void set_author(const char* value);
  void set_author(const char* value, size_t size);
  ::std::string* mutable_author();
  ::std::string* release_author();
  void set_allocated_author(::std::string* author);

  // optional string content = 9;
  void clear_content();
  static const int kContentFieldNumber = 9;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // optional string eventCat = 10;
  void clear_eventcat();
  static const int kEventCatFieldNumber = 10;
  const ::std::string& eventcat() const;
  void set_eventcat(const ::std::string& value);
  void set_eventcat(const char* value);
  void set_eventcat(const char* value, size_t size);
  ::std::string* mutable_eventcat();
  ::std::string* release_eventcat();
  void set_allocated_eventcat(::std::string* eventcat);

  // optional string eventName = 11;
  void clear_eventname();
  static const int kEventNameFieldNumber = 11;
  const ::std::string& eventname() const;
  void set_eventname(const ::std::string& value);
  void set_eventname(const char* value);
  void set_eventname(const char* value, size_t size);
  ::std::string* mutable_eventname();
  ::std::string* release_eventname();
  void set_allocated_eventname(::std::string* eventname);

  // optional int32 eventPos = 12;
  void clear_eventpos();
  static const int kEventPosFieldNumber = 12;
  ::google::protobuf::int32 eventpos() const;
  void set_eventpos(::google::protobuf::int32 value);

  // optional string id = 13;
  void clear_id();
  static const int kIdFieldNumber = 13;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string industry = 14;
  void clear_industry();
  static const int kIndustryFieldNumber = 14;
  const ::std::string& industry() const;
  void set_industry(const ::std::string& value);
  void set_industry(const char* value);
  void set_industry(const char* value, size_t size);
  ::std::string* mutable_industry();
  ::std::string* release_industry();
  void set_allocated_industry(::std::string* industry);

  // optional double newsHot = 15;
  void clear_newshot();
  static const int kNewsHotFieldNumber = 15;
  double newshot() const;
  void set_newshot(double value);

  // optional string newsTime = 16;
  void clear_newstime();
  static const int kNewsTimeFieldNumber = 16;
  const ::std::string& newstime() const;
  void set_newstime(const ::std::string& value);
  void set_newstime(const char* value);
  void set_newstime(const char* value, size_t size);
  ::std::string* mutable_newstime();
  ::std::string* release_newstime();
  void set_allocated_newstime(::std::string* newstime);

  // optional string summ = 17;
  void clear_summ();
  static const int kSummFieldNumber = 17;
  const ::std::string& summ() const;
  void set_summ(const ::std::string& value);
  void set_summ(const char* value);
  void set_summ(const char* value, size_t size);
  ::std::string* mutable_summ();
  ::std::string* release_summ();
  void set_allocated_summ(::std::string* summ);

  // optional string title = 18;
  void clear_title();
  static const int kTitleFieldNumber = 18;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string url = 19;
  void clear_url();
  static const int kUrlFieldNumber = 19;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional .com.htsc.mdc.insight.model.ADNewsEmotion newsEmotion = 20;
  bool has_newsemotion() const;
  void clear_newsemotion();
  static const int kNewsEmotionFieldNumber = 20;
  const ::com::htsc::mdc::insight::model::ADNewsEmotion& newsemotion() const;
  ::com::htsc::mdc::insight::model::ADNewsEmotion* mutable_newsemotion();
  ::com::htsc::mdc::insight::model::ADNewsEmotion* release_newsemotion();
  void set_allocated_newsemotion(::com::htsc::mdc::insight::model::ADNewsEmotion* newsemotion);

  // repeated .com.htsc.mdc.insight.model.ADInvolvedSecurity secuList = 21;
  int seculist_size() const;
  void clear_seculist();
  static const int kSecuListFieldNumber = 21;
  const ::com::htsc::mdc::insight::model::ADInvolvedSecurity& seculist(int index) const;
  ::com::htsc::mdc::insight::model::ADInvolvedSecurity* mutable_seculist(int index);
  ::com::htsc::mdc::insight::model::ADInvolvedSecurity* add_seculist();
  ::google::protobuf::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADInvolvedSecurity >*
      mutable_seculist();
  const ::google::protobuf::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADInvolvedSecurity >&
      seculist() const;

  // repeated .com.htsc.mdc.insight.model.ADRelatedPerson perEmList = 22;
  int peremlist_size() const;
  void clear_peremlist();
  static const int kPerEmListFieldNumber = 22;
  const ::com::htsc::mdc::insight::model::ADRelatedPerson& peremlist(int index) const;
  ::com::htsc::mdc::insight::model::ADRelatedPerson* mutable_peremlist(int index);
  ::com::htsc::mdc::insight::model::ADRelatedPerson* add_peremlist();
  ::google::protobuf::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADRelatedPerson >*
      mutable_peremlist();
  const ::google::protobuf::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADRelatedPerson >&
      peremlist() const;

  // repeated .com.htsc.mdc.insight.model.ADRelatedCompany comEmList = 23;
  int comemlist_size() const;
  void clear_comemlist();
  static const int kComEmListFieldNumber = 23;
  const ::com::htsc::mdc::insight::model::ADRelatedCompany& comemlist(int index) const;
  ::com::htsc::mdc::insight::model::ADRelatedCompany* mutable_comemlist(int index);
  ::com::htsc::mdc::insight::model::ADRelatedCompany* add_comemlist();
  ::google::protobuf::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADRelatedCompany >*
      mutable_comemlist();
  const ::google::protobuf::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADRelatedCompany >&
      comemlist() const;

  // optional int32 DataMultiplePowerOf10 = 24;
  void clear_datamultiplepowerof10();
  static const int kDataMultiplePowerOf10FieldNumber = 24;
  ::google::protobuf::int32 datamultiplepowerof10() const;
  void set_datamultiplepowerof10(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.ADNews)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADInvolvedSecurity > seculist_;
  ::google::protobuf::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADRelatedPerson > peremlist_;
  ::google::protobuf::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADRelatedCompany > comemlist_;
  ::google::protobuf::internal::ArenaStringPtr htscsecurityid_;
  ::google::protobuf::internal::ArenaStringPtr tradingphasecode_;
  ::google::protobuf::internal::ArenaStringPtr author_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::internal::ArenaStringPtr eventcat_;
  ::google::protobuf::internal::ArenaStringPtr eventname_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr industry_;
  ::google::protobuf::internal::ArenaStringPtr newstime_;
  ::google::protobuf::internal::ArenaStringPtr summ_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::com::htsc::mdc::insight::model::ADNewsEmotion* newsemotion_;
  ::google::protobuf::int32 mddate_;
  ::google::protobuf::int32 mdtime_;
  ::google::protobuf::int64 datatimestamp_;
  int securityidsource_;
  int securitytype_;
  double newshot_;
  ::google::protobuf::int32 eventpos_;
  ::google::protobuf::int32 datamultiplepowerof10_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_ADNews_2eproto_impl();
  friend void  protobuf_AddDesc_ADNews_2eproto_impl();
  friend void protobuf_AssignDesc_ADNews_2eproto();
  friend void protobuf_ShutdownFile_ADNews_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ADNews> ADNews_default_instance_;

// -------------------------------------------------------------------

class ADNewsEmotion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.ADNewsEmotion) */ {
 public:
  ADNewsEmotion();
  virtual ~ADNewsEmotion();

  ADNewsEmotion(const ADNewsEmotion& from);

  inline ADNewsEmotion& operator=(const ADNewsEmotion& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ADNewsEmotion& default_instance();

  static const ADNewsEmotion* internal_default_instance();

  void Swap(ADNewsEmotion* other);

  // implements Message ----------------------------------------------

  inline ADNewsEmotion* New() const { return New(NULL); }

  ADNewsEmotion* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ADNewsEmotion& from);
  void MergeFrom(const ADNewsEmotion& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ADNewsEmotion* other);
  void UnsafeMergeFrom(const ADNewsEmotion& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double negative = 1;
  void clear_negative();
  static const int kNegativeFieldNumber = 1;
  double negative() const;
  void set_negative(double value);

  // optional double neutral = 2;
  void clear_neutral();
  static const int kNeutralFieldNumber = 2;
  double neutral() const;
  void set_neutral(double value);

  // optional int32 pos = 3;
  void clear_pos();
  static const int kPosFieldNumber = 3;
  ::google::protobuf::int32 pos() const;
  void set_pos(::google::protobuf::int32 value);

  // optional double positive = 4;
  void clear_positive();
  static const int kPositiveFieldNumber = 4;
  double positive() const;
  void set_positive(double value);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.ADNewsEmotion)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double negative_;
  double neutral_;
  double positive_;
  ::google::protobuf::int32 pos_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_ADNews_2eproto_impl();
  friend void  protobuf_AddDesc_ADNews_2eproto_impl();
  friend void protobuf_AssignDesc_ADNews_2eproto();
  friend void protobuf_ShutdownFile_ADNews_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ADNewsEmotion> ADNewsEmotion_default_instance_;

// -------------------------------------------------------------------

class ADInvolvedSecurity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.ADInvolvedSecurity) */ {
 public:
  ADInvolvedSecurity();
  virtual ~ADInvolvedSecurity();

  ADInvolvedSecurity(const ADInvolvedSecurity& from);

  inline ADInvolvedSecurity& operator=(const ADInvolvedSecurity& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ADInvolvedSecurity& default_instance();

  static const ADInvolvedSecurity* internal_default_instance();

  void Swap(ADInvolvedSecurity* other);

  // implements Message ----------------------------------------------

  inline ADInvolvedSecurity* New() const { return New(NULL); }

  ADInvolvedSecurity* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ADInvolvedSecurity& from);
  void MergeFrom(const ADInvolvedSecurity& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ADInvolvedSecurity* other);
  void UnsafeMergeFrom(const ADInvolvedSecurity& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string comCode = 1;
  void clear_comcode();
  static const int kComCodeFieldNumber = 1;
  const ::std::string& comcode() const;
  void set_comcode(const ::std::string& value);
  void set_comcode(const char* value);
  void set_comcode(const char* value, size_t size);
  ::std::string* mutable_comcode();
  ::std::string* release_comcode();
  void set_allocated_comcode(::std::string* comcode);

  // optional string secuCode = 2;
  void clear_secucode();
  static const int kSecuCodeFieldNumber = 2;
  const ::std::string& secucode() const;
  void set_secucode(const ::std::string& value);
  void set_secucode(const char* value);
  void set_secucode(const char* value, size_t size);
  ::std::string* mutable_secucode();
  ::std::string* release_secucode();
  void set_allocated_secucode(::std::string* secucode);

  // optional string secuName = 3;
  void clear_secuname();
  static const int kSecuNameFieldNumber = 3;
  const ::std::string& secuname() const;
  void set_secuname(const ::std::string& value);
  void set_secuname(const char* value);
  void set_secuname(const char* value, size_t size);
  ::std::string* mutable_secuname();
  ::std::string* release_secuname();
  void set_allocated_secuname(::std::string* secuname);

  // optional string HTSCSecurityID = 4;
  void clear_htscsecurityid();
  static const int kHTSCSecurityIDFieldNumber = 4;
  const ::std::string& htscsecurityid() const;
  void set_htscsecurityid(const ::std::string& value);
  void set_htscsecurityid(const char* value);
  void set_htscsecurityid(const char* value, size_t size);
  ::std::string* mutable_htscsecurityid();
  ::std::string* release_htscsecurityid();
  void set_allocated_htscsecurityid(::std::string* htscsecurityid);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.ADInvolvedSecurity)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr comcode_;
  ::google::protobuf::internal::ArenaStringPtr secucode_;
  ::google::protobuf::internal::ArenaStringPtr secuname_;
  ::google::protobuf::internal::ArenaStringPtr htscsecurityid_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_ADNews_2eproto_impl();
  friend void  protobuf_AddDesc_ADNews_2eproto_impl();
  friend void protobuf_AssignDesc_ADNews_2eproto();
  friend void protobuf_ShutdownFile_ADNews_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ADInvolvedSecurity> ADInvolvedSecurity_default_instance_;

// -------------------------------------------------------------------

class ADRelatedCompany : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.ADRelatedCompany) */ {
 public:
  ADRelatedCompany();
  virtual ~ADRelatedCompany();

  ADRelatedCompany(const ADRelatedCompany& from);

  inline ADRelatedCompany& operator=(const ADRelatedCompany& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ADRelatedCompany& default_instance();

  static const ADRelatedCompany* internal_default_instance();

  void Swap(ADRelatedCompany* other);

  // implements Message ----------------------------------------------

  inline ADRelatedCompany* New() const { return New(NULL); }

  ADRelatedCompany* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ADRelatedCompany& from);
  void MergeFrom(const ADRelatedCompany& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ADRelatedCompany* other);
  void UnsafeMergeFrom(const ADRelatedCompany& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string chiname = 1;
  void clear_chiname();
  static const int kChinameFieldNumber = 1;
  const ::std::string& chiname() const;
  void set_chiname(const ::std::string& value);
  void set_chiname(const char* value);
  void set_chiname(const char* value, size_t size);
  ::std::string* mutable_chiname();
  ::std::string* release_chiname();
  void set_allocated_chiname(::std::string* chiname);

  // optional string comCode = 2;
  void clear_comcode();
  static const int kComCodeFieldNumber = 2;
  const ::std::string& comcode() const;
  void set_comcode(const ::std::string& value);
  void set_comcode(const char* value);
  void set_comcode(const char* value, size_t size);
  ::std::string* mutable_comcode();
  ::std::string* release_comcode();
  void set_allocated_comcode(::std::string* comcode);

  // optional string com = 3;
  void clear_com();
  static const int kComFieldNumber = 3;
  const ::std::string& com() const;
  void set_com(const ::std::string& value);
  void set_com(const char* value);
  void set_com(const char* value, size_t size);
  ::std::string* mutable_com();
  ::std::string* release_com();
  void set_allocated_com(::std::string* com);

  // optional int32 generalPos = 4;
  void clear_generalpos();
  static const int kGeneralPosFieldNumber = 4;
  ::google::protobuf::int32 generalpos() const;
  void set_generalpos(::google::protobuf::int32 value);

  // optional string secuCode = 5;
  void clear_secucode();
  static const int kSecuCodeFieldNumber = 5;
  const ::std::string& secucode() const;
  void set_secucode(const ::std::string& value);
  void set_secucode(const char* value);
  void set_secucode(const char* value, size_t size);
  ::std::string* mutable_secucode();
  ::std::string* release_secucode();
  void set_allocated_secucode(::std::string* secucode);

  // optional string HTSCSecurityID = 6;
  void clear_htscsecurityid();
  static const int kHTSCSecurityIDFieldNumber = 6;
  const ::std::string& htscsecurityid() const;
  void set_htscsecurityid(const ::std::string& value);
  void set_htscsecurityid(const char* value);
  void set_htscsecurityid(const char* value, size_t size);
  ::std::string* mutable_htscsecurityid();
  ::std::string* release_htscsecurityid();
  void set_allocated_htscsecurityid(::std::string* htscsecurityid);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.ADRelatedCompany)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr chiname_;
  ::google::protobuf::internal::ArenaStringPtr comcode_;
  ::google::protobuf::internal::ArenaStringPtr com_;
  ::google::protobuf::internal::ArenaStringPtr secucode_;
  ::google::protobuf::internal::ArenaStringPtr htscsecurityid_;
  ::google::protobuf::int32 generalpos_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_ADNews_2eproto_impl();
  friend void  protobuf_AddDesc_ADNews_2eproto_impl();
  friend void protobuf_AssignDesc_ADNews_2eproto();
  friend void protobuf_ShutdownFile_ADNews_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ADRelatedCompany> ADRelatedCompany_default_instance_;

// -------------------------------------------------------------------

class ADRelatedPerson : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.htsc.mdc.insight.model.ADRelatedPerson) */ {
 public:
  ADRelatedPerson();
  virtual ~ADRelatedPerson();

  ADRelatedPerson(const ADRelatedPerson& from);

  inline ADRelatedPerson& operator=(const ADRelatedPerson& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ADRelatedPerson& default_instance();

  static const ADRelatedPerson* internal_default_instance();

  void Swap(ADRelatedPerson* other);

  // implements Message ----------------------------------------------

  inline ADRelatedPerson* New() const { return New(NULL); }

  ADRelatedPerson* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ADRelatedPerson& from);
  void MergeFrom(const ADRelatedPerson& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ADRelatedPerson* other);
  void UnsafeMergeFrom(const ADRelatedPerson& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string per = 1;
  void clear_per();
  static const int kPerFieldNumber = 1;
  const ::std::string& per() const;
  void set_per(const ::std::string& value);
  void set_per(const char* value);
  void set_per(const char* value, size_t size);
  ::std::string* mutable_per();
  ::std::string* release_per();
  void set_allocated_per(::std::string* per);

  // optional string comCode = 2;
  void clear_comcode();
  static const int kComCodeFieldNumber = 2;
  const ::std::string& comcode() const;
  void set_comcode(const ::std::string& value);
  void set_comcode(const char* value);
  void set_comcode(const char* value, size_t size);
  ::std::string* mutable_comcode();
  ::std::string* release_comcode();
  void set_allocated_comcode(::std::string* comcode);

  // optional string com = 3;
  void clear_com();
  static const int kComFieldNumber = 3;
  const ::std::string& com() const;
  void set_com(const ::std::string& value);
  void set_com(const char* value);
  void set_com(const char* value, size_t size);
  ::std::string* mutable_com();
  ::std::string* release_com();
  void set_allocated_com(::std::string* com);

  // optional int32 generalPos = 4;
  void clear_generalpos();
  static const int kGeneralPosFieldNumber = 4;
  ::google::protobuf::int32 generalpos() const;
  void set_generalpos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.htsc.mdc.insight.model.ADRelatedPerson)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr per_;
  ::google::protobuf::internal::ArenaStringPtr comcode_;
  ::google::protobuf::internal::ArenaStringPtr com_;
  ::google::protobuf::int32 generalpos_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_ADNews_2eproto_impl();
  friend void  protobuf_AddDesc_ADNews_2eproto_impl();
  friend void protobuf_AssignDesc_ADNews_2eproto();
  friend void protobuf_ShutdownFile_ADNews_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ADRelatedPerson> ADRelatedPerson_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ADNews

// optional string HTSCSecurityID = 1;
inline void ADNews::clear_htscsecurityid() {
  htscsecurityid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ADNews::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNews.HTSCSecurityID)
  return htscsecurityid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADNews::set_htscsecurityid(const ::std::string& value) {
  
  htscsecurityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNews.HTSCSecurityID)
}
inline void ADNews::set_htscsecurityid(const char* value) {
  
  htscsecurityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.ADNews.HTSCSecurityID)
}
inline void ADNews::set_htscsecurityid(const char* value, size_t size) {
  
  htscsecurityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.ADNews.HTSCSecurityID)
}
inline ::std::string* ADNews::mutable_htscsecurityid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADNews.HTSCSecurityID)
  return htscsecurityid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ADNews::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADNews.HTSCSecurityID)
  
  return htscsecurityid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADNews::set_allocated_htscsecurityid(::std::string* htscsecurityid) {
  if (htscsecurityid != NULL) {
    
  } else {
    
  }
  htscsecurityid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), htscsecurityid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADNews.HTSCSecurityID)
}

// optional int32 MDDate = 2;
inline void ADNews::clear_mddate() {
  mddate_ = 0;
}
inline ::google::protobuf::int32 ADNews::mddate() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNews.MDDate)
  return mddate_;
}
inline void ADNews::set_mddate(::google::protobuf::int32 value) {
  
  mddate_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNews.MDDate)
}

// optional int32 MDTime = 3;
inline void ADNews::clear_mdtime() {
  mdtime_ = 0;
}
inline ::google::protobuf::int32 ADNews::mdtime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNews.MDTime)
  return mdtime_;
}
inline void ADNews::set_mdtime(::google::protobuf::int32 value) {
  
  mdtime_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNews.MDTime)
}

// optional int64 DataTimestamp = 4;
inline void ADNews::clear_datatimestamp() {
  datatimestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ADNews::datatimestamp() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNews.DataTimestamp)
  return datatimestamp_;
}
inline void ADNews::set_datatimestamp(::google::protobuf::int64 value) {
  
  datatimestamp_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNews.DataTimestamp)
}

// optional string TradingPhaseCode = 5;
inline void ADNews::clear_tradingphasecode() {
  tradingphasecode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ADNews::tradingphasecode() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNews.TradingPhaseCode)
  return tradingphasecode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADNews::set_tradingphasecode(const ::std::string& value) {
  
  tradingphasecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNews.TradingPhaseCode)
}
inline void ADNews::set_tradingphasecode(const char* value) {
  
  tradingphasecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.ADNews.TradingPhaseCode)
}
inline void ADNews::set_tradingphasecode(const char* value, size_t size) {
  
  tradingphasecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.ADNews.TradingPhaseCode)
}
inline ::std::string* ADNews::mutable_tradingphasecode() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADNews.TradingPhaseCode)
  return tradingphasecode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ADNews::release_tradingphasecode() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADNews.TradingPhaseCode)
  
  return tradingphasecode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADNews::set_allocated_tradingphasecode(::std::string* tradingphasecode) {
  if (tradingphasecode != NULL) {
    
  } else {
    
  }
  tradingphasecode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradingphasecode);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADNews.TradingPhaseCode)
}

// optional .com.htsc.mdc.model.ESecurityIDSource securityIDSource = 6;
inline void ADNews::clear_securityidsource() {
  securityidsource_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityIDSource ADNews::securityidsource() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNews.securityIDSource)
  return static_cast< ::com::htsc::mdc::model::ESecurityIDSource >(securityidsource_);
}
inline void ADNews::set_securityidsource(::com::htsc::mdc::model::ESecurityIDSource value) {
  
  securityidsource_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNews.securityIDSource)
}

// optional .com.htsc.mdc.model.ESecurityType securityType = 7;
inline void ADNews::clear_securitytype() {
  securitytype_ = 0;
}
inline ::com::htsc::mdc::model::ESecurityType ADNews::securitytype() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNews.securityType)
  return static_cast< ::com::htsc::mdc::model::ESecurityType >(securitytype_);
}
inline void ADNews::set_securitytype(::com::htsc::mdc::model::ESecurityType value) {
  
  securitytype_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNews.securityType)
}

// optional string author = 8;
inline void ADNews::clear_author() {
  author_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ADNews::author() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNews.author)
  return author_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADNews::set_author(const ::std::string& value) {
  
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNews.author)
}
inline void ADNews::set_author(const char* value) {
  
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.ADNews.author)
}
inline void ADNews::set_author(const char* value, size_t size) {
  
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.ADNews.author)
}
inline ::std::string* ADNews::mutable_author() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADNews.author)
  return author_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ADNews::release_author() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADNews.author)
  
  return author_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADNews::set_allocated_author(::std::string* author) {
  if (author != NULL) {
    
  } else {
    
  }
  author_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), author);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADNews.author)
}

// optional string content = 9;
inline void ADNews::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ADNews::content() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNews.content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADNews::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNews.content)
}
inline void ADNews::set_content(const char* value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.ADNews.content)
}
inline void ADNews::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.ADNews.content)
}
inline ::std::string* ADNews::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADNews.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ADNews::release_content() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADNews.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADNews::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADNews.content)
}

// optional string eventCat = 10;
inline void ADNews::clear_eventcat() {
  eventcat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ADNews::eventcat() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNews.eventCat)
  return eventcat_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADNews::set_eventcat(const ::std::string& value) {
  
  eventcat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNews.eventCat)
}
inline void ADNews::set_eventcat(const char* value) {
  
  eventcat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.ADNews.eventCat)
}
inline void ADNews::set_eventcat(const char* value, size_t size) {
  
  eventcat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.ADNews.eventCat)
}
inline ::std::string* ADNews::mutable_eventcat() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADNews.eventCat)
  return eventcat_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ADNews::release_eventcat() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADNews.eventCat)
  
  return eventcat_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADNews::set_allocated_eventcat(::std::string* eventcat) {
  if (eventcat != NULL) {
    
  } else {
    
  }
  eventcat_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), eventcat);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADNews.eventCat)
}

// optional string eventName = 11;
inline void ADNews::clear_eventname() {
  eventname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ADNews::eventname() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNews.eventName)
  return eventname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADNews::set_eventname(const ::std::string& value) {
  
  eventname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNews.eventName)
}
inline void ADNews::set_eventname(const char* value) {
  
  eventname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.ADNews.eventName)
}
inline void ADNews::set_eventname(const char* value, size_t size) {
  
  eventname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.ADNews.eventName)
}
inline ::std::string* ADNews::mutable_eventname() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADNews.eventName)
  return eventname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ADNews::release_eventname() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADNews.eventName)
  
  return eventname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADNews::set_allocated_eventname(::std::string* eventname) {
  if (eventname != NULL) {
    
  } else {
    
  }
  eventname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), eventname);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADNews.eventName)
}

// optional int32 eventPos = 12;
inline void ADNews::clear_eventpos() {
  eventpos_ = 0;
}
inline ::google::protobuf::int32 ADNews::eventpos() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNews.eventPos)
  return eventpos_;
}
inline void ADNews::set_eventpos(::google::protobuf::int32 value) {
  
  eventpos_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNews.eventPos)
}

// optional string id = 13;
inline void ADNews::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ADNews::id() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNews.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADNews::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNews.id)
}
inline void ADNews::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.ADNews.id)
}
inline void ADNews::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.ADNews.id)
}
inline ::std::string* ADNews::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADNews.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ADNews::release_id() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADNews.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADNews::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADNews.id)
}

// optional string industry = 14;
inline void ADNews::clear_industry() {
  industry_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ADNews::industry() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNews.industry)
  return industry_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADNews::set_industry(const ::std::string& value) {
  
  industry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNews.industry)
}
inline void ADNews::set_industry(const char* value) {
  
  industry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.ADNews.industry)
}
inline void ADNews::set_industry(const char* value, size_t size) {
  
  industry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.ADNews.industry)
}
inline ::std::string* ADNews::mutable_industry() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADNews.industry)
  return industry_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ADNews::release_industry() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADNews.industry)
  
  return industry_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADNews::set_allocated_industry(::std::string* industry) {
  if (industry != NULL) {
    
  } else {
    
  }
  industry_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), industry);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADNews.industry)
}

// optional double newsHot = 15;
inline void ADNews::clear_newshot() {
  newshot_ = 0;
}
inline double ADNews::newshot() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNews.newsHot)
  return newshot_;
}
inline void ADNews::set_newshot(double value) {
  
  newshot_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNews.newsHot)
}

// optional string newsTime = 16;
inline void ADNews::clear_newstime() {
  newstime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ADNews::newstime() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNews.newsTime)
  return newstime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADNews::set_newstime(const ::std::string& value) {
  
  newstime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNews.newsTime)
}
inline void ADNews::set_newstime(const char* value) {
  
  newstime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.ADNews.newsTime)
}
inline void ADNews::set_newstime(const char* value, size_t size) {
  
  newstime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.ADNews.newsTime)
}
inline ::std::string* ADNews::mutable_newstime() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADNews.newsTime)
  return newstime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ADNews::release_newstime() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADNews.newsTime)
  
  return newstime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADNews::set_allocated_newstime(::std::string* newstime) {
  if (newstime != NULL) {
    
  } else {
    
  }
  newstime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), newstime);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADNews.newsTime)
}

// optional string summ = 17;
inline void ADNews::clear_summ() {
  summ_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ADNews::summ() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNews.summ)
  return summ_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADNews::set_summ(const ::std::string& value) {
  
  summ_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNews.summ)
}
inline void ADNews::set_summ(const char* value) {
  
  summ_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.ADNews.summ)
}
inline void ADNews::set_summ(const char* value, size_t size) {
  
  summ_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.ADNews.summ)
}
inline ::std::string* ADNews::mutable_summ() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADNews.summ)
  return summ_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ADNews::release_summ() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADNews.summ)
  
  return summ_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADNews::set_allocated_summ(::std::string* summ) {
  if (summ != NULL) {
    
  } else {
    
  }
  summ_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), summ);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADNews.summ)
}

// optional string title = 18;
inline void ADNews::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ADNews::title() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNews.title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADNews::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNews.title)
}
inline void ADNews::set_title(const char* value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.ADNews.title)
}
inline void ADNews::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.ADNews.title)
}
inline ::std::string* ADNews::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADNews.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ADNews::release_title() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADNews.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADNews::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADNews.title)
}

// optional string url = 19;
inline void ADNews::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ADNews::url() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNews.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADNews::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNews.url)
}
inline void ADNews::set_url(const char* value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.ADNews.url)
}
inline void ADNews::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.ADNews.url)
}
inline ::std::string* ADNews::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADNews.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ADNews::release_url() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADNews.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADNews::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADNews.url)
}

// optional .com.htsc.mdc.insight.model.ADNewsEmotion newsEmotion = 20;
inline bool ADNews::has_newsemotion() const {
  return this != internal_default_instance() && newsemotion_ != NULL;
}
inline void ADNews::clear_newsemotion() {
  if (GetArenaNoVirtual() == NULL && newsemotion_ != NULL) delete newsemotion_;
  newsemotion_ = NULL;
}
inline const ::com::htsc::mdc::insight::model::ADNewsEmotion& ADNews::newsemotion() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNews.newsEmotion)
  return newsemotion_ != NULL ? *newsemotion_
                         : *::com::htsc::mdc::insight::model::ADNewsEmotion::internal_default_instance();
}
inline ::com::htsc::mdc::insight::model::ADNewsEmotion* ADNews::mutable_newsemotion() {
  
  if (newsemotion_ == NULL) {
    newsemotion_ = new ::com::htsc::mdc::insight::model::ADNewsEmotion;
  }
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADNews.newsEmotion)
  return newsemotion_;
}
inline ::com::htsc::mdc::insight::model::ADNewsEmotion* ADNews::release_newsemotion() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADNews.newsEmotion)
  
  ::com::htsc::mdc::insight::model::ADNewsEmotion* temp = newsemotion_;
  newsemotion_ = NULL;
  return temp;
}
inline void ADNews::set_allocated_newsemotion(::com::htsc::mdc::insight::model::ADNewsEmotion* newsemotion) {
  delete newsemotion_;
  newsemotion_ = newsemotion;
  if (newsemotion) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADNews.newsEmotion)
}

// repeated .com.htsc.mdc.insight.model.ADInvolvedSecurity secuList = 21;
inline int ADNews::seculist_size() const {
  return seculist_.size();
}
inline void ADNews::clear_seculist() {
  seculist_.Clear();
}
inline const ::com::htsc::mdc::insight::model::ADInvolvedSecurity& ADNews::seculist(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNews.secuList)
  return seculist_.Get(index);
}
inline ::com::htsc::mdc::insight::model::ADInvolvedSecurity* ADNews::mutable_seculist(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADNews.secuList)
  return seculist_.Mutable(index);
}
inline ::com::htsc::mdc::insight::model::ADInvolvedSecurity* ADNews::add_seculist() {
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.ADNews.secuList)
  return seculist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADInvolvedSecurity >*
ADNews::mutable_seculist() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.ADNews.secuList)
  return &seculist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADInvolvedSecurity >&
ADNews::seculist() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.ADNews.secuList)
  return seculist_;
}

// repeated .com.htsc.mdc.insight.model.ADRelatedPerson perEmList = 22;
inline int ADNews::peremlist_size() const {
  return peremlist_.size();
}
inline void ADNews::clear_peremlist() {
  peremlist_.Clear();
}
inline const ::com::htsc::mdc::insight::model::ADRelatedPerson& ADNews::peremlist(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNews.perEmList)
  return peremlist_.Get(index);
}
inline ::com::htsc::mdc::insight::model::ADRelatedPerson* ADNews::mutable_peremlist(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADNews.perEmList)
  return peremlist_.Mutable(index);
}
inline ::com::htsc::mdc::insight::model::ADRelatedPerson* ADNews::add_peremlist() {
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.ADNews.perEmList)
  return peremlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADRelatedPerson >*
ADNews::mutable_peremlist() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.ADNews.perEmList)
  return &peremlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADRelatedPerson >&
ADNews::peremlist() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.ADNews.perEmList)
  return peremlist_;
}

// repeated .com.htsc.mdc.insight.model.ADRelatedCompany comEmList = 23;
inline int ADNews::comemlist_size() const {
  return comemlist_.size();
}
inline void ADNews::clear_comemlist() {
  comemlist_.Clear();
}
inline const ::com::htsc::mdc::insight::model::ADRelatedCompany& ADNews::comemlist(int index) const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNews.comEmList)
  return comemlist_.Get(index);
}
inline ::com::htsc::mdc::insight::model::ADRelatedCompany* ADNews::mutable_comemlist(int index) {
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADNews.comEmList)
  return comemlist_.Mutable(index);
}
inline ::com::htsc::mdc::insight::model::ADRelatedCompany* ADNews::add_comemlist() {
  // @@protoc_insertion_point(field_add:com.htsc.mdc.insight.model.ADNews.comEmList)
  return comemlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADRelatedCompany >*
ADNews::mutable_comemlist() {
  // @@protoc_insertion_point(field_mutable_list:com.htsc.mdc.insight.model.ADNews.comEmList)
  return &comemlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::com::htsc::mdc::insight::model::ADRelatedCompany >&
ADNews::comemlist() const {
  // @@protoc_insertion_point(field_list:com.htsc.mdc.insight.model.ADNews.comEmList)
  return comemlist_;
}

// optional int32 DataMultiplePowerOf10 = 24;
inline void ADNews::clear_datamultiplepowerof10() {
  datamultiplepowerof10_ = 0;
}
inline ::google::protobuf::int32 ADNews::datamultiplepowerof10() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNews.DataMultiplePowerOf10)
  return datamultiplepowerof10_;
}
inline void ADNews::set_datamultiplepowerof10(::google::protobuf::int32 value) {
  
  datamultiplepowerof10_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNews.DataMultiplePowerOf10)
}

inline const ADNews* ADNews::internal_default_instance() {
  return &ADNews_default_instance_.get();
}
// -------------------------------------------------------------------

// ADNewsEmotion

// optional double negative = 1;
inline void ADNewsEmotion::clear_negative() {
  negative_ = 0;
}
inline double ADNewsEmotion::negative() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNewsEmotion.negative)
  return negative_;
}
inline void ADNewsEmotion::set_negative(double value) {
  
  negative_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNewsEmotion.negative)
}

// optional double neutral = 2;
inline void ADNewsEmotion::clear_neutral() {
  neutral_ = 0;
}
inline double ADNewsEmotion::neutral() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNewsEmotion.neutral)
  return neutral_;
}
inline void ADNewsEmotion::set_neutral(double value) {
  
  neutral_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNewsEmotion.neutral)
}

// optional int32 pos = 3;
inline void ADNewsEmotion::clear_pos() {
  pos_ = 0;
}
inline ::google::protobuf::int32 ADNewsEmotion::pos() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNewsEmotion.pos)
  return pos_;
}
inline void ADNewsEmotion::set_pos(::google::protobuf::int32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNewsEmotion.pos)
}

// optional double positive = 4;
inline void ADNewsEmotion::clear_positive() {
  positive_ = 0;
}
inline double ADNewsEmotion::positive() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADNewsEmotion.positive)
  return positive_;
}
inline void ADNewsEmotion::set_positive(double value) {
  
  positive_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADNewsEmotion.positive)
}

inline const ADNewsEmotion* ADNewsEmotion::internal_default_instance() {
  return &ADNewsEmotion_default_instance_.get();
}
// -------------------------------------------------------------------

// ADInvolvedSecurity

// optional string comCode = 1;
inline void ADInvolvedSecurity::clear_comcode() {
  comcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ADInvolvedSecurity::comcode() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADInvolvedSecurity.comCode)
  return comcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADInvolvedSecurity::set_comcode(const ::std::string& value) {
  
  comcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADInvolvedSecurity.comCode)
}
inline void ADInvolvedSecurity::set_comcode(const char* value) {
  
  comcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.ADInvolvedSecurity.comCode)
}
inline void ADInvolvedSecurity::set_comcode(const char* value, size_t size) {
  
  comcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.ADInvolvedSecurity.comCode)
}
inline ::std::string* ADInvolvedSecurity::mutable_comcode() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADInvolvedSecurity.comCode)
  return comcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ADInvolvedSecurity::release_comcode() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADInvolvedSecurity.comCode)
  
  return comcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADInvolvedSecurity::set_allocated_comcode(::std::string* comcode) {
  if (comcode != NULL) {
    
  } else {
    
  }
  comcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comcode);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADInvolvedSecurity.comCode)
}

// optional string secuCode = 2;
inline void ADInvolvedSecurity::clear_secucode() {
  secucode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ADInvolvedSecurity::secucode() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADInvolvedSecurity.secuCode)
  return secucode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADInvolvedSecurity::set_secucode(const ::std::string& value) {
  
  secucode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADInvolvedSecurity.secuCode)
}
inline void ADInvolvedSecurity::set_secucode(const char* value) {
  
  secucode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.ADInvolvedSecurity.secuCode)
}
inline void ADInvolvedSecurity::set_secucode(const char* value, size_t size) {
  
  secucode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.ADInvolvedSecurity.secuCode)
}
inline ::std::string* ADInvolvedSecurity::mutable_secucode() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADInvolvedSecurity.secuCode)
  return secucode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ADInvolvedSecurity::release_secucode() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADInvolvedSecurity.secuCode)
  
  return secucode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADInvolvedSecurity::set_allocated_secucode(::std::string* secucode) {
  if (secucode != NULL) {
    
  } else {
    
  }
  secucode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secucode);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADInvolvedSecurity.secuCode)
}

// optional string secuName = 3;
inline void ADInvolvedSecurity::clear_secuname() {
  secuname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ADInvolvedSecurity::secuname() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADInvolvedSecurity.secuName)
  return secuname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADInvolvedSecurity::set_secuname(const ::std::string& value) {
  
  secuname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADInvolvedSecurity.secuName)
}
inline void ADInvolvedSecurity::set_secuname(const char* value) {
  
  secuname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.ADInvolvedSecurity.secuName)
}
inline void ADInvolvedSecurity::set_secuname(const char* value, size_t size) {
  
  secuname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.ADInvolvedSecurity.secuName)
}
inline ::std::string* ADInvolvedSecurity::mutable_secuname() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADInvolvedSecurity.secuName)
  return secuname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ADInvolvedSecurity::release_secuname() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADInvolvedSecurity.secuName)
  
  return secuname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADInvolvedSecurity::set_allocated_secuname(::std::string* secuname) {
  if (secuname != NULL) {
    
  } else {
    
  }
  secuname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secuname);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADInvolvedSecurity.secuName)
}

// optional string HTSCSecurityID = 4;
inline void ADInvolvedSecurity::clear_htscsecurityid() {
  htscsecurityid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ADInvolvedSecurity::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADInvolvedSecurity.HTSCSecurityID)
  return htscsecurityid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADInvolvedSecurity::set_htscsecurityid(const ::std::string& value) {
  
  htscsecurityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADInvolvedSecurity.HTSCSecurityID)
}
inline void ADInvolvedSecurity::set_htscsecurityid(const char* value) {
  
  htscsecurityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.ADInvolvedSecurity.HTSCSecurityID)
}
inline void ADInvolvedSecurity::set_htscsecurityid(const char* value, size_t size) {
  
  htscsecurityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.ADInvolvedSecurity.HTSCSecurityID)
}
inline ::std::string* ADInvolvedSecurity::mutable_htscsecurityid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADInvolvedSecurity.HTSCSecurityID)
  return htscsecurityid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ADInvolvedSecurity::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADInvolvedSecurity.HTSCSecurityID)
  
  return htscsecurityid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADInvolvedSecurity::set_allocated_htscsecurityid(::std::string* htscsecurityid) {
  if (htscsecurityid != NULL) {
    
  } else {
    
  }
  htscsecurityid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), htscsecurityid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADInvolvedSecurity.HTSCSecurityID)
}

inline const ADInvolvedSecurity* ADInvolvedSecurity::internal_default_instance() {
  return &ADInvolvedSecurity_default_instance_.get();
}
// -------------------------------------------------------------------

// ADRelatedCompany

// optional string chiname = 1;
inline void ADRelatedCompany::clear_chiname() {
  chiname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ADRelatedCompany::chiname() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADRelatedCompany.chiname)
  return chiname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADRelatedCompany::set_chiname(const ::std::string& value) {
  
  chiname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADRelatedCompany.chiname)
}
inline void ADRelatedCompany::set_chiname(const char* value) {
  
  chiname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.ADRelatedCompany.chiname)
}
inline void ADRelatedCompany::set_chiname(const char* value, size_t size) {
  
  chiname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.ADRelatedCompany.chiname)
}
inline ::std::string* ADRelatedCompany::mutable_chiname() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADRelatedCompany.chiname)
  return chiname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ADRelatedCompany::release_chiname() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADRelatedCompany.chiname)
  
  return chiname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADRelatedCompany::set_allocated_chiname(::std::string* chiname) {
  if (chiname != NULL) {
    
  } else {
    
  }
  chiname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chiname);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADRelatedCompany.chiname)
}

// optional string comCode = 2;
inline void ADRelatedCompany::clear_comcode() {
  comcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ADRelatedCompany::comcode() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADRelatedCompany.comCode)
  return comcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADRelatedCompany::set_comcode(const ::std::string& value) {
  
  comcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADRelatedCompany.comCode)
}
inline void ADRelatedCompany::set_comcode(const char* value) {
  
  comcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.ADRelatedCompany.comCode)
}
inline void ADRelatedCompany::set_comcode(const char* value, size_t size) {
  
  comcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.ADRelatedCompany.comCode)
}
inline ::std::string* ADRelatedCompany::mutable_comcode() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADRelatedCompany.comCode)
  return comcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ADRelatedCompany::release_comcode() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADRelatedCompany.comCode)
  
  return comcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADRelatedCompany::set_allocated_comcode(::std::string* comcode) {
  if (comcode != NULL) {
    
  } else {
    
  }
  comcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comcode);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADRelatedCompany.comCode)
}

// optional string com = 3;
inline void ADRelatedCompany::clear_com() {
  com_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ADRelatedCompany::com() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADRelatedCompany.com)
  return com_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADRelatedCompany::set_com(const ::std::string& value) {
  
  com_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADRelatedCompany.com)
}
inline void ADRelatedCompany::set_com(const char* value) {
  
  com_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.ADRelatedCompany.com)
}
inline void ADRelatedCompany::set_com(const char* value, size_t size) {
  
  com_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.ADRelatedCompany.com)
}
inline ::std::string* ADRelatedCompany::mutable_com() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADRelatedCompany.com)
  return com_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ADRelatedCompany::release_com() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADRelatedCompany.com)
  
  return com_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADRelatedCompany::set_allocated_com(::std::string* com) {
  if (com != NULL) {
    
  } else {
    
  }
  com_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), com);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADRelatedCompany.com)
}

// optional int32 generalPos = 4;
inline void ADRelatedCompany::clear_generalpos() {
  generalpos_ = 0;
}
inline ::google::protobuf::int32 ADRelatedCompany::generalpos() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADRelatedCompany.generalPos)
  return generalpos_;
}
inline void ADRelatedCompany::set_generalpos(::google::protobuf::int32 value) {
  
  generalpos_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADRelatedCompany.generalPos)
}

// optional string secuCode = 5;
inline void ADRelatedCompany::clear_secucode() {
  secucode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ADRelatedCompany::secucode() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADRelatedCompany.secuCode)
  return secucode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADRelatedCompany::set_secucode(const ::std::string& value) {
  
  secucode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADRelatedCompany.secuCode)
}
inline void ADRelatedCompany::set_secucode(const char* value) {
  
  secucode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.ADRelatedCompany.secuCode)
}
inline void ADRelatedCompany::set_secucode(const char* value, size_t size) {
  
  secucode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.ADRelatedCompany.secuCode)
}
inline ::std::string* ADRelatedCompany::mutable_secucode() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADRelatedCompany.secuCode)
  return secucode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ADRelatedCompany::release_secucode() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADRelatedCompany.secuCode)
  
  return secucode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADRelatedCompany::set_allocated_secucode(::std::string* secucode) {
  if (secucode != NULL) {
    
  } else {
    
  }
  secucode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secucode);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADRelatedCompany.secuCode)
}

// optional string HTSCSecurityID = 6;
inline void ADRelatedCompany::clear_htscsecurityid() {
  htscsecurityid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ADRelatedCompany::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADRelatedCompany.HTSCSecurityID)
  return htscsecurityid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADRelatedCompany::set_htscsecurityid(const ::std::string& value) {
  
  htscsecurityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADRelatedCompany.HTSCSecurityID)
}
inline void ADRelatedCompany::set_htscsecurityid(const char* value) {
  
  htscsecurityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.ADRelatedCompany.HTSCSecurityID)
}
inline void ADRelatedCompany::set_htscsecurityid(const char* value, size_t size) {
  
  htscsecurityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.ADRelatedCompany.HTSCSecurityID)
}
inline ::std::string* ADRelatedCompany::mutable_htscsecurityid() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADRelatedCompany.HTSCSecurityID)
  return htscsecurityid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ADRelatedCompany::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADRelatedCompany.HTSCSecurityID)
  
  return htscsecurityid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADRelatedCompany::set_allocated_htscsecurityid(::std::string* htscsecurityid) {
  if (htscsecurityid != NULL) {
    
  } else {
    
  }
  htscsecurityid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), htscsecurityid);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADRelatedCompany.HTSCSecurityID)
}

inline const ADRelatedCompany* ADRelatedCompany::internal_default_instance() {
  return &ADRelatedCompany_default_instance_.get();
}
// -------------------------------------------------------------------

// ADRelatedPerson

// optional string per = 1;
inline void ADRelatedPerson::clear_per() {
  per_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ADRelatedPerson::per() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADRelatedPerson.per)
  return per_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADRelatedPerson::set_per(const ::std::string& value) {
  
  per_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADRelatedPerson.per)
}
inline void ADRelatedPerson::set_per(const char* value) {
  
  per_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.ADRelatedPerson.per)
}
inline void ADRelatedPerson::set_per(const char* value, size_t size) {
  
  per_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.ADRelatedPerson.per)
}
inline ::std::string* ADRelatedPerson::mutable_per() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADRelatedPerson.per)
  return per_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ADRelatedPerson::release_per() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADRelatedPerson.per)
  
  return per_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADRelatedPerson::set_allocated_per(::std::string* per) {
  if (per != NULL) {
    
  } else {
    
  }
  per_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), per);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADRelatedPerson.per)
}

// optional string comCode = 2;
inline void ADRelatedPerson::clear_comcode() {
  comcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ADRelatedPerson::comcode() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADRelatedPerson.comCode)
  return comcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADRelatedPerson::set_comcode(const ::std::string& value) {
  
  comcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADRelatedPerson.comCode)
}
inline void ADRelatedPerson::set_comcode(const char* value) {
  
  comcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.ADRelatedPerson.comCode)
}
inline void ADRelatedPerson::set_comcode(const char* value, size_t size) {
  
  comcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.ADRelatedPerson.comCode)
}
inline ::std::string* ADRelatedPerson::mutable_comcode() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADRelatedPerson.comCode)
  return comcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ADRelatedPerson::release_comcode() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADRelatedPerson.comCode)
  
  return comcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADRelatedPerson::set_allocated_comcode(::std::string* comcode) {
  if (comcode != NULL) {
    
  } else {
    
  }
  comcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comcode);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADRelatedPerson.comCode)
}

// optional string com = 3;
inline void ADRelatedPerson::clear_com() {
  com_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ADRelatedPerson::com() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADRelatedPerson.com)
  return com_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADRelatedPerson::set_com(const ::std::string& value) {
  
  com_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADRelatedPerson.com)
}
inline void ADRelatedPerson::set_com(const char* value) {
  
  com_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.htsc.mdc.insight.model.ADRelatedPerson.com)
}
inline void ADRelatedPerson::set_com(const char* value, size_t size) {
  
  com_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.htsc.mdc.insight.model.ADRelatedPerson.com)
}
inline ::std::string* ADRelatedPerson::mutable_com() {
  
  // @@protoc_insertion_point(field_mutable:com.htsc.mdc.insight.model.ADRelatedPerson.com)
  return com_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ADRelatedPerson::release_com() {
  // @@protoc_insertion_point(field_release:com.htsc.mdc.insight.model.ADRelatedPerson.com)
  
  return com_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADRelatedPerson::set_allocated_com(::std::string* com) {
  if (com != NULL) {
    
  } else {
    
  }
  com_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), com);
  // @@protoc_insertion_point(field_set_allocated:com.htsc.mdc.insight.model.ADRelatedPerson.com)
}

// optional int32 generalPos = 4;
inline void ADRelatedPerson::clear_generalpos() {
  generalpos_ = 0;
}
inline ::google::protobuf::int32 ADRelatedPerson::generalpos() const {
  // @@protoc_insertion_point(field_get:com.htsc.mdc.insight.model.ADRelatedPerson.generalPos)
  return generalpos_;
}
inline void ADRelatedPerson::set_generalpos(::google::protobuf::int32 value) {
  
  generalpos_ = value;
  // @@protoc_insertion_point(field_set:com.htsc.mdc.insight.model.ADRelatedPerson.generalPos)
}

inline const ADRelatedPerson* ADRelatedPerson::internal_default_instance() {
  return &ADRelatedPerson_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace insight
}  // namespace mdc
}  // namespace htsc
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ADNews_2eproto__INCLUDED
