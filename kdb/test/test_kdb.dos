#include "setup/settings.txt"
login("admin","123456")
try{loadPlugin(pluginTxtPath)}catch(ex){print ex};
go

@testing:case = "test_kdb_connect_host_num",exception=1
kdb::connect(12345,PORT,usernamePassword)

@testing:case = "test_kdb_connect_host_NULL",exception=1
kdb::connect(NULL,PORT,usernamePassword)

@testing:case = "test_kdb_connect_host_not_scalar",exception=1
kdb::connect(1..10,PORT,usernamePassword)

@testing:case = "test_kdb_connect_port_string",exception=1
h = kdb::connect(HOST,"11",usernamePassword)

@testing:case = "test_kdb_connect_port_not_scalar",exception=1
h = kdb::connect(HOST,1..10,usernamePassword)

@testing:case = "test_kdb_connect_port_null",exception=1
h = kdb::connect(HOST,NULL,usernamePassword)

@testing:case = "test_kdb_connect_usernamePassword_num",exception=1
h = kdb::connect(HOST,PORT,10)

@testing:case = "test_kdb_connect_usernamePassword_not_scalar",exception=1
h = kdb::connect(HOST,PORT,1..10)

@testing:case = "test_kdb_connect_usernamePassword_NULL",exception=1
h = kdb::connect(HOST,PORT,NULL)

@testing:case = "test_kdb_connect_more_than_three_param",syntaxError=1
h = kdb::connect(HOST,PORT,usernamePassword,1)

@testing:case = "test_kdb_close_not_handler",exception=1
kdb::close(1)

@testing:case = "test_kdb_close_handle_NULL",exception=1
kdb::close(NULL)

@testing:case = "test_kdb_loadTable_handle_num",exception=1
h = kdb::connect(HOST,PORT,usernamePassword)
re = kdb::loadTable(1, DATA_DIR+"/kdb_sample/2022.06.17/Daily/", DATA_DIR + "/kdb_sample/sym")
kdb::close(h)

@testing:case = "test_kdb_loadTable_handle_vector",exception=1
re = kdb::loadTable(1..10, DATA_DIR+"/kdb_sample/2022.06.17/Daily/", DATA_DIR + "/kdb_sample/sym")

@testing:case = "test_kdb_loadTable_handle_NULL",exception=1
re = kdb::loadTable(NULL, DATA_DIR+"/kdb_sample/2022.06.17/Daily/", DATA_DIR + "/kdb_sample/sym")

@testing:case = "test_kdb_loadTable_tablePath_num",exception=1
re = kdb::loadTable(h, 1, DATA_DIR + "/sym")

@testing:case = "test_kdb_loadTable_tablePath_vector",exception=1
re = kdb::loadTable(h, 1..10, DATA_DIR + "/sym")

@testing:case = "test_kdb_loadTable_tablePath_NULL",exception=1
re = kdb::loadTable(h, NULL, DATA_DIR + "/sym")

@testing:case = "test_kdb_loadTable_tablePath_not_exist",exception=1
re = kdb::loadTable(h,DATA_DIR+"/kdb_sample/2022.06.17/Daily111/" , DATA_DIR + "/kdb_sample/sym")

@testing:case = "test_kdb_loadTable_symPath_num",exception=1
re = kdb::loadTable(h, DATA_DIR+"/kdb_sample/2022.06.17/Daily/", 1)

@testing:case = "test_kdb_loadTable_symPath_vector",exception=1
re = kdb::loadTable(h, DATA_DIR+"/kdb_sample/2022.06.17/Daily/", 1..10)

@testing:case = "test_kdb_loadTable_symPath_NULL",exception=1
re = kdb::loadTable(h, DATA_DIR+"/kdb_sample/2022.06.17/Daily/", NULL)

@testing:case = "test_kdb_loadTable_symPath_not_exist",exception=1
re = kdb::loadTable(h, DATA_DIR+"/kdb_sample/2022.06.17/Daily/", DATA_DIR + "/kdb_sample/sym111")

@testing:case = "test_kdb_loadFile_tablePath_num",exception=1
re = kdb::loadFile(1, DATA_DIR + "/sym")

@testing:case = "test_kdb_loadFile_tablePath_vector",exception=1
re = kdb::loadFile(1..10, DATA_DIR + "/sym")

@testing:case = "test_kdb_loadFile_tablePath_NULL",exception=1
re = kdb::loadFile(NULL, DATA_DIR + "/sym")

@testing:case = "test_kdb_loadFile_tablePath_not_exist",exception=1
re = kdb::loadFile(DATA_DIR+"/kdb_sample/2022.06.17/Daily111/" , DATA_DIR + "/kdb_sample/sym")

@testing:case = "test_kdb_loadFile_tablePath_single_table_file",exception=1
re = kdb::loadFile(DATA_DIR+"/kdb_sample/allDataTypes/test")

@testing:case = "test_kdb_loadFile_symPath_num",exception=1
re = kdb::loadFile(DATA_DIR+"/kdb_sample/2022.06.17/Daily/", 1)

@testing:case = "test_kdb_loadFile_symPath_vector",exception=1
re = kdb::loadFile(DATA_DIR+"/kdb_sample/2022.06.17/Daily/", 1..10)

@testing:case = "test_kdb_loadFile_symPath_NULL",exception=1
re = kdb::loadFile(DATA_DIR+"/kdb_sample/2022.06.17/Daily/", NULL)

@testing:case = "test_kdb_loadFile_symPath_not_exist",exception=1
re = kdb::loadFile(DATA_DIR+"/kdb_sample/2022.06.17/Daily/", DATA_DIR + "/kdb_sample/sym111")

@testing:case = "test_kdb_loadFile_table_has_symCloumn_and_not_specify_symPath",exception=1
re3 = kdb::loadFile(DATA_DIR+"/kdb_sample/2022.06.17/Daily/")

@testing:case = "test_kdb_use_old_handler_after_close_connect",exception=1
kdb::close(h)
re = kdb::loadTable(h, DATA_DIR+"/2022.06.17/Daily/", DATA_DIR + "/kdb_sample/sym")

@testing:case = "test_kdb_loadFile_int_nested_column_data",exception=1
re = kdb::loadFile(DATA_DIR+"/kdb_sample/intArrayVector")

@testing:case = "test_kdb_loadTable_int_nested_column_data",exception=1
h = kdb::connect(HOST,PORT,usernamePassword)
re = kdb::loadTable(h, DATA_DIR+"/kdb_sample/intArrayVector")
kdb::close(h)

@testing:case = "test_kdb_multi_connect_and_close"
for(i in 1..20){
	h = kdb::connect(HOST,PORT,usernamePassword)
	kdb::close(h)
}

@testing:case = "test_kdb_loadTable_read_Daily_Table_set_symPath"
h = kdb::connect(HOST,PORT,usernamePassword)
re = kdb::loadTable(h, DATA_DIR+"/kdb_sample/2022.06.17/Daily/", DATA_DIR + "/kdb_sample/sym")
kdb::close(h)
schemaTable = extractTextSchema(DATA_DIR+"/csv_sample/Daily.csv")
update  schemaTable set type="SYMBOL" where name=`status
update  schemaTable set type="SYMBOL" where name=`limitupdown
update  schemaTable set type="DOUBLE" where name=`presettle
update  schemaTable set type="DOUBLE" where name=`settle
eqObj((schema(re).colDefs)[`typeString],schemaTable[`type])
ex = loadText(DATA_DIR+"/csv_sample/Daily.csv",,schemaTable)
assert 1,eqObj(re[`sym],ex[`sym])
assert 2,eqObj(re[`preclose],ex[`preclose],2)
assert 3,eqObj(re[`open],ex[`open],2)
assert 4,eqObj(re[`high],ex[`high],2)
assert 5,eqObj(re[`low],ex[`low],2)
assert 6,eqObj(re[`close],ex[`close],2)
assert 7,eqObj(re[`volume]/1E10,ex[`volume]/1E10,2)
assert 8,eqObj(re[`amt]/1E11,ex[`amt]/1E11,2)
assert 9,eqObj(re[`pctChg],ex[`pctChg],2)
assert 10,eqObj(re[`vwap],ex[`vwap],2)
assert 11,eqObj(re[`adjfactor],ex[`adjfactor],2)
assert 12,eqObj(re[`turn],ex[`turn],2)
assert 13,eqObj(re[`floatShares]/1E10,ex[`floatShares]/1E10,2)
assert 14,eqObj(re[`totalShares]/1E10,ex[`totalShares]/1E10,2)
assert 15,eqObj(re[`limitupdown],ex[`limitupdown])
assert 16,eqObj(re[`pe],ex[`pe],2)
assert 17,eqObj(re[`pb],ex[`pb],2)
assert 18,eqObj(re[`status],ex[`status])
assert 19,eqObj(re[`presettle],ex[`presettle])
assert 20,eqObj(re[`settle],ex[`settle])

@testing:case = "test_kdb_loadTable_read_Daily_Table_not_set_symPath"
h = kdb::connect(HOST,PORT,usernamePassword)
ex = kdb::loadTable(h, DATA_DIR+"/kdb_sample/2022.06.17/Daily/", DATA_DIR + "/kdb_sample/sym")
re = kdb::loadTable(h, DATA_DIR+"/kdb_sample/2022.06.17/Daily/")
kdb::close(h)
symName = exec name from schema(ex).colDefs where typeString=`SYMBOL
assert 1,eqObj((exec typeString from schema(re).colDefs where name in symName),take(`LONG,3))
tem = exec name from schema(ex).colDefs where typeString!=`SYMBOL
ex = select preclose,open,high,low,close,volume,amt,pctChg,vwap,adjfactor,turn,floatShares,totalShares,pe,pb,presettle,settle from ex
re = select preclose,open,high,low,close,volume,amt,pctChg,vwap,adjfactor,turn,floatShares,totalShares,pe,pb,presettle,settle from re
assert 2,each(eqObj,ex.values(),re.values())

@testing:case = "test_kdb_loadTable_read_Syms_Table_set_symPath"
h = kdb::connect(HOST,PORT,usernamePassword)
re = kdb::loadTable(h, DATA_DIR+"/kdb_sample/2022.06.17/Syms", DATA_DIR + "/kdb_sample/sym")
kdb::close(h)
schemaTable = extractTextSchema(DATA_DIR+"/csv_sample/Syms.csv")
update schemaTable set type=`SYMBOL where type=`STRING
update schemaTable set type=`DOUBLE where name in `multiplier`margin
ex = loadText(DATA_DIR+"/csv_sample/Syms.csv",,schemaTable)
assert 1,eqObj(re[`cat],ex[`cat])
assert 2,eqObj(re[`sym],ex[`sym])
assert 3,eqObj(re[`ticker],ex[`ticker])
assert 4,eqObj(re[`name],ex[`name])
assert 5,eqObj(re[`market],ex[`market])
assert 6,eqObj(re[`board],ex[`board])
assert 7,eqObj(re[`ipoDate],ex[`ipoDate])
assert 8,eqObj(re[`lastDate],ex[`lastDate])
assert 9,eqObj(re[`minDelta],ex[`minDelta])
assert 10,eqObj(re[`st],ex[`st])
assert 11,eqObj(re[`SW1],ex[`SW1])
assert 12,eqObj(re[`SW2],ex[`SW2])
assert 13,eqObj(re[`SW3],ex[`SW3])
assert 14,eqObj(re[`multiplier],ex[`multiplier])
assert 15,eqObj(re[`margin],ex[`margin])
assert 16,eqObj(re[`tradeSym],ex[`tradeSym])

@testing:case = "test_kdb_loadTable_read_Syms_Table_not_set_symPath"
h = kdb::connect(HOST,PORT,usernamePassword)
ex = kdb::loadTable(h, DATA_DIR+"/kdb_sample/2022.06.17/Syms/", DATA_DIR + "/kdb_sample/sym")
re = kdb::loadTable(h, DATA_DIR+"/kdb_sample/2022.06.17/Syms/")
kdb::close(h)
symName = exec name from schema(ex).colDefs where typeString=`SYMBOL
assert 1,eqObj((exec typeString from schema(re).colDefs where name in symName),take(`LONG,11))
tem = exec name from schema(ex).colDefs where typeString!=`SYMBOL
ex = select ipoDate,lastDate,minDelta,multiplier,margin from ex
re = select ipoDate,lastDate,minDelta,multiplier,margin from re
assert 2,each(eqObj,ex.values(),re.values())

@testing:case = "test_kdb_loadFile_read_Syms_Table"
re = kdb::loadFile(DATA_DIR+"/kdb_sample/2022.06.17/Syms", DATA_DIR + "/kdb_sample/sym")
schemaTable = extractTextSchema(DATA_DIR+"/csv_sample/Syms.csv")
update schemaTable set type=`SYMBOL where type=`STRING
update schemaTable set type=`DOUBLE where name in `multiplier`margin
ex = loadText(DATA_DIR+"/csv_sample/Syms.csv",,schemaTable)
assert 1,eqObj(re[`cat],ex[`cat])
assert 2,eqObj(re[`sym],ex[`sym])
assert 3,eqObj(re[`ticker],ex[`ticker])
assert 4,eqObj(re[`name],ex[`name])
assert 5,eqObj(re[`market],ex[`market])
assert 6,eqObj(re[`board],ex[`board])
assert 7,eqObj(re[`ipoDate],ex[`ipoDate])
assert 8,eqObj(re[`lastDate],ex[`lastDate])
assert 9,eqObj(re[`minDelta],ex[`minDelta])
assert 10,eqObj(re[`st],ex[`st])
assert 11,eqObj(re[`SW1],ex[`SW1])
assert 12,eqObj(re[`SW2],ex[`SW2])
assert 13,eqObj(re[`SW3],ex[`SW3])
assert 14,eqObj(re[`multiplier],ex[`multiplier])
assert 15,eqObj(re[`margin],ex[`margin])
assert 16,eqObj(re[`tradeSym],ex[`tradeSym])

@testing:case = "test_kdb_loadFile_read_Daily_Table"
re = kdb::loadFile(DATA_DIR+"/kdb_sample/2022.06.17/Daily/", DATA_DIR + "/kdb_sample/sym")
schemaTable = extractTextSchema(DATA_DIR+"/csv_sample/Daily.csv")
update  schemaTable set type="SYMBOL" where name=`status
update  schemaTable set type="SYMBOL" where name=`limitupdown
update  schemaTable set type="DOUBLE" where name=`presettle
update  schemaTable set type="DOUBLE" where name=`settle
eqObj((schema(re).colDefs)[`typeString],schemaTable[`type])
ex = loadText(DATA_DIR+"/csv_sample/Daily.csv",,schemaTable)
assert 1,eqObj(re[`sym],ex[`sym])
assert 2,eqObj(re[`preclose],ex[`preclose],2)
assert 3,eqObj(re[`open],ex[`open],2)
assert 4,eqObj(re[`high],ex[`high],2)
assert 5,eqObj(re[`low],ex[`low],2)
assert 6,eqObj(re[`close],ex[`close],2)
assert 7,eqObj(re[`volume]/1E10,ex[`volume]/1E10,2)
assert 8,eqObj(re[`amt]/1E11,ex[`amt]/1E11,2)
assert 9,eqObj(re[`pctChg],ex[`pctChg],2)
assert 10,eqObj(re[`vwap],ex[`vwap],2)
assert 11,eqObj(re[`adjfactor],ex[`adjfactor],2)
assert 12,eqObj(re[`turn],ex[`turn],2)
assert 13,eqObj(re[`floatShares]/1E10,ex[`floatShares]/1E10,2)
assert 14,eqObj(re[`totalShares]/1E10,ex[`totalShares]/1E10,2)
assert 15,eqObj(re[`limitupdown],ex[`limitupdown])
assert 16,eqObj(re[`pe],ex[`pe],2)
assert 17,eqObj(re[`pb],ex[`pb],2)
assert 18,eqObj(re[`status],ex[`status])
assert 19,eqObj(re[`presettle],ex[`presettle])
assert 20,eqObj(re[`settle],ex[`settle])

@testing:case = "test_kdb_loadTable_tablePath_single_table_file_all_dataType"
h = kdb::connect(HOST,PORT,usernamePassword)
re = kdb::loadTable(h, DATA_DIR+"/kdb_sample/allDataTypes/test")
kdb::close(h)
schemaTable = extractTextSchema(DATA_DIR+"/csv_sample/test.csv")
schemaTable[`type] = schema(re).colDefs[`typeString]
update schemaTable set type=`STRING where name in `nanostamp`month`nano
ex = loadText(DATA_DIR+"/csv_sample/test.csv",,schemaTable)
assert 1,eqObj(re[`bool],ex[`bool])
assert 2,eqObj(re[`uuid],ex[`uuid])
assert 3,eqObj(re[`byte],take(char([127,6,0,128,255]),2000))
assert 4,eqObj(re[`short],ex[`short])
assert 5,eqObj(re[`int],ex[`int])
assert 6,eqObj(re[`long],ex[`long])
assert 7,eqObj(re[`float],ex[`float])
assert 8,eqObj(re[`double],ex[`double])
assert 9,eqObj(re[`char],take(char(['c','0','|',' ','a']),2000))
assert 10,eqObj(re[`str],ex[`str])
exTime = strReplace(ex[`nanostamp],"D","T")
exTime = strReplace(exTime,"-",".")
assert 11,eqObj(string(re[`nanostamp]),exTime)
reTime = strReplace(string(re[`month]),".","-")
reTime = substr(reTime,0,strlen(reTime)-1)
assert 12,eqObj(reTime,ex[`month])
assert 13,eqObj(re[`date],ex[`date])
assert 14,eqObj(re[`timestamp],ex[`timestamp])
assert 15,eqObj(string(re[`nano]),substr(ex[`nano],2,strlen(ex[`nano])-1))
assert 16,eqObj(re[`minute],ex[`minute])
assert 17,eqObj(re[`second],ex[`second])
assert 18,eqObj(re[`time],ex[`time])

@testing:case = "test_kdb_loadTable_tablePath_splayed_table_all_dataType"
h = kdb::connect(HOST,PORT,usernamePassword)
re = kdb::loadTable(h, DATA_DIR+"/kdb_sample/allDataTypes/splayedTable",DATA_DIR+"/kdb_sample/allDataTypes/sym")
kdb::close(h)
schemaTable = extractTextSchema(DATA_DIR+"/csv_sample/test.csv")
schemaTable[`type] = schema(re).colDefs[`typeString]
update schemaTable set type=`STRING where name in `nanostamp`month`nano
ex = loadText(DATA_DIR+"/csv_sample/test.csv",,schemaTable)
assert 1,eqObj(re[`bool],ex[`bool])
assert 2,eqObj(re[`uuid],ex[`uuid])
assert 3,eqObj(re[`byte],take(char([127,6,0,128,255]),2000))
assert 4,eqObj(re[`short],ex[`short])
assert 5,eqObj(re[`int],ex[`int])
assert 6,eqObj(re[`long],ex[`long])
assert 7,eqObj(re[`float],ex[`float])
assert 8,eqObj(re[`double],ex[`double])
assert 9,eqObj(re[`char],take(char(['c','0','|',' ','a']),2000))
assert 10,eqObj(re[`str],ex[`str])
exTime = strReplace(ex[`nanostamp],"D","T")
exTime = strReplace(exTime,"-",".")
assert 11,eqObj(string(re[`nanostamp]),exTime)
reTime = strReplace(string(re[`month]),".","-")
reTime = substr(reTime,0,strlen(reTime)-1)
assert 12,eqObj(reTime,ex[`month])
assert 13,eqObj(re[`date],ex[`date])
assert 14,eqObj(re[`timestamp],ex[`timestamp])
assert 15,eqObj(string(re[`nano]),substr(ex[`nano],2,strlen(ex[`nano])-1))
assert 16,eqObj(re[`minute],ex[`minute])
assert 17,eqObj(re[`second],ex[`second])
assert 18,eqObj(re[`time],ex[`time])

@testing:case = "test_kdb_loadFile_tablePath_splayed_table_all_dataType"
re = kdb::loadFile(DATA_DIR+"/kdb_sample/allDataTypes/splayedTable",DATA_DIR+"/kdb_sample/allDataTypes/sym")
schemaTable = extractTextSchema(DATA_DIR+"/csv_sample/test.csv")
schemaTable[`type] = schema(re).colDefs[`typeString]
update schemaTable set type=`STRING where name in `nanostamp`month`nano
ex = loadText(DATA_DIR+"/csv_sample/test.csv",,schemaTable)
assert 1,eqObj(re[`bool],ex[`bool])
assert 2,eqObj(re[`uuid],ex[`uuid])
assert 3,eqObj(re[`byte],take(char([127,6,0,128,255]),2000))
assert 4,eqObj(re[`short],ex[`short])
assert 5,eqObj(re[`int],ex[`int])
assert 6,eqObj(re[`long],ex[`long])
assert 7,eqObj(re[`float],ex[`float])
assert 8,eqObj(re[`double],ex[`double])
assert 9,eqObj(re[`char],take(char(['c','0','|',' ','a']),2000))
assert 10,eqObj(re[`str],ex[`str])
exTime = strReplace(ex[`nanostamp],"D","T")
exTime = strReplace(exTime,"-",".")
assert 11,eqObj(string(re[`nanostamp]),exTime)
reTime = strReplace(string(re[`month]),".","-")
reTime = substr(reTime,0,strlen(reTime)-1)
assert 12,eqObj(reTime,ex[`month])
assert 13,eqObj(re[`date],ex[`date])
assert 14,eqObj(re[`timestamp],ex[`timestamp])
assert 15,eqObj(string(re[`nano]),substr(ex[`nano],2,strlen(ex[`nano])-1))
assert 16,eqObj(re[`minute],ex[`minute])
assert 17,eqObj(re[`second],ex[`second])
assert 18,eqObj(re[`time],ex[`time])

@testing:case = "test_kdb_loadFile_same_file_multi_thread"
def myLoadFile(HOST,PORT,usernamePassword,DATA_DIR,ex){
	for(i in 1..10){
		re = kdb::loadFile(DATA_DIR+"/kdb_sample/2022.06.17/Daily/", DATA_DIR + "/kdb_sample/sym")
	}
      return [eqObj(re[`sym],ex[`sym]),eqObj(re[`preclose],ex[`preclose],2),eqObj(re[`open],ex[`open],2),eqObj(re[`high],ex[`high],2),eqObj(re[`low],ex[`low],2),eqObj(re[`close],ex[`close],2),eqObj(re[`volume]/1E10,ex[`volume]/1E10,2),eqObj(re[`amt]/1E11,ex[`amt]/1E11,2),eqObj(re[`pctChg],ex[`pctChg],2),eqObj(re[`vwap],ex[`vwap],2),eqObj(re[`adjfactor],ex[`adjfactor],2),eqObj(re[`turn],ex[`turn],2),eqObj(re[`floatShares]/1E10,ex[`floatShares]/1E10,2),eqObj(re[`totalShares]/1E10,ex[`totalShares]/1E10,2),eqObj(re[`limitupdown],ex[`limitupdown]),eqObj(re[`pe],ex[`pe],2),eqObj(re[`pb],ex[`pb],2),eqObj(re[`status],ex[`status]),eqObj(re[`presettle],ex[`presettle]),eqObj(re[`settle],ex[`settle])]
}
schemaTable = extractTextSchema(DATA_DIR+"/csv_sample/Daily.csv")
update  schemaTable set type="SYMBOL" where name=`status
update  schemaTable set type="SYMBOL" where name=`limitupdown
update  schemaTable set type="DOUBLE" where name=`presettle
update  schemaTable set type="DOUBLE" where name=`settle
ex = loadText(DATA_DIR+"/csv_sample/Daily.csv",,schemaTable)
jobIds = array(string,0,100)
for(i in 1..5){
	jobId = submitJob("job"+string(i),"multiThreadLoadFile",myLoadFile,HOST,PORT,usernamePassword,DATA_DIR,ex)
	jobIds.append!(jobId)
}
for(jobId in jobIds){
	assert 1,eqObj(getJobReturn(jobId,true),take(true,20))
}

@testing:case = "test_kdb_loadTable_same_file_multi_thread"
def myLoadFile(HOST,PORT,usernamePassword,DATA_DIR,ex){
	h = kdb::connect(HOST,PORT,usernamePassword)
	for(i in 1..10){
		re = kdb::loadTable(h, DATA_DIR+"/kdb_sample/2022.06.17/Daily", DATA_DIR + "/kdb_sample/sym")
	}
	kdb::close(h)
      return [eqObj(re[`sym],ex[`sym]),eqObj(re[`preclose],ex[`preclose],2),eqObj(re[`open],ex[`open],2),eqObj(re[`high],ex[`high],2),eqObj(re[`low],ex[`low],2),eqObj(re[`close],ex[`close],2),eqObj(re[`volume]/1E10,ex[`volume]/1E10,2),eqObj(re[`amt]/1E11,ex[`amt]/1E11,2),eqObj(re[`pctChg],ex[`pctChg],2),eqObj(re[`vwap],ex[`vwap],2),eqObj(re[`adjfactor],ex[`adjfactor],2),eqObj(re[`turn],ex[`turn],2),eqObj(re[`floatShares]/1E10,ex[`floatShares]/1E10,2),eqObj(re[`totalShares]/1E10,ex[`totalShares]/1E10,2),eqObj(re[`limitupdown],ex[`limitupdown]),eqObj(re[`pe],ex[`pe],2),eqObj(re[`pb],ex[`pb],2),eqObj(re[`status],ex[`status]),eqObj(re[`presettle],ex[`presettle]),eqObj(re[`settle],ex[`settle])]
}
schemaTable = extractTextSchema(DATA_DIR+"/csv_sample/Daily.csv")
update  schemaTable set type="SYMBOL" where name=`status
update  schemaTable set type="SYMBOL" where name=`limitupdown
update  schemaTable set type="DOUBLE" where name=`presettle
update  schemaTable set type="DOUBLE" where name=`settle
ex = loadText(DATA_DIR+"/csv_sample/Daily.csv",,schemaTable)
jobIds = array(string,0,100)
for(i in 1..5){
	jobId = submitJob("job"+string(i),"multiThreadLoadFile",myLoadFile,HOST,PORT,usernamePassword,DATA_DIR,ex)
	jobIds.append!(jobId)
}
for(jobId in jobIds){
	assert 1,eqObj(getJobReturn(jobId,true),take(true,20))
}

@testing:case = "test_kdb_loadFile_diff_file_multi_thread"
def myLoadFile(HOST,PORT,usernamePassword,DATA_DIR,tableName){
	for(i in 1..5){
		re = kdb::loadFile(DATA_DIR+"/kdb_sample/2022.06.17/"+tableName, DATA_DIR + "/kdb_sample/sym")
	}
}
jobIds = array(string,0,100)
for(i in 1..2){
	jobId = submitJob("job"+string(i),"multiThreadLoadFile",myLoadFile,HOST,PORT,usernamePassword,DATA_DIR,"Daily")
	jobIds.append!(jobId)
	jobId = submitJob("job"+string(i),"multiThreadLoadFile",myLoadFile,HOST,PORT,usernamePassword,DATA_DIR,"Syms")
	jobIds.append!(jobId)
}
for(jobId in jobIds){
	getJobReturn(jobId,true)
}

@testing:case = "test_kdb_loadTable_diff_file_multi_thread"
def myLoadFile(HOST,PORT,usernamePassword,DATA_DIR,tableName){
	h = kdb::connect(HOST,PORT,usernamePassword)
	for(i in 1..5){
		re = kdb::loadTable(h,DATA_DIR+"/kdb_sample/2022.06.17/"+tableName, DATA_DIR + "/kdb_sample/sym")
	}
	kdb::close(h)
}
jobIds = array(string,0,100)
for(i in 1..2){
	jobId = submitJob("job"+string(i),"multiThreadLoadFile",myLoadFile,HOST,PORT,usernamePassword,DATA_DIR,"Daily")
	jobIds.append!(jobId)
	jobId = submitJob("job"+string(i),"multiThreadLoadFile",myLoadFile,HOST,PORT,usernamePassword,DATA_DIR,"Syms")
	jobIds.append!(jobId)
}
for(jobId in jobIds){
	getJobReturn(jobId,true)
}


@testing:case = "test_kdb_loadFile_read_two_Table_set_diff_sym_file_set_symPath"
re1 = kdb::loadFile(DATA_DIR + "/kdb_sample/2022.12.05/TRANSACTION", DATA_DIR + "/kdb_sample/sym_TRANSACTION")
re2 = kdb::loadFile(DATA_DIR + "/kdb_sample//2022.12.05/ORD", DATA_DIR + "/kdb_sample/sym_ORD")
ex1 = loadText(DATA_DIR + "/csv_sample/Trans.csv")
ex2 = loadText(DATA_DIR + "/csv_sample/Orders.csv")
replaceColumn!(ex1,`volume,double(ex1[`volume]))
replaceColumn!(ex1,`function_code,symbol(string(ex1[`function_code])))
replaceColumn!(ex1,`biz_index,long(ex1[`biz_index]))
replaceColumn!(ex2,`volume,double(ex2[`volume]))
replaceColumn!(ex2,`order_no,long(ex2[`order_no]))
replaceColumn!(ex2,`order_kind,symbol(string(ex2[`order_kind])))
replaceColumn!(ex2,`function_code,symbol(string(ex2[`function_code])))
replaceColumn!(ex2,`biz_index,long(ex2[`biz_index]))
assert 1,each(eqObj,re1.values(),ex1.values())
assert 2,each(eqObj,re2.values(),ex2.values())

@testing:case = "test_kdb_loadTable_read_two_Table_set_diff_sym_file_set_symPath"
h = kdb::connect(HOST,PORT,usernamePassword)
re1 = kdb::loadTable(h, DATA_DIR + "/kdb_sample/2022.12.05/TRANSACTION", DATA_DIR + "/kdb_sample/sym_TRANSACTION")
re2 = kdb::loadTable(h, DATA_DIR + "/kdb_sample//2022.12.05/ORD", DATA_DIR + "/kdb_sample/sym_ORD")
kdb::close(h)
ex1 = loadText(DATA_DIR + "/csv_sample/Trans.csv")
ex2 = loadText(DATA_DIR + "/csv_sample/Orders.csv")
replaceColumn!(ex1,`volume,double(ex1[`volume]))
replaceColumn!(ex1,`function_code,symbol(string(ex1[`function_code])))
replaceColumn!(ex1,`biz_index,long(ex1[`biz_index]))
replaceColumn!(ex2,`volume,double(ex2[`volume]))
replaceColumn!(ex2,`order_no,long(ex2[`order_no]))
replaceColumn!(ex2,`order_kind,symbol(string(ex2[`order_kind])))
replaceColumn!(ex2,`function_code,symbol(string(ex2[`function_code])))
replaceColumn!(ex2,`biz_index,long(ex2[`biz_index]))
assert 1,each(eqObj,re1.values(),ex1.values())
assert 2,each(eqObj,re2.values(),ex2.values())

@testing:case = "test_kdb_loadFile_char_nested_column_data"
re = kdb::loadFile(DATA_DIR+"/kdb_sample/charArrayVector")
ex = table(take(12 44535 0 NULL -234566,2000) as id,take("aa" "a" "" "dolphindb" "123456789",2000) as nestChar)
assert 1,each(eqObj,re.values(),ex.values())

@testing:case = "test_kdb_loadTable_char_nested_column_data"
h = kdb::connect(HOST,PORT,usernamePassword)
re = kdb::loadTable(h, DATA_DIR+"/kdb_sample/charArrayVector")
kdb::close(h)
ex = table(take(12 44535 0 NULL -234566,2000) as id,take("aa" "a" "" "dolphindb" "123456789",2000) as nestChar)
assert 1,each(eqObj,re.values(),ex.values())

@testing:case = "test_kdb_loadFile_compress_char_nested_column_data"
re = kdb::loadFile(DATA_DIR+"/kdb_sample/compressCharArrayVector")
ex = table(take(12 44535 0 NULL -234566,2000) as id,take("aa" "a" "" "dolphindb" "123456789",2000) as nestChar)
assert 1,each(eqObj,re.values(),ex.values())

@testing:case = "test_kdb_loadTable_compress_char_nested_column_data"
h = kdb::connect(HOST,PORT,usernamePassword)
re = kdb::loadTable(h, DATA_DIR+"/kdb_sample/compressCharArrayVector")
kdb::close(h)
ex = table(take(12 44535 0 NULL -234566,2000) as id,take("aa" "a" "" "dolphindb" "123456789",2000) as nestChar)
assert 1,each(eqObj,re.values(),ex.values())

@testing:case = "test_kdb_loadFile_char_nested_column_quote_cffex"
re = kdb::loadFile(DATA_DIR+"/kdb_sample/2023.03.24/quote_cffex", DATA_DIR+"/kdb_sample/sym_quote_cffex")
assert 1,eqObj(re.size(),0)

@testing:case = "test_kdb_loadTable_char_nested_column_quote_cffex"
h = kdb::connect(HOST,PORT,usernamePassword)
re = kdb::loadTable(h, DATA_DIR+"/kdb_sample/2023.03.24/quote_cffex", DATA_DIR+"/kdb_sample/sym_quote_cffex")
kdb::close(h)
assert 1,eqObj(re.size(),0)

// add case
@testing:case = "test_kdb_connect_host_string()"
h = kdb::connect(string(),PORT,usernamePassword)
kdb::close(h)

@testing:case = "test_kdb_connect_host_ipaddr",exception=1
kdb::connect(ipaddr("127.0.0.1"),PORT,usernamePassword)

@testing:case = "test_kdb_connect_port_int()",exception=1
h = kdb::connect(HOST,int(),usernamePassword)

@testing:case = "test_kdb_connect_port_0",exception=1
h = kdb::connect(HOST,0,usernamePassword)

@testing:case = "test_kdb_connect_port_matrix",exception=1
m = [1]$1:1
h = kdb::connect(HOST,m,usernamePassword)

@testing:case = "test_kdb_connect_usernamePassword_string()",exception=1
h = kdb::connect(HOST,PORT,string())

@testing:case = "test_kdb_connect_less_than_three_param",syntaxError=1
h = kdb::connect(HOST)

@testing:case = "test_kdb_connect_repeat_create_connect"
N = 1000
h = array(any, 0, N)
for(i in 1..N){
	h.append!(kdb::connect(HOST,PORT,usernamePassword))
}
for(j in h){
	try{kdb::close(j)}catch(exp){}
}

@testing:case = "test_kdb_connect_multi_thread_connect"
def myConnect(HOST, PORT, usernamePassword, ex){
	N = 1000 / 5
	h = array(any, 0, N)
	for(i in 1..N){
		h.append!(kdb::connect(HOST,PORT,usernamePassword))
	}
    success = eqObj:L(string:E(h), string(ex))
	for(j in h){
		try{kdb::close(j)}catch(exp){}
	}
	return success
}
ex =  kdb::connect(HOST,PORT,usernamePassword)
jobIds = array(string,0,100)
for(i in 1..5){
	jobId = submitJob("job"+string(i),"multiThreadConnect",myConnect,HOST,PORT,usernamePassword, ex)
	jobIds.append!(jobId)
}
for(jobId in jobIds){
	assert 1,each(eqObj, getJobReturn(jobId,true),take(true,1000 / 5))
}
kdb::close(ex)

@testing:case = "test_kdb_close_not_handler",exception=1
kdb::close(1)

@testing:case = "test_kdb_close_handle_NULL",exception=1
kdb::close(NULL)

@testing:case = "test_kdb_close_handle_more_than_one_para",syntaxError=1
h = kdb::connect(HOST,PORT,usernamePassword)
kdb::close(h, 1)

@testing:case = "test_kdb_close_handle_less_than_one_para",exception=1
kdb::close()

@testing:case = "test_kdb_close_handle_connect"
try{kdb::close(h)}catch(exp){}
kdb::close(kdb::connect(HOST,PORT,usernamePassword))

@testing:case = "test_kdb_close_handle_multi_close"
h = kdb::connect(HOST,PORT,usernamePassword)
kdb::close(h)
kdb::close(h)	//silently complete, no error

@testing:case = "test_kdb_close_handle_errorresource", exception = 1
t = table(100:0, `x0`x1, [DOUBLE, DOUBLE])
x0 = norm(1.0, 1.0, 50)
x1 = norm(1.0, 1.5, 50)
insert into t values (x0, x1)
model = kmeans(t, 3);
typestr(model.model)
kdb::close(model.model)

@testing:case = "test_kdb_loadTable_handle_errorhandle",exception=1
re = kdb::loadTable(model.model, DATA_DIR+"/kdb_sample/2022.06.17/Daily/", DATA_DIR + "/kdb_sample/sym")

@testing:case = "test_kdb_loadTable_handle_connect"
re = kdb::loadTable(kdb::connect(HOST,PORT,usernamePassword), DATA_DIR+"/kdb_sample/2022.06.17/Daily/", DATA_DIR + "/kdb_sample/sym")
schemaTable = extractTextSchema(DATA_DIR+"/csv_sample/Daily.csv")
update  schemaTable set type="SYMBOL" where name=`status
update  schemaTable set type="SYMBOL" where name=`limitupdown
update  schemaTable set type="DOUBLE" where name=`presettle
update  schemaTable set type="DOUBLE" where name=`settle
eqObj((schema(re).colDefs)[`typeString],schemaTable[`type])
ex = loadText(DATA_DIR+"/csv_sample/Daily.csv",,schemaTable)
assert 1,eqObj(re[`sym],ex[`sym])
assert 2,eqObj(re[`preclose],ex[`preclose],2)
assert 3,eqObj(re[`open],ex[`open],2)
assert 4,eqObj(re[`high],ex[`high],2)
assert 5,eqObj(re[`low],ex[`low],2)
assert 6,eqObj(re[`close],ex[`close],2)
assert 7,eqObj(re[`volume]/1E10,ex[`volume]/1E10,2)
assert 8,eqObj(re[`amt]/1E11,ex[`amt]/1E11,2)
assert 9,eqObj(re[`pctChg],ex[`pctChg],2)
assert 10,eqObj(re[`vwap],ex[`vwap],2)
assert 11,eqObj(re[`adjfactor],ex[`adjfactor],2)
assert 12,eqObj(re[`turn],ex[`turn],2)
assert 13,eqObj(re[`floatShares]/1E10,ex[`floatShares]/1E10,2)
assert 14,eqObj(re[`totalShares]/1E10,ex[`totalShares]/1E10,2)
assert 15,eqObj(re[`limitupdown],ex[`limitupdown])
assert 16,eqObj(re[`pe],ex[`pe],2)
assert 17,eqObj(re[`pb],ex[`pb],2)
assert 18,eqObj(re[`status],ex[`status])
assert 19,eqObj(re[`presettle],ex[`presettle])
assert 20,eqObj(re[`settle],ex[`settle])

@testing:case = "test_kdb_loadTable_tablePath_string()",exception=1
h = kdb::connect(HOST,PORT,usernamePassword)
re = kdb::loadTable(h, string(), DATA_DIR + "/sym")
kdb::close(h)

@testing:case = "test_kdb_loadTable_symPath_string()"
h = kdb::connect(HOST,PORT,usernamePassword)
re = kdb::loadTable(h, DATA_DIR+"/kdb_sample/2022.06.17/Daily/", string())
ex = kdb::loadTable(h, DATA_DIR+"/kdb_sample/2022.06.17/Daily/")
assert 1, eqObj(re.values(), ex.values())

@testing:case = "test_kdb_loadTable_not_sym"
re = kdb::loadTable(h, DATA_DIR+"/kdb_sample/2022.06.17/Daily/", DATA_DIR + "/kdb_sample/sym_ORD")
ex = kdb::loadTable(h, DATA_DIR+"/kdb_sample/2022.06.17/Daily/")
assert 1, eqObj(re.values(), ex.values())

@testing:case = "test_kdb_loadTable_more_than_three_param",syntaxError=1
re = kdb::loadTable(h, DATA_DIR+"/kdb_sample/2022.06.17/Daily/", DATA_DIR + "/kdb_sample/sym", 1)

@testing:case = "test_kdb_loadTable_less_than_three_param",syntaxError=1
re = kdb::loadTable(h)

@testing:case = "test_kdb_loadFile_tablePath_string()",exception=1
re = kdb::loadFile(string(), DATA_DIR + "/kdb_sample/sym")

@testing:case = "test_kdb_loadFile_symPath_string()",exception=1
re = kdb::loadFile(DATA_DIR+"/kdb_sample/2022.06.17/Daily/", string())

@testing:case = "test_kdb_loadFile_more_than_two_param",syntaxError=1
re = kdb::loadFile(DATA_DIR+"/kdb_sample/2022.06.17/Syms", DATA_DIR + "/kdb_sample/sym", 1)

@testing:case = "test_kdb_loadFile_not_sym",exception=1
re = kdb::loadFile(DATA_DIR+"/kdb_sample/2022.06.17/Syms", DATA_DIR + "/kdb_sample/sym_ORD")

@testing:case = "test_kdb_loadFile_less_than_two_param",exception=1
re = kdb::loadFile()

@testing:case = "test_kdb_loadTable_not_create_connect", syntaxError = 1
h = kdb::connect(HOST,PORT,usernamePassword)
re = kdb::loadTable(h1, DATA_DIR+"/kdb_sample/2022.06.17/Daily/", DATA_DIR + "/kdb_sample/sym")
kdb::close(h)

@testing:case = "test_kdb_loadTable_sympath_is_tablepath"//, exception = 1
h = kdb::connect(HOST,PORT,usernamePassword)
re = kdb::loadTable(h, DATA_DIR+"/kdb_sample/2022.06.17/Daily/",DATA_DIR+"/kdb_sample/2022.06.17/Daily/")
ex = kdb::loadTable(h, DATA_DIR+"/kdb_sample/2022.06.17/Daily/")
assert 1, each(eqObj, re.values(), ex.values())

@testing:case = "test_kdb_loadTable_multi_times"
h = kdb::connect(HOST,PORT,usernamePassword)
largere = kdb::loadTable(h, DATA_DIR+"/kdb_sample/2022.06.17/Daily/", DATA_DIR + "/kdb_sample/sym")
for(i in 1..20){
	re = kdb::loadTable(h, DATA_DIR+"/kdb_sample/2022.06.17/Daily/", DATA_DIR + "/kdb_sample/sym")
	largere.append!(re)
}
re = largere
kdb::close(h)
schemaTable = extractTextSchema(DATA_DIR+"/csv_sample/Daily.csv")
update  schemaTable set type="SYMBOL" where name=`status
update  schemaTable set type="SYMBOL" where name=`limitupdown
update  schemaTable set type="DOUBLE" where name=`presettle
update  schemaTable set type="DOUBLE" where name=`settle
eqObj((schema(re).colDefs)[`typeString],schemaTable[`type])
largeex = loadText(DATA_DIR+"/csv_sample/Daily.csv",,schemaTable)
for(i in 1..20){
	ex =  loadText(DATA_DIR+"/csv_sample/Daily.csv",,schemaTable)
	largeex.append!(ex)
}
ex =largeex
assert 1,eqObj(re[`sym],ex[`sym])
assert 2,eqObj(re[`preclose],ex[`preclose],2)
assert 3,eqObj(re[`open],ex[`open],2)
assert 4,eqObj(re[`high],ex[`high],2)
assert 5,eqObj(re[`low],ex[`low],2)
assert 6,eqObj(re[`close],ex[`close],2)
assert 7,eqObj(re[`volume]/1E10,ex[`volume]/1E10,2)
assert 8,eqObj(re[`amt]/1E11,ex[`amt]/1E11,2)
assert 9,eqObj(re[`pctChg],ex[`pctChg],2)
assert 10,eqObj(re[`vwap],ex[`vwap],2)
assert 11,eqObj(re[`adjfactor],ex[`adjfactor],2)
assert 12,eqObj(re[`turn],ex[`turn],2)
assert 13,eqObj(re[`floatShares]/1E10,ex[`floatShares]/1E10,2)
assert 14,eqObj(re[`totalShares]/1E10,ex[`totalShares]/1E10,2)
assert 15,eqObj(re[`limitupdown],ex[`limitupdown])
assert 16,eqObj(re[`pe],ex[`pe],2)
assert 17,eqObj(re[`pb],ex[`pb],2)
assert 18,eqObj(re[`status],ex[`status])
assert 19,eqObj(re[`presettle],ex[`presettle])
assert 20,eqObj(re[`settle],ex[`settle])

@testing:case = "test_kdb_loadFile_multi_times"
largere = kdb::loadFile(DATA_DIR+"/kdb_sample/allDataTypes/splayedTable",DATA_DIR+"/kdb_sample/allDataTypes/sym")
for(i in 1..10){
	re = kdb::loadFile(DATA_DIR+"/kdb_sample/allDataTypes/splayedTable",DATA_DIR+"/kdb_sample/allDataTypes/sym")
	largere.append!(re)
}
schemaTable = extractTextSchema(DATA_DIR+"/csv_sample/test.csv")
schemaTable[`type] = schema(re).colDefs[`typeString]
update schemaTable set type=`STRING where name in `nanostamp`month`nano
largeex = loadText(DATA_DIR+"/csv_sample/test.csv",,schemaTable)
for(i in 1..10){
	ex = loadText(DATA_DIR+"/csv_sample/test.csv",,schemaTable)
	largeex.append!(ex)
}
assert 1,eqObj(re[`bool],ex[`bool])
assert 2,eqObj(re[`uuid],ex[`uuid])
assert 3,eqObj(re[`byte],take(char([127,6,0,128,255]),2000))
assert 4,eqObj(re[`short],ex[`short])
assert 5,eqObj(re[`int],ex[`int])
assert 6,eqObj(re[`long],ex[`long])
assert 7,eqObj(re[`float],ex[`float])
assert 8,eqObj(re[`double],ex[`double])
assert 9,eqObj(re[`char],take(char(['c','0','|',' ','a']),2000))
assert 10,eqObj(re[`str],ex[`str])
exTime = strReplace(ex[`nanostamp],"D","T")
exTime = strReplace(exTime,"-",".")
assert 11,eqObj(string(re[`nanostamp]),exTime)
reTime = strReplace(string(re[`month]),".","-")
reTime = substr(reTime,0,strlen(reTime)-1)
assert 12,eqObj(reTime,ex[`month])
assert 13,eqObj(re[`date],ex[`date])
assert 14,eqObj(re[`timestamp],ex[`timestamp])
assert 15,eqObj(string(re[`nano]),substr(ex[`nano],2,strlen(ex[`nano])-1))
assert 16,eqObj(re[`minute],ex[`minute])
assert 17,eqObj(re[`second],ex[`second])
assert 18,eqObj(re[`time],ex[`time])

@testing:case = "test_kdb_loadFile_UDF"
def f1(path){
	return [string(path+"/kdb_sample/allDataTypes/splayedTable"), string(path+"/kdb_sample/allDataTypes/sym")]
}
ex = kdb::loadFile(DATA_DIR+"/kdb_sample/allDataTypes/splayedTable",DATA_DIR+"/kdb_sample/allDataTypes/sym")
re = kdb::loadFile(f1(DATA_DIR)[0],f1(DATA_DIR)[1])
assert 1, eqObj(re.values(),ex.values())

@testing:case = "test_kdb_loadFile_sympath_is_tablepath", exception = 1
kdb::loadFile(DATA_DIR+"/kdb_sample/allDataTypes/splayedTable",DATA_DIR+"/kdb_sample/allDataTypes/splayedTable")

@testing:case = "test_kdb_loadTable_widetable"
h = kdb::connect(HOST,PORT,usernamePassword)
re = kdb::loadTable(h, DATA_DIR+ "/kdb_sample/widetable")
kdb::close(h)
ex = table(1 as f1, 2 as f2, 3 as f3, 4 as f4, 5 as f5, 6 as f6, 7 as f7, 8 as f8, 9 as f9, 10 as f10, 1 as f11, 2 as f12, 3 as f13, 4 as f14, 5 as f15, 6 as f16, 7 as f17, 8 as f18, 9 as f19, 10 as f20, 1 as f21, 2 as f22, 3 as f23, 4 as f24, 5 as f25, 6 as f26, 7 as f27, 8 as f28, 9 as f29, 10 as f30, 1 as f31, 2 as f32, 3 as f33, 4 as f34, 5 as f35, 6 as f36, 7 as f37, 8 as f38, 9 as f39, 10 as f40, 1 as f41, 2 as f42, 3 as f43, 4 as f44, 5 as f45, 6 as f46, 7 as f47, 8 as f48, 9 as f49, 10 as f50, 1 as f51, 2 as f52, 3 as f53, 4 as f54, 5 as f55, 6 as f56, 7 as f57, 8 as f58, 9 as f59, 10 as f60, 1 as f61, 2 as f62, 3 as f63, 4 as f64, 5 as f65, 6 as f66, 7 as f67, 8 as f68, 9 as f69, 10 as f70, 1 as f71, 2 as f72, 3 as f73, 4 as f74, 5 as f75, 6 as f76, 7 as f77, 8 as f78, 9 as f79, 10 as f80, 1 as f81, 2 as f82, 3 as f83, 4 as f84, 5 as f85, 6 as f86, 7 as f87, 8 as f88, 9 as f89, 10 as f90, 1 as f91, 2 as f92, 3 as f93, 4 as f94, 5 as f95, 6 as f96, 7 as f97, 8 as f98, 9 as f99, 10 as f100, 1 as f101, 2 as f102, 3 as f103, 4 as f104, 5 as f105, 6 as f106, 7 as f107, 8 as f108, 9 as f109, 10 as f110, 1 as f111, 2 as f112, 3 as f113, 4 as f114, 5 as f115, 6 as f116, 7 as f117, 8 as f118, 9 as f119, 10 as f120, 1 as f121, 2 as f122, 3 as f123, 4 as f124, 5 as f125, 6 as f126, 7 as f127, 8 as f128, 9 as f129, 10 as f130)
assert 1, each(eqObj, re.values(), ex.values())
