dnl Process this file with autoconf to produce a configure script.
dnl configure.in for gnuplot on Unix.
dnl
dnl NB: Change version/patchlevel in TWO places below
dnl

AC_INIT(gnuplot, 5.4.0)

AC_CONFIG_SRCDIR(src/graphics.c)
AC_PREREQ([2.69])
AC_CONFIG_HEADERS(config.h:config.hin)

dnl The line below is for use during development
dnl AC_DEFINE(DEVELOPMENT_VERSION,1,[Provide contact info for gnuplot develoment])
dnl The line below is for packaging a release version
AM_CONDITIONAL([DEVELOPMENT_VERSION], 0)

AM_INIT_AUTOMAKE([1.10 subdir-objects])

AM_MAINTAINER_MODE

VERSION_MAJOR="5.4"
PATCHLEVEL="`cat $srcdir/PATCHLEVEL`"
AC_DEFINE_UNQUOTED(VERSION_MAJOR,["$VERSION_MAJOR"],[The main version number])
AC_DEFINE_UNQUOTED(PATCHLEVEL,["$PATCHLEVEL"],[The patch level, a.k.a. micro version number])

dnl configure.in body

dnl Compiler characteristics
dnl Check for the const and inline keywords and ANSI style stringification
AC_USE_SYSTEM_EXTENSIONS
AC_PROG_CC
AC_PROG_CPP
AC_PROG_OBJC
AC_C_CONST
AC_C_INLINE
AC_C_STRINGIZE
AC_PROG_LN_S

if test "${build}" != "${host}"
then
  CC=${CC-${host_alias-gcc}}
  CFLAGS=${CFLAGS-"-g -O2"}
  CXX=${CXX-${host_alias-c++}}
  CXXFLAGS=${CXXFLAGS-"-g -O2"}
  CC_FOR_BUILD=${CC_FOR_BUILD-gcc}
else
  # The cross-compilation patch originally had CC_FOR_BUILD = "\$(CC)"
  # but that causes a recursive definition in docs/Makefile. EAM Dec 2009.
  CC_FOR_BUILD="${CC}"
  AC_PROG_CC

  # We must set the default linker to the linker used by gcc for the correct
  # operation of libtool.  If LD is not defined and we are using gcc, try to
  # set the LD default to the ld used by gcc.
  if test -z "$LD"
  then
    if test "$GCC" = yes
    then
      case $build in
      *-*-mingw*)
        gcc_prog_ld=`$CC -print-prog-name=ld 2>&1 | tr -d '\015'` ;;
      *)
        gcc_prog_ld=`$CC -print-prog-name=ld 2>&1` ;;
      esac
      case $gcc_prog_ld in
      # Accept absolute paths.
      [[\\/]* | [A-Za-z]:[\\/]*)]
        LD="$gcc_prog_ld" ;;
      esac
    fi
  fi

  CXX=${CXX-"c++"}
  CFLAGS=${CFLAGS-"-g -O2"}
  CXXFLAGS=${CXXFLAGS-"-g -O2"}
fi
AM_PROG_CC_C_O
AC_SUBST(CC_FOR_BUILD)

dnl large file support
AC_CHECK_TYPES([off_t])
AC_FUNC_FSEEKO
AC_SYS_LARGEFILE

dnl timezone support
AC_CHECK_MEMBERS([struct tm.tm_gmtoff, struct tm.__tm_gmtoff],,,[
#include <sys/types.h>
#include <time.h>])

AC_ARG_WITH(libcerf,dnl
[  --without-libcerf       build without special functions from libcerf (default enabled)],,
  [test -z "${with_libcerf}" && with_libcerf=yes])

if test "${with_libcerf}" = yes ; then
  dnl The libcerf library contains a set of complex-valued special functions
  dnl related to the error function (cerf, erfi, Dawson's integral, Voigt profile).
  dnl If libcerf is installed then we can use them.
  PKG_CHECK_MODULES_NOFAIL([LIBCERF], [libcerf],
      [
      CPPFLAGS="$CPPFLAGS $LIBCERF_CFLAGS"
      LDFLAGS="$LDFLAGS $LIBCERF_LIBS"
      ],
  )
  AC_SEARCH_LIBS([cdawson], [cerf],
      [AC_DEFINE([HAVE_LIBCERF], 1, [define if you have libcerf])
      have_libcerf=yes]
  )
fi

dnl Various programs
dnl X/Emacs for building .texi version of docs
test x"$EMACS" = xt && EMACS=
AC_CHECK_PROGS(EMACS, emacs xemacs, no)

dnl Allow manual specification of tex
AC_ARG_WITH(latex,[  --without-latex         disable installation of latex support files],[],[with_latex="yes"])
if test "$with_latex" = yes; then
  AC_CHECK_PROGS(PLAINTEX, tex, no)
  AC_CHECK_PROGS(LATEX, latex latex2e, no)
  AC_CHECK_PROGS(PDFLATEX, pdflatex, no)
  test "$PLAINTEX" = "no" -o "$LATEX" = no -o "$PDFLATEX" = "no" && with_latex="no"
else
    PLAINTEX="no"
    LATEX="no"
    PDFLATEX="no"
fi
AM_CONDITIONAL(HAVE_LATEX, test "$with_latex" != no)
AC_CHECK_PROGS(DVIPS, dvips, no)
AC_CHECK_PROGS(TROFF, troff, no)
AC_CHECK_PROGS(LATEX2HTML, latex2html, no)

AC_ARG_WITH(texdir,dnl
  [--with-texdir=DIR       where to install latex style files (default: ask kpsexpand)],
  TEXDIR="$withval",
  TEXDIR="no")
dnl Allow manual specification of kpsexpand 
AC_CHECK_PROGS(KPSEXPAND, kpsexpand, no)
AC_CHECK_PROGS(TEXHASH, texhash, true)
AC_ARG_WITH(kpsexpand,dnl
  [--with-kpsexpand        search for kpsexpand at run-time (default disabled)],
  [if test "$withval" = yes; then
    test "$KPSEXPAND" != "no" || AC_MSG_ERROR(dnl
      [You tell me to use kpsexpand, but there is no kpsexpand])
    AC_DEFINE(HAVE_KPSEXPAND,1,[ Define if you want to use kpsexpand (TeX). ])
  fi])

dnl we only care about texdir if latex is enabled
if test "$with_latex" = yes; then
  test "$KPSEXPAND" = "no" -a "$TEXDIR" = "no" && AC_MSG_ERROR(dnl
    [texdir is not given and there is no kpsexpand, please tell where to install])
  dnl texdir has priority
  if test "$TEXDIR" = "no"; then
    TEXDIR=`$KPSEXPAND '$TEXMFLOCAL'`
    if test "x$TEXDIR" = "x" -o "$TEXDIR" = "\$TEXMFLOCAL"; then
      if test "x$prefix" != "xNONE"; then
        TEXDIR=${prefix}/share/texmf
      else
        TEXDIR=${ac_default_prefix}/share/texmf
      fi
    fi
    TEXDIR=${TEXDIR}/tex/latex/gnuplot
  fi
fi

dnl X Window System files.
AC_SUBST(LIBRARIES_FOR_X)
AC_PATH_XTRA

dnl Needed for LynxOS until AC_PATH_XTRA is fixed
if test "$ac_cv_func_gethostbyname" = no; then
  if test "$ac_cv_lib_nsl_gethostbyname" = no; then
    AC_CHECK_LIB(bsd, gethostbyname, X_EXTRA_LIBS="$X_EXTRA_LIBS -lbsd")
  fi
fi

if test "$no_x" != yes; then
  CPPFLAGS="$CPPFLAGS $X_CFLAGS"
  LIBRARIES_FOR_X="$X_LIBS -lX11 $X_EXTRA_LIBS"
  AC_DEFINE(X11,1,[ Define if you are using the X11 window system. ])
  AC_ARG_WITH(x-dcop,dnl
  [--with-x-dcop           gnuplot_x11 can use KDE3/DCOP for space-raises-console],
  AC_DEFINE(USE_KDE3_DCOP,1,[ Define if gnuplot_x11 can use KDE3 DCOP to raise konsole]))
fi
AM_CONDITIONAL(BUILD_GNUPLOT_X11, test "$no_x" != yes)

dnl Operating systems.
dnl FIXME AC_DEFINE(ISC22)
dnl FIXME AC_DEFINE(KSR)
dnl Check for MSDOS and djgpp, Apple MacOsX, BeOS
GP_MSDOS
GP_APPLE
GP_BEOS
GP_ALPHA
AM_CONDITIONAL(BUILD_SRC_BEOS_SUBDIR, test x$build_beos_subdir = xyes)

dnl _instead_ of -lm ...
AC_CHECK_FUNC(sin,,[AC_CHECK_LIB(m,sin)])

dnl Header files. ANSI first
dnl We prefer that the absense of a macro is the norm, so in syscfg.h
dnl configure's HAVE_XXXX defines are translated into NO_XXXX for ANSI
dnl headers and functions
AC_HEADER_STDC

dnl Header files
dnl ANSI/ISO C, POSIX, others
AC_CHECK_HEADERS(dirent.h errno.h float.h langinfo.h limits.h locale.h math.h \
  stdlib.h string.h time.h sys/time.h sys/types.h \
  sys/bsdtypes.h sys/ioctl.h sys/param.h sys/select.h sys/socket.h \
  sys/stat.h sys/systeminfo.h sys/timeb.h sys/utsname.h \
  libc.h malloc.h poll.h sgtty.h termios.h values.h dirent.h \
  inttypes.h \
  dlfcn.h dl.h
)

AC_HEADER_STDBOOL

if test "$ac_cv_header_sys_stat_h" = yes; then
  AC_HEADER_STAT
fi

AC_HEADER_SYS_WAIT

dnl Check for external functions plugin infrastructure
AC_ARG_ENABLE(plugins,dnl
[  --disable-plugins       disable support for importing external functions],,)

if test "$enable_plugins" != no; then
  if test "$ac_cv_header_dl_h" = yes; then
    AC_SEARCH_LIBS(shl_load, dld,
      [AC_DEFINE(HAVE_EXTERNAL_FUNCTIONS,1,[ Define if external function plugins are to be supported. ])
       have_external_functions=yes
      ])
  fi
  if test "$ac_cv_header_dlfcn_h" = yes; then
    AC_SEARCH_LIBS(dlopen, dl,
      [AC_DEFINE(HAVE_EXTERNAL_FUNCTIONS,1,[ Define if external function plugins are to be supported. ])
       have_external_functions=yes
      ])
  fi
fi
AM_CONDITIONAL(BUILD_PLUGIN, test "$have_external_functions" = yes)

dnl check if unistd actually declares anything.
AC_MSG_CHECKING(for unistd.h)
AC_EGREP_HEADER(execv, unistd.h,
  [AC_DEFINE(HAVE_UNISTD_H) AC_MSG_RESULT(yes)],
   AC_MSG_RESULT(no))

dnl check if errno.h header declares errno
AC_MSG_CHECKING(if errno variable is declared)
AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <stdio.h>
#ifdef HAVE_ERRNO_H
#include <errno.h>
#endif]], [[errno=0]])],[AC_MSG_RESULT(yes)],[AC_DEFINE(EXTERN_ERRNO,1,[ Define if <errno.h> declares errno. ])
   AC_MSG_RESULT(no)])


dnl Types.
AC_TYPE_SIZE_T
AC_MSG_CHECKING(for time_t in time.h)
AC_EGREP_HEADER(time_t,time.h,
  [AC_MSG_RESULT(yes)
   AC_DEFINE(HAVE_TIME_T_IN_TIME_H,1,
             [ Define if time_t is declared in time.h. ])])
 

dnl Functions. Standard first, then others

dnl ANSI/ISO and their predecessors
dnl sunos 4 has on_exit() in place of atexit()
dnl gamma is called lgamma linux
dnl we prefer lgamma over gamma, see specfun.c
dnl math lib is already available, see operating systems part
AC_CHECK_FUNCS(atexit memcpy memmove memset \
  on_exit bcopy bzero \
  setvbuf strerror strchr strrchr strstr \
  index rindex \
  erf erfc gamma lgamma tgamma \
  getcwd poll pclose popen fdopen select sleep stpcpy \
  strcspn strdup strndup strnlen strcasecmp stricmp strncasecmp strnicmp \
  sysinfo tcgetattr vfprintf doprnt uname usleep
)

dnl HBB 20030624: see if signgam is declared by math.h
AC_CHECK_DECLS([signgam],,,
[#if HAVE_MATH_H
#include <math.h>
#endif
])

dnl check, if we have sigsetjmp and siglongjmp.
dnl a trivial AC_CHECK_FUNCS(sigsetjmp) won't do
dnl because sigsetjmp() might be a macro declared
dnl in <setjmp.h>. (joze)
AC_MSG_CHECKING(for sigsetjmp)
AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <setjmp.h>]], [[jmp_buf env; sigsetjmp(env, 1);]])],[AC_MSG_RESULT(yes)
   AC_DEFINE(HAVE_SIGSETJMP,1,
             [ Define if we have sigsetjmp(). ])],[AC_MSG_RESULT(no)])

if test "$ac_cv_func_pclose" = yes -a "$ac_cv_func_popen" = yes ; then
  AC_DEFINE(PIPES,1,[ Define if you do have the popen and pclose functions. ])
fi

AC_MSG_CHECKING(if malloc(0) returns 0)
AC_RUN_IFELSE([AC_LANG_PROGRAM([[#ifdef HAVE_STDLIB_H
#include <stdlib.h>
#endif
]],
[[if(malloc(0)==0) return 1;]])],
[malloc_zero_returns_zero=no],
[malloc_zero_returns_zero=yes],
[malloc_zero_returns_zero=yes])
AC_MSG_RESULT([$malloc_zero_returns_zero])
AS_IF([test x$malloc_zero_returns_zero = xyes],
      [AC_DEFINE([MALLOC_ZERO_RETURNS_ZERO],[1],[Define to 1 if malloc(0)==0])])

dnl Argument types of select()
AC_FUNC_SELECT_ARGTYPES

dnl On SVR3.
dnl FIXME AC_DEFINE(CRIPPLED_SELECT)

dnl .gih help file location
eval gp_datadir=$datadir
if test "$gp_datadir" = NONE/share; then
  datadir="/usr/local/share"
fi
pkgdatadir="$datadir/$PACKAGE"
AC_ARG_WITH(gihdir,dnl
[  --with-gihdir=DIR       location of .gih help text file
                          (default PREFIX/share/PACKAGE/VERSION)],
  GIHDIR="$withval",
  GIHDIR="$pkgdatadir/$VERSION_MAJOR")

dnl TODO: simplify, update ggi support
dnl new ggi driver
GGI_SUPPORT=no
AC_ARG_WITH(ggi,dnl
[  --with-ggi[=DIR]          enable the ggi driver],
  [if test "$withval" != no; then
     if test -d $withval/include; then
       CPPFLAGS="$CPPFLAGS -I$withval/include"
     fi
     if test -d $withval/lib; then
       LDFLAGS="$LDFLAGS -L$withval/lib"
     fi
     AC_CHECK_LIB(ggi,ggiInit,
       [TERMLIBS="-lggi $TERMLIBS"
        AC_DEFINE(USE_GGI_DRIVER,1,
                  [ Define this to build the General Graphics Interface (ggi) driver. ])
        GGI_SUPPORT=yes
	dnl check for customized libxmi (xmiInit not in normal libxmi)
        AC_CHECK_LIB(xmi,xmiInit,
          [TERMLIBS="-lxmi $TERMLIBS"
           AC_CHECK_HEADERS(ggi/xmi.h)])
        dnl check if libggiwmh and ggi/wmh.h are found
        AC_CHECK_LIB(ggiwmh,ggiWmhInit,
          [TERMLIBS="-lggiwmh $TERMLIBS"
           AC_CHECK_HEADERS(ggi/wmh.h,,
             AC_MSG_WARN([found ggiwmh library but not ggi/wmh.h
please add path to ggi/wmh.h to CPPFLAGS in Makefile]))
          ])])
   fi])

dnl Use builtin readline or GNU readline or NetBSD editline
AC_ARG_WITH(readline,dnl
[  --with-readline=builtin  use the built-in readline
  --with-readline=gnu      use the GNU readline library (default if present)
  --with-readline=bsd      use the NetBSD editline library (NB: does not handle UTF-8!)
  --with-readline=DIR      specify the location of readline/editline
  --without-readline       same as --with-readline=builtin], ,
  test -z "$with_readline" && with_readline=gnu)

AS_IF([test "x${with_readline}" = "xno"], with_readline="builtin", )

dnl Gnuplot history
AC_ARG_ENABLE(history-file,dnl
[  --disable-history-file  do not use history file],,
  test -z "$enable_history_file" && enable_history_file=yes)

dnl GNU readline and the required terminal library
if test "$with_readline" != no; then
  _libs="$LIBS"
  if test "$with_readline" != builtin; then

    dnl check for terminal library
    dnl this is a very cool solution from octave's configure.in
    gp_tcap=""
    for termlib in ncurses curses termcap terminfo termlib; do
      AC_CHECK_LIB(${termlib}, tputs, [gp_tcap="$gp_tcap -l$termlib"])
      case "$gp_tcap" in
        *-l${termlib}*)
          break
        ;;
      esac
    done

    dnl explicit path to readline/editline
    if test "$with_readline" != gnu -a "$with_readline" != bsd; then
      if test -d $with_readline/include; then
        CPPFLAGS="$CPPFLAGS -I$with_readline/include"
      fi
      if test -d $with_readline/lib; then
        LDFLAGS="$LDFLAGS -L$with_readline/lib"
      fi
      dnl Could be either libedit or readline!
      if test ! -d $with_readline/include/readline; then
        if test -d $with_readline/include/editline; then
          AC_MSG_WARN([$with_readline contains libedit, not readline!])
          with_readline=bsd
        else
          AC_MSG_ERROR([No readline found in $with_readline])
        fi
      fi
    fi

    if test "$with_readline" = bsd; then

      AC_CHECK_LIB(edit, readline,
        [TERMLIBS="-ledit $TERMLIBS"],
	 [AC_MSG_WARN([Could not find BSD editline library ])
	  with_readline=builtin],)

      if test "$ac_cv_lib_edit_readline" = yes; then
        AC_DEFINE(HAVE_LIBEDITLINE,1,
                [ Define if you are using the BSD editline library. ])
        AC_CHECK_HEADERS(editline/readline.h,,
          AC_MSG_WARN([found BSD editline library but not readline.h please add path to readline.h to CPPFLAGS in Makefile]))

        if test "$enable_history_file" = yes; then
            AC_DEFINE(GNUPLOT_HISTORY,1,
                      [ Define if you want to use a gnuplot history file. ])
        fi
      fi

    else # !bsd

    AC_CHECK_LIB(readline, remove_history,
      [TERMLIBS="-lreadline $gp_tcap $TERMLIBS"],,[${gp_tcap}])
    if test "$ac_cv_lib_readline_remove_history" = no; then
      dnl OSX keeps history functions in a separate library
      AC_CHECK_LIB(history, remove_history,
        [TERMLIBS="-lreadline -lhistory $gp_tcap $TERMLIBS"],
        [ AC_MSG_WARN([GNU readline not found - falling back to builtin readline])
          with_readline=builtin ]
        ,[${gp_tcap}])
    fi

    dnl Work around some functions missing from the OSX readline library.
    dnl Would it be better to simply switch to with_readline=bsd in this case?
    AC_SEARCH_LIBS(rl_ding, readline, ,
	AC_DEFINE(MISSING_RL_DING,1,[ Define if your libreadline has no rl_ding]),
        [${TERMLIBS}])
    AC_SEARCH_LIBS(rl_forced_update_display, readline, ,
	AC_DEFINE(MISSING_RL_FORCED_UPDATE_DISPLAY,1,[ Define if your libreadline has no rl_force_update_display]),
        [${TERMLIBS}])
    AC_SEARCH_LIBS(rl_reset_after_signal, readline,
	AC_DEFINE(HAVE_READLINE_RESET,1,[ Define if your libreadline has rl_reset_after_signal]),
	,
        [${TERMLIBS}])
    AC_SEARCH_LIBS(_rl_signal_handler, readline,
	AC_DEFINE(HAVE_READLINE_SIGNAL_HANDLER,1,[ Define if your libreadline has _rl_signal_handler]),
	,
        [${TERMLIBS}])
    AC_SEARCH_LIBS(rl_pending_signal, readline,
	AC_DEFINE(HAVE_READLINE_PENDING_SIGNAL,1,[ Define if your libreadline has rl_pending_signal]),
	,
        [${TERMLIBS}])
    # Warning: rl_complete_with_tilde_expansion is an int, not a function.
    # I.e., it is not callable.  AC_CHECK_LIB seems to work anyhow, but...
    AC_SEARCH_LIBS(rl_complete_with_tilde_expansion, readline, , 
	AC_DEFINE(MISSING_RL_TILDE_EXPANSION,1,[ Define if your libreadline has no rl_complete_with_tilde_expansion]),
        [${TERMLIBS}])

    if [test "$ac_cv_lib_readline_remove_history" != no || test "$ac_cv_lib_history_remove_history" != no]; then
      if test "$with_readline" = bsd; then
          AC_DEFINE(HAVE_LIBEDITLINE,1,
                [ Define if you are using the BSD editline library. ])
      else
          AC_DEFINE(HAVE_LIBREADLINE,1,
                [ Define if you are using the GNU readline library. ])
      fi
      AC_CHECK_HEADERS(readline/readline.h,,
        AC_MSG_WARN([found GNU readline library but not readline.h
please add path to readline.h to CPPFLAGS in Makefile]))
      AC_CHECK_HEADERS(readline/history.h,,
        AC_MSG_WARN([found GNU readline library but not history.h
please add path to history.h to CPPFLAGS in Makefile]))

      if test "$enable_history_file" = yes; then
          AC_DEFINE(GNUPLOT_HISTORY,1,
                    [ Define if you want to use a gnuplot history file. ])
      fi

    fi # ! ac_cv_lib_readline_readline = no

   fi # ! with_readline = bsd

  fi # ! with_readline != builtin 

  if test "$with_readline" = builtin; then
    AC_CHECK_FUNCS(wcwidth)
    AC_CHECK_HEADERS(wchar.h,,
        AC_MSG_WARN([please add path to wchar.h to CPPFLAGS in Makefile]))
    AC_DEFINE(READLINE,1,
              [ Define if you want to use the included readline function. ])
    if test "$enable_history_file" = yes; then
       AC_DEFINE(GNUPLOT_HISTORY,1,
                [ Define if you want to use a gnuplot history file. ])
    fi
  fi

  LIBS="$_libs"
fi
dnl end readline

dnl check presence of z library
dnl TODO: path to zlib includes; -lz -lm specified multiple times
dnl       we don't do anything about missing png/gd includes either
AC_CHECK_LIB(z,deflate,
  [TERMLIBS="$TERMLIBS -lz"
   AC_DEFINE(HAVE_LIBZ,1,[ Define if you have zlib. ])
   AC_CHECK_HEADER(zlib.h,,
     [AC_MSG_WARN([found z library but not zlib.h
please add path to zlib.h to CPPFLAGS in Makefile])])],
  AC_MSG_WARN([zlib is required - see http://www.gzip.org/zlib/]))

dnl check presence of gd library
dnl we don't check for libfreetype and libjpeg locations - if gd requires
dnl them, the gdlib-config scipt contains all the required information
AC_ARG_WITH(gd,dnl
[  --with-gd[=DIR]           location of gd library (png jpeg gif terminals)],,
  with_gd=yes)

if test "$with_gd" != no; then
  AC_PATH_PROG([GDLIB_CONFIG], [gdlib-config])
  if test -n "$GDLIB_CONFIG"; then
    libgd_CPPFLAGS=`$GDLIB_CONFIG --cflags`
    libgd_LDFLAGS=`$GDLIB_CONFIG --ldflags`
    libgd_LIBS=`$GDLIB_CONFIG --libs`
  elif test -d "$with_gd"; then
    libgd_CPPFLAGS="-I$with_gd/include"
    libgd_LDFLAGS="-L$with_gd/lib"
    libgd_LIBS="-ljpeg -lpng -lfreetype -lz"
  fi

  _cppflags="$CPPFLAGS"
  _ldflags="$LDFLAGS"
  _libs="$LIBS"
  CPPFLAGS="$CPPFLAGS $libgd_CPPFLAGS"
  LDFLAGS="$LDFLAGS $libgd_LDFLAGS"
  LIBS="$LIBS $libgd_LIBS"

  AC_CHECK_LIB(gd,gdImageCreateTrueColor,
    [dnl found gd library
     AC_DEFINE(HAVE_LIBGD,1,[ Define if you have gd library. ])
     AC_CHECK_HEADERS(gd.h,,
       AC_MSG_WARN([please add path to gd.h to CPPFLAGS in Makefile]))

     dnl gif support in libgd
     AC_CHECK_LIB(gd,gdImageGif,
       [AC_DEFINE(HAVE_GD_GIF,1,[ Define if libgd supports gif. ])])
     AC_CHECK_LIB(gd,gdImageGifAnimBegin,
       [AC_DEFINE(GIF_ANIMATION,1,[ Define if libgd supports animated gifs. ])])

     dnl jpeg support in libgd
     AC_CHECK_LIB(gd,gdImageJpeg,
       [AC_DEFINE(HAVE_GD_JPEG,1,[ Define if libgd supports jpeg. ])])

     dnl freetype support in libgd
     AC_CHECK_LIB(gd,gdImageStringFT,
       AC_DEFINE(HAVE_GD_TTF,1,
           [ Define if libgd supports TrueType fonts through libfreetype. ]))

     dnl png support in libgd
     AC_CHECK_LIB(gd,gdImagePng,
       [AC_DEFINE(HAVE_GD_PNG,1,[ Define if libgd supports png. ])])

    ],[dnl gd library not found
       AC_MSG_WARN([libgd not found or too old, version >= 2.0 is required])
       with_gd=no
    ])

  dnl piece it all together
  if test "$with_gd" = no; then
    CPPFLAGS="$_cppflags"
    LDFLAGS="$_ldflags"
    LIBS="$_libs"
  else
    LIBS="$_libs"
    TERMLIBS="$TERMLIBS -lgd $libgd_LIBS"
  fi

fi
dnl end gd

dnl The iconv library can be used to switch character encodings.
dnl So far this is only used by gd.trm and emf.trm.
AC_SEARCH_LIBS([iconv_open], [iconv],
  [AC_CHECK_HEADER([iconv.h],
    [AC_DEFINE([HAVE_ICONV], 1, [define if you have libiconv and iconv.h])]
  )]
)

dnl check presence of lua/TikZ support
AC_ARG_WITH(lua,dnl
[  --without-lua           disable lua/TikZ terminal (default enabled)],,
  [test -z "${with_lua}" && with_lua=yes])

dnl Some distributions allow for parallel installation of different
dnl lua versions.  We test for that in order of pereference.
if test "${with_lua}" = yes ; then
  LUA=lua
  PKG_CHECK_MODULES([LUA], [lua], LUAFOUND=yes,
    [PKG_CHECK_MODULES([LUA], [lua5.3], LUA=lua5.3, 
      [PKG_CHECK_MODULES([LUA], [lua5.2], LUA=lua5.2, 
        [PKG_CHECK_MODULES([LUA], [lua5.1], LUA=lua5.1, 
          [LUAFOUND=no])])])])
  if test $pkg_failed != no; then
    AC_MSG_WARN([Could not find support for lua using pkg-config.])
    with_lua=no
  fi

  if test "$with_lua" != no; then
    TERMLIBS="$TERMLIBS $LUA_LIBS"
    CPPFLAGS="$CPPFLAGS $LUA_CFLAGS"
  else
    dnl if pkg-config didn't work, we migh still find it manually
    AC_SEARCH_LIBS(luaL_openlibs, lua lua5.3 lua5.2 lua5.1,
       with_lua=yes, with_lua=no)
  fi
  if test "$with_lua" = yes; then
     AC_DEFINE(HAVE_LUA,1, [ Define if you want the lua/TikZ terminal. ])
     AC_CHECK_HEADERS(lua.h,,
       AC_MSG_WARN([please add path to lua.h to CPPFLAGS in Makefile]))
  fi
  AC_SUBST(LUA)
fi
AM_CONDITIONAL(BUILD_LUA, test "${with_lua}" = yes)
dnl end lua

dnl check presence of caca library
AC_ARG_WITH(caca,dnl
[  --with-caca[=DIR]         where to find the caca library],,
  with_caca=no)

if test "$with_caca" != no; then
  if test -d "$with_caca"; then
    dnl path to libcaca was specified manually
    caca_CPPFLAGS="-I$with_caca/include"
    caca_LDFLAGS="-L$with_caca/lib -Wl,-rpath -Wl,$with_caca/lib"
    caca_LIBS="-lcaca"
    with_caca=yes
  else
    dnl try to use pkg-config first
    PKG_CHECK_MODULES(caca, [caca], [with_caca=yes], [with_caca=no])
    if test $pkg_failed != no; then
      dnl try to locate libcaca using its config tool
      AC_PATH_PROG([CACA_CONFIG], [caca-config])
      if test -n "$CACA_CONFIG"; then
        caca_CPPFLAGS=`$CACA_CONFIG --cflags`
        caca_LDFLAGS=`$CACA_CONFIG --ldflags`
        caca_LIBS=`$CACA_CONFIG --libs`
        with_caca=yes
      else
        dnl libcaca was not found
        AC_MSG_WARN([libcaca not found or too old, version >= 0.99.beta15 is required])
        with_caca=no
      fi
    fi
  fi

  dnl test usability
  _cppflags="$CPPFLAGS"
  _ldflags="$LDFLAGS"
  CPPFLAGS="$caca_CPPFLAGS $CPPFLAGS"
  LDFLAGS="$caca_LDFLAGS $LDFLAGS"
  AC_CHECK_LIB(caca,caca_get_version,
    [dnl found caca library, test for version >= 0.99.beta15 (libcucul merged back)
     AC_CHECK_LIB([caca],[caca_export_canvas_to_memory],,
       [AC_DEFINE(USE_CACA_EXPORT_MEMORY,1,[ Define if your libcaca does not have caca_export_canvas_to_memory but the old caca_export_memory])],[])
     AC_CHECK_DECL([CACA_DEPRECATED],
       [AC_DEFINE(HAVE_LIBCACA,1,[ Define if you have the caca library. ])],
       [AC_MSG_WARN([libcaca header not found or too old, version >= 0.99.beta15 is required])
        with_caca=no],
       [[#include <caca.h>]])
    ],
    [dnl caca library not found
       AC_MSG_WARN([libcaca not found or too old, version >= 0.99.beta15 is required])
       with_caca=no
    ])

  dnl piece it all together
  if test "$with_caca" = no; then
    CPPFLAGS="$_cppflags"
    LDFLAGS="$_ldflags"
  else
    TERMLIBS="$TERMLIBS $caca_LIBS"
  fi
fi
dnl end caca

dnl Process rest of with and enable options

dnl Use .gnuplot file in current directory
AC_ARG_WITH(cwdrc,dnl
[  --with-cwdrc            check current directory for .gnuplot file,
                          normally disabled for security reasons],,)
if test "$with_cwdrc" = yes; then
     AC_DEFINE(USE_CWDRC,1,
               [ Define if you want to read .gnuplot from current directory (SECURITY RISK!).])
fi

dnl Sort help/subtopic tables by row or column
AC_ARG_WITH(row-help,dnl
[  --with-row-help         format help and subtopic tables by row (default)
  --without-row-help      format help and subtopic tables by column],
  [if test "$with_row_help" = no; then
     AC_DEFINE(COLUMN_HELP,1,
               [ Define if you want online help and subtopic tables sorted by column. ])
   fi])

dnl enable multi-byte font support in x11 terminal
AC_ARG_ENABLE(x11-mbfonts,dnl
[  --disable-x11-mbfonts   disable multi-byte font support for x11 ],,
  test -z "$enable_x11_mbfonts" && enable_x11_mbfonts=yes)
  if test "$enable_x11_mbfonts" = yes; then

    _ldflags="$LDFLAGS"
    LDFLAGS="$LDFLAGS $LIBRARIES_FOR_X"

    AC_MSG_CHECKING([for multi-byte support in x11])
    AC_CHECK_LIB(X11, XmbDrawString,
      AC_DEFINE(USE_X11_MULTIBYTE,1,[ Define to enable multi-byte font support for x11 ]),
      enable_x11_mbfonts=no )
    
    LDFLAGS="$_ldflags"
  
  fi

dnl x11_external
AC_ARG_ENABLE(x11_external,dnl
[  --disable-x11-external  disable drawing to windows belonging to external apps],,
  test -z "$enable_x11_external" && enable_x11_external=yes)

if test "$enable_x11_external" = yes; then
  AC_DEFINE(EXTERNAL_X11_WINDOW,1,[ Define if you want to supply pre-existing X11 windows. ])
fi

dnl disable the "space raises console" behaviour
AC_ARG_ENABLE(raise-console,dnl
[  --disable-raise-console spacebar in plot window does not raise console],,
  test -z "$enable_raise_console" && enable_raise_console=yes)
  if test "$enable_raise_console" != yes; then
      AC_DEFINE(DISABLE_SPACE_RAISES_CONSOLE,1,
                [ Define to treat spacebar like any other keystroke. ])
  fi


dnl explicit call to PKG_PROG_PKG_CONFIG because the first call to
dnl PKG_CHECK_MODULES may not happen
PKG_PROG_PKG_CONFIG

dnl  wxWidgets terminal

dnl wxWidgets terminal needs C++
dnl These tests cannot be called conditionally.
dnl These tests are non-fatal on autoconf 2.58 and 2.59,
dnl but it may change in future versions, so we redefine AC_MSG_ERROR.
dnl Even if there is no C++ compiler on the system,
dnl autoconf will set CXX as g++ : this must be reverted.

m4_pushdef([AC_MSG_ERROR],[cxxerror=yes])
AC_PROG_CXX
m4_popdef([AC_MSG_ERROR])

if test "x${cxxerror}" != "xyes"; then
  AC_LANG_PUSH([C++])
  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <iostream>]],
	[[const char hw[] = "Hello, World\n"; std::cout << hw;]])],
	[cxxerror=no
	AC_PROG_CXXCPP],
	[cxxerror=yes
	CXX=$CC])
  AC_LANG_POP([C++])
fi

AC_ARG_ENABLE(wxwidgets,dnl
[  --disable-wxwidgets     wxWidgets terminal (default enabled)],,
  [test -z "${enable_wxwidgets}" && enable_wxwidgets=yes])

if test "${enable_wxwidgets}" = yes ; then
  dnl variable used to determine if all checks pass
  enable_wxwidgets_ok=yes

  dnl Check for the C++ compiler
  if test "x${cxxerror}" = "xyes"; then
    AC_MSG_WARN([No C++ compiler found. The wxWidgets terminal will not be compiled.])
      enable_wxwidgets_ok=no
  fi

  dnl The user can specify another path for wx-config
  WXWIDGETS_PATH="${PATH}"
  AC_ARG_WITH(wx,dnl
  [--with-wx=DIR           Where to find wx-config, the wxWidgets configuration program
    (default search in $PATH)],
    [ if test "${with_wx}" != "no" ; then
	WXWIDGETS_PATH="${with_wx}:${PATH}"
     fi ])

  dnl Look for wx-config in the path
  AC_PATH_PROG(WX_CONFIG, wx-config, no, ${WXWIDGETS_PATH})
  if test "${WX_CONFIG}" = "no"; then
    AC_MSG_WARN([wxWidgets can't be found. You can try --with-wx=DIR to give the right path to wx-config. The wxWidgets terminal will not be compiled.])
    enable_wxwidgets_ok=no
  else

    dnl Ckeck for wxWidgets version
    WXWIDGETS_VERSION=`${WX_CONFIG} --release`
    if expr 2.6 \> ${WXWIDGETS_VERSION} >/dev/null; then
      AC_MSG_WARN([Your development package for wxWidgets is too old, you need at least version 2.6. The wxWidgets terminal will not be compiled.])
      enable_wxwidgets_ok=no
    fi
    if expr ${WXWIDGETS_VERSION} \> 2.8 >/dev/null; then
      AC_DEFINE(WX_NEEDS_XINITTHREADS, 1, [wxWidgets >= 2.9 wants calling program to invoke XInit()])
    fi

    dnl Make sure we're using more than the 'base' wxWidgets. Those 
    if expr `${WX_CONFIG} --basename` : '.*base' >/dev/null; then
      AC_MSG_WARN([You only have the 'base' flavor of wxWidgets. A full wxWidgets library is required. On Debian/Ubuntu, please make sure that you have a 'libwx...-dev' package other than just 'libwxbase...-dev' installed. The wxWidgets terminal will not be compiled.])
      enable_wxwidgets_ok=no
    fi
  fi

  dnl Check for Cairo
  PKG_CHECK_MODULES_NOFAIL(CAIROPANGO, [cairo >= 0.9.0 pango >= 1.22 pangocairo >= 1.10])
  if test $pkg_failed != no; then
    AC_MSG_WARN([The wxWidgets terminal will not be compiled.])
    enable_wxwidgets_ok=no
  fi
fi

if test "${enable_wxwidgets_ok}" = yes ; then
  WX_CXXFLAGS="`$WX_CONFIG --cxxflags | sed 's/-fno-exceptions//'` $CAIROPANGO_CFLAGS"
  WX_LIBS="`$WX_CONFIG --libs` $CAIROPANGO_LIBS $LIBRARIES_FOR_X"

  dnl Check for fork(), used for the 'persist' effect
  AC_FUNC_FORK

  dnl Check if wxWidgets uses gtk on this platform
  WX_TOOLKIT="`$WX_CONFIG --query-toolkit`"
  if test "${WX_TOOLKIT}" = gtk2 ; then
    PKG_CHECK_MODULES(GTK, [gtk+-2.0], have_gtk=yes, have_gtk=no)
    want_gtk=yes
  elif test "${WX_TOOLKIT}" = gtk3 ; then
    PKG_CHECK_MODULES(GTK, [gtk+-3.0], have_gtk=yes, have_gtk=no)
    want_gtk=yes
  fi
  if  test "${have_gtk}" = yes ; then
    AC_DEFINE(HAVE_GTK, 1, [define if your wxWidgets uses the gtk toolkit])
    WX_CXXFLAGS="$WX_CXXFLAGS $GTK_CFLAGS"
    WX_LIBS="$WX_LIBS $GTK_LIBS"
  fi

  dnl Default to single-threaded
  AC_ARG_WITH(wx-multithreaded, dnl
  [--with-wx-multithreaded  use multithreaded wxgtk (known problems, not recommended)],
  , WX_CXXFLAGS="$WX_CXXFLAGS -DWXT_MONOTHREADED"
  )

  CPPFLAGS="$CPPFLAGS $CAIROPANGO_CFLAGS"
  CXXFLAGS="$CXXFLAGS $WX_CXXFLAGS"
  AC_SUBST(WX_LIBS)
  AC_DEFINE(WXWIDGETS, 1, [ Define if you want the wxwidgets terminal. ])
fi

AM_CONDITIONAL(BUILD_WXWIDGETS, test "${enable_wxwidgets_ok}" = yes)

dnl  End wxWidgets terminal

dnl  Allow to disable terminals requiring bitmap support.
AC_ARG_WITH(bitmap_terminals,dnl
[  --with-bitmap-terminals  dot-matrix printers and pbm])
AS_IF([test "x${with_bitmap_terminals}" = "xyes"],,
  AC_DEFINE(NO_BITMAP_SUPPORT,1,
          [ Define to disable terminals that depend on code in bitmap.c ]))
AM_CONDITIONAL(BUILD_BITMAP, test "${with_bitmap_terminals}" = yes)

dnl  Allow to disable support for tektronix terminal emulators
AC_ARG_WITH(tektronix,dnl
[  --without-tektronix      tektronix terminal emulators (default enabled)])
AS_IF([test "x${with_tektronix}" != "xno"],
  AC_DEFINE(WITH_TEKTRONIX,1,
          [ Define to include support for tektronix terminal emulators ],))

dnl  Allow to include gpic terminal
AC_ARG_WITH(gpic,dnl
[  --with-gpic              gpic terminal])
AS_IF([test "x${with_gpic}" = "xyes"],
  AC_DEFINE(HAVE_GPIC,1,
          [ Define to include support for gpic terminal ],))

dnl  Allow to include tgif terminal
AC_ARG_WITH(tgif,dnl
[  --with-tgif              tgif terminal])
AS_IF([test "x${with_tgif}" = "xyes"],
  AC_DEFINE(HAVE_TGIF,1,
          [ Define to include support for tgif terminal ],))

dnl  Allow to include mif (FrameMaker 3) terminal
AC_ARG_WITH(mif,dnl
[  --with-mif               mif terminal (FrameMaker 3)])
AS_IF([test "x${with_mif}" = "xyes"],
  AC_DEFINE(HAVE_MIF,1,
          [ Define to include support for mif terminal ],))

dnl ReGIS terminal
AC_ARG_WITH(regis,dnl
[  --with-regis             ReGIS terminal])
AS_IF([test "x${with_regis}" = "xyes"],
  AC_DEFINE(HAVE_REGIS,1,
          [ Define to include support for ReGIS terminal ],))

AC_ARG_WITH(cairo,dnl
[  --without-cairo          cairo-based terminals (default enabled)],,
  [test -z "${with_cairo}" && with_cairo=yes])

if test "${with_cairo}" = yes ; then
  dnl cairo terminals
  PKG_CHECK_MODULES_NOFAIL(CAIROPDF,dnl
       [cairo >= 1.2 cairo-pdf >= 1.2 pango >= 1.22 pangocairo >= 1.10 glib-2.0 >= 2.28])
  if test $pkg_failed != no; then
    AC_MSG_WARN([The cairo terminals will not be compiled.])
    with_cairo=no
  else
    AC_DEFINE(HAVE_CAIROPDF,1, [ Define if you want the cairo-based terminals. ])
    CPPFLAGS="$CPPFLAGS $CAIROPDF_CFLAGS"
    LIBS="$LIBS $CAIROPDF_LIBS"
    with_cairo=yes
    PKG_CHECK_MODULES(CAIROEPS, [cairo >= 1.6.0],
        AC_DEFINE([HAVE_CAIROEPS], 1, [libcairo support for eps (cairo >= 1.6)]),
        AC_MSG_WARN([Your version of cairo is too old to support epscairo output]))
  fi
fi

build_gpcairo=no
if test "${enable_wxwidgets_ok}" = yes; then
  build_gpcairo=yes
fi
if test "${with_cairo}" = yes; then
  build_gpcairo=yes
fi

AM_CONDITIONAL(BUILD_GPCAIRO, test "${build_gpcairo}" = yes)

dnl Enable subsystem to generate statistical summary of file contents
AC_ARG_ENABLE(stats,dnl
[  --disable-stats         Omit calculation of statistical summary of data],
  [if test "$enableval" != no; then
    AC_DEFINE(USE_STATS,1,
               [ Define to add support for generating a statistical summary of data])
   fi],
    AC_DEFINE(USE_STATS,1,
               [ Define to add support for generating a statistical summary of data])
   )

dnl Enable parsing of deprecated syntax
dnl AC_ARG_ENABLE(backwards-compatibility,dnl
dnl [  --enable-backwards-compatibility       enable deprecated syntax ],
dnl   [if test "$enableval" = yes; then
dnl     AC_DEFINE(BACKWARDS_COMPATIBLE,1,
dnl                [ Define to allow use of certain deprecated syntax. ])
dnl   fi])

dnl Qt terminal

AC_ARG_WITH(qt,dnl
[  --with-qt [=qt4 =qt5 =no]  Qt terminal (default autodetect)],
  [if test "x${with_qt}" != "xno"; then
     enable_qt=yes;
   fi],
  enable_qt=yes)

if test "${enable_qt}" = yes ; then
  dnl variable used to determine if all checks pass
  enable_qt_ok=yes

  dnl Check for the C++ compiler
  if test "x${cxxerror}" = "xyes"; then
    AC_MSG_WARN([No C++ compiler found. The Qt terminal will not be compiled.])
      enable_qt_ok=no
  fi

  dnl First check for Qt5
  if test "x${with_qt}" = "xqt5"; then
    try_qt4=no
  else
    try_qt4=yes
  fi
  if test "x${with_qt}" != "xqt4"; then
    PKG_CHECK_MODULES_NOFAIL(QT, [Qt5Core Qt5Gui Qt5Network Qt5Svg Qt5PrintSupport])
    if test $pkg_failed = no; then
      try_qt4=no
      QT5LOC=`$PKG_CONFIG --variable=host_bins Qt5Core`
      if test "x${QT5LOC}" != "x"; then
        UIC=${QT5LOC}/uic
        MOC=${QT5LOC}/moc
        RCC=${QT5LOC}/rcc
        LRELEASE=${QT5LOC}/lrelease
      fi
      CXXFLAGS="$CXXFLAGS -fPIC"
    fi 
  fi

  dnl No Qt5, check for Qt4.5 or greater
  if test ${try_qt4} != no; then
    PKG_CHECK_MODULES_NOFAIL(QT, [QtCore >= 4.5 QtGui >= 4.5 QtNetwork >= 4.5 QtSvg >= 4.5])
    if test $pkg_failed != no; then
      enable_qt_ok=no
      AC_MSG_RESULT([The Qt terminal will not be compiled.])
    else
      QT4LOC=`$PKG_CONFIG --variable=exec_prefix QtCore`
      UIC=`$PKG_CONFIG --variable=uic_location QtCore`
      MOC=`$PKG_CONFIG --variable=moc_location QtCore`
      RCC=`$PKG_CONFIG --variable=rcc_location QtCore`
      LRELEASE=`$PKG_CONFIG --variable=lrelease_location QtCore`
      AC_MSG_RESULT([The Qt terminal will use Qt4.])
      QTVER="4"
    fi
  else
    AC_MSG_RESULT([The Qt terminal will use Qt5.])
    QTVER="5"
  fi
fi

if test "${enable_qt_ok}" = yes ; then
  dnl Check for fork()
  AC_FUNC_FORK

  CPPFLAGS="$CPPFLAGS $QT_CFLAGS"
  CXXFLAGS="$CXXFLAGS $QT_CXXFLAGS"

  if test x"$MOC" = x; then
    MOC=moc
  fi
  if test x"$UIC" = x; then
    UIC=uic
  fi
  if test x"$RCC" = x ; then
    if test x"$QT4LOC" != x ; then
        RCC=$QT4LOC/bin/rcc
    else
        RCC=rcc
    fi
  fi
  if test x"$LRELEASE" = x ; then
    if test x"$QT4LOC" != x ; then
        LRELEASE=$QT4LOC/bin/lrelease
    else
        LRELEASE=lrelease
    fi
  fi
  AC_SUBST(RCC)
  AC_SUBST(MOC)
  AC_SUBST(UIC)
  AC_SUBST(QT_LIBS)
  AC_SUBST(LRELEASE)
  AC_DEFINE(QTTERM,1, [ Define if you want the Qt terminal. ])
  AC_DEFINE_UNQUOTED(QTVER,$QTVER,[ only used for docs])
fi
AM_CONDITIONAL(BUILD_QT, test "${enable_qt_ok}" = yes)

dnl build mouse support if any mouse-requiring terminal is selected
if test "${enable_qt_ok}" = yes \
  || test "${enable_wxwidgets_ok}" = yes \
  || test "$GGI_SUPPORT" = yes \
  || test "$no_x" != yes; then
    enable_mouse=yes;
fi

if test "$enable_mouse" = yes; then
  AC_DEFINE(USE_MOUSE,1,
            [ Define if you have interactive terminals that use mouse support. ])
  AC_DEFINE(PIPE_IPC,1,
            [ Unix-type of Interprocess Communication is required for mouse support. ])
fi

dnl translation tools
AM_CONDITIONAL(HAVE_LRELEASE, test "${LRELEASE}" != no)

AC_ARG_VAR(DIST_CONTACT,[Contact address for modified and binary distributed gnuplot versions])
if test -n "${DIST_CONTACT}"; then
  AC_DEFINE_UNQUOTED([DIST_CONTACT],["$DIST_CONTACT"],[Contact address for modified and binary distributed gnuplot versions])
fi

dnl Substitute variables
AC_SUBST(PACKAGE)
AC_SUBST(VERSION_MAJOR)
AC_SUBST(VERSION)
AC_SUBST(PATCHLEVEL)
AC_SUBST(GIHDIR)
AC_SUBST(TEXDIR)
AC_SUBST(TERMLIBS)
AC_SUBST(TERMXLIBS)

dnl Write Makefiles and configuration header
AC_CONFIG_FILES([Makefile
           config/Makefile
           demo/Makefile
           demo/plugin/Makefile
           docs/Makefile
           m4/Makefile
           man/Makefile
           share/Makefile
           share/LaTeX/Makefile
           src/Makefile
           src/beos/Makefile
           src/wxterminal/Makefile
           src/qtterminal/Makefile
           term/Makefile])
AC_CONFIG_COMMANDS([default],[test -z "$CONFIG_HEADERS" || echo timestamp >stamp-h],[])
AC_OUTPUT

dnl Report configuration
dnl Rationale:
dnl - if something is disabled by default, show arguments to use to enable.
dnl - if something has particular dependencies, show them all when they are
dnl missing (the detailed output will give more details anyway).
dnl The goal is to give sensible and easily accessible information to users
dnl and packagers.

AC_MSG_RESULT([])
AC_MSG_RESULT([** Configuration summary for $PACKAGE $VERSION:])
AC_MSG_RESULT([])

AC_MSG_RESULT([gnuplot will be compiled with the following terminals:])
AC_MSG_RESULT([])

AC_MSG_RESULT([  Standalone terminals: yes (included by default)])
AC_MSG_RESULT([    canvas, cgm, context, dumb, dxf, emf, epslatex,])
AC_MSG_RESULT([    fig, hpgl, metafont, metapost, pcl5, postscript,])
AC_MSG_RESULT([    pict2e, pslatex, pstex, pstricks, svg, texdraw, tkcanvas])
AC_MSG_RESULT([])

if test "$with_bitmap_terminals" == yes; then
  AC_MSG_RESULT([  dot-matrix terminals: yes ( --without-bitmap-terminals to disable)])
else
  AC_MSG_RESULT([  dot-matrix terminals: no (use --with-bitmap-terminals to enable)])
fi
AC_MSG_RESULT([    epson, nec, okidata, tandy, and seiko dp414 printers])
AC_MSG_RESULT([    hp500c, hpdj, hpljii, hppj, pbm, sixel, starc])
AC_MSG_RESULT([])

if test "$with_tektronix" == no; then
  AC_MSG_RESULT([  tektronix terminal emulators: no ( --with-tektronix to enable)])
else
  AC_MSG_RESULT([  tektronix terminal emulators: yes ( --without-tektronix to disable)])
fi
AC_MSG_RESULT([    tek410x tek40 vttek xterm kc_tek40 km_tek40 selanar sixeltek bitgraph])
AC_MSG_RESULT([    note: not needed for sixel graphics output to vt100-series emulators])

AC_MSG_RESULT([])
AC_MSG_RESULT([  Platform-specific, legacy, or specialized terminals omitted by default:])

if test "$GGI_SUPPORT" = yes; then
  if test "$ac_cv_header_ggi_xmi_h" = yes; then
    AC_MSG_RESULT([    ggi terminal: yes (with pm3d support)])
  else
    AC_MSG_RESULT([    ggi terminal: yes (no pm3d support, requires ggi xmi library)])
  fi
else
  AC_MSG_RESULT([    ggi terminal:  no   (use --with-ggi to enable, requires libggi)])
fi

if test "$with_gpic" == yes; then
  AC_MSG_RESULT([    gpic terminal: yes])
else
  AC_MSG_RESULT([    gpic terminal: no   (use --with-gpic to enable)])
fi

if test "$with_tgif" == yes; then
  AC_MSG_RESULT([    tgif terminal: yes])
else
  AC_MSG_RESULT([    tgif terminal: no   (use --with-tgif to enable)])
fi

if test "$with_mif" == yes; then
  AC_MSG_RESULT([    mif terminal (FrameMaker 3): yes])
else
  AC_MSG_RESULT([    mif terminal (FrameMaker 3): no   (use --with-mif to enable)])
fi

if test "$with_regis" = yes; then
  AC_MSG_RESULT([    ReGIS terminal: yes])
else
  AC_MSG_RESULT([    ReGIS terminal: no  (use --with-regis to enable)])
fi

if test "$is_msdos" = yes; then
  AC_MSG_RESULT([    svga terminal (MSDOS/djgpp): yes])
fi

if test "$build_src_beos_subdir" = yes; then
  AC_MSG_RESULT([    be terminal (BeOS): yes])
fi

if test "$with_caca" = yes; then
  AC_MSG_RESULT([    caca terminal: yes (EXPERIMENTAL)])
else
  AC_MSG_RESULT([    caca terminal:  no   (use --with-caca to enable)])
fi

if test "$gnuplot_framework_AquaTerm" = yes; then
  AC_MSG_RESULT([    aqua terminal (OSX): yes])
else
  AC_MSG_RESULT([    aqua terminal (OSX): no])
fi

AC_MSG_RESULT([])
AC_MSG_RESULT([  Other terminals that can be enabled but have no ./configure option:])
AC_MSG_RESULT([    eepic, emtex, hp2623a, hp2648, imagen, kyocera, latex, qms, tpic ])
AC_MSG_RESULT([    pm (makefile.os2), be (BeOS), svga (MSDOS/djgpp), windows])

dnl These are the most common interactive terminal options
AC_MSG_RESULT([])
if test "$no_x" != yes; then
  if test "$enable_x11_mbfonts" = yes; then
    AC_MSG_RESULT([  X Window System terminal: yes  (multi-byte fonts OK)])
  else
    AC_MSG_RESULT([  X Window System terminal: yes  (multi-byte fonts not supported)])
  fi

  if test "$enable_x11_external" = yes; then
    AC_MSG_RESULT([    (enable plotting to windows opened by external apps) ])
  else
    AC_MSG_RESULT([    (disable plotting to windows opened by external apps) ])
  fi

  if test "$with_x_dcop" = yes; then
    AC_MSG_RESULT([    (gnuplot_x11 can use KDE3/DCOP to raise konsole) ])
  fi
else
  AC_MSG_RESULT([  X Window System terminal: no (requires X libraries)])
fi

if test "$ac_cv_lib_gd_gdImageJpeg" = yes && 
   test "$ac_cv_lib_gd_gdImagePng" = yes && 
   test "$ac_cv_lib_gd_gdImageGif" = yes; then
    if test "$ac_cv_lib_gd_gdImageGifAnimBegin" = yes; then
      AC_MSG_RESULT([  libgd-based png, jpeg, and gif terminals: yes (with animated gif)])
    else
      AC_MSG_RESULT([  libgd-based png, jpeg, and gif terminals: yes (no animated gif)])
    fi
else
    AC_MSG_RESULT([  libgd-based png, jpeg, and gif terminals: no (requires libgd,  see config.log) ])
fi

if test "$with_cairo" = yes; then
  AC_MSG_RESULT([  cairo-based pdf and png terminals: yes ])
else
  AC_MSG_RESULT([  cairo-based terminals: no (requires cairo>=1.2, pango>=1.22, glib>=2.28)])
fi

if test "$with_lua" = yes; then
  AC_MSG_RESULT([  lua/TikZ terminal: yes ])
else
  AC_MSG_RESULT([  lua/TikZ terminal: no ])
fi

if test "$enable_wxwidgets_ok" = yes; then
  if test "$with_wx_multithreaded" = yes; then
    AC_MSG_RESULT([  wxt terminal: yes (multithreaded)])
  else
    AC_MSG_RESULT([  wxt terminal: yes ])
  fi
else
  AC_MSG_RESULT([  wxt terminal: no (requires C++, wxWidgets>2.6, cairo>0.9, pango>1.22)])
fi

if test "$enable_qt_ok" = yes; then
  if test "$QTVER" = 4; then
      AC_MSG_RESULT([  Qt terminal: yes (qt4)])
  fi
  if test "$QTVER" = 5; then
      AC_MSG_RESULT([  Qt terminal: yes (qt5)])
  fi
else
  AC_MSG_RESULT([  Qt terminal: no (use --with-qt or --with-qt=qt4 to enable])
fi

AC_MSG_RESULT([])
AC_MSG_RESULT([gnuplot will be compiled with the following configurable features:])
AC_MSG_RESULT([])

if test "$enable_mouse" = yes; then
  AC_MSG_RESULT([  Mouse support in interactive terminals: yes])
else
  AC_MSG_RESULT([  Mouse support in interactive terminals: no])
fi

if test "$enable_raise_console" = yes; then
  AC_MSG_RESULT([  Typing <space> in plot window raises console: yes])
else
  AC_MSG_RESULT([  Typing <space> in plot window raises console: no])
fi

if test "$with_readline" = no; then
  AC_MSG_RESULT([  No readline support (use --with-readline=gnu or --with-readline=builtin)])
fi

  if test "$with_readline" = bsd; then
    if test -n "$gp_tcap"; then
      AC_MSG_RESULT([  Readline library: BSD editline with $gp_tcap])
    else
      AC_MSG_RESULT([  Readline library: BSD editline library])
    fi
    AC_MSG_RESULT(  [           WARNING:     editline cannot handle multi-byte characters!])
  else if test "$with_readline" != builtin; then
    if test -n "$gp_tcap"; then
      AC_MSG_RESULT([  Readline library: GNU readline library with $gp_tcap])
    else
      AC_MSG_RESULT([  Readline library: GNU readline library])
    fi
    if test "$ac_cv_lib_readline_rl_forced_update_display" = no; then
      AC_MSG_RESULT([                    missing some features (OSX version?)])
    fi
  else
    AC_MSG_RESULT([  Readline library: builtin minimal (use --with-readline=gnu for GNU readline)])
  fi
fi

if test "$enable_history_file" = yes; then
  AC_MSG_RESULT([  Command-line history file: yes])
else
  AC_MSG_RESULT([  Command-line history file: no])
fi

if test "$with_cwdrc" = yes; then
  AC_MSG_RESULT([  Check current directory for .gnuplot file: yes (warning: security risk)])
else
  AC_MSG_RESULT([  Check current directory for .gnuplot file: no (use --with-cwdrc to enable)])
fi

if test "$with_row_help" = no; then
  AC_MSG_RESULT([  Sort help/subtopic tables by column: yes])
else
  AC_MSG_RESULT([  Sort help/subtopic tables by column: no (use --without-row-help to enable)])
fi

if test "$have_libcerf" = yes; then
  AC_MSG_RESULT([  cerf() and other special functions from libcerf: yes])
else
  AC_MSG_RESULT([  cerf() and other special functions: no (libcerf not found)])
fi

if test "$have_external_functions" = yes; then
  AC_MSG_RESULT([  plugin support for loading external functions: yes ])
else
  AC_MSG_RESULT([  plugin support for loading external functions: no ])
fi

if test "$with_kpsexpand" = yes; then
  AC_MSG_RESULT([  Use TeX kpsexpand to search for fonts: yes])
else
  AC_MSG_RESULT([  Use TeX kpsexpand to search for fonts: no (use --with-kpsexpand to enable)])
fi

dnl if test "$enable_backwards_compatibility" = yes; then
dnl   AC_MSG_RESULT([  Allow deprecated syntax: yes])
dnl else
dnl   AC_MSG_RESULT([  Allow deprecated syntax: no (use --enable-backwards-compatibility)])
dnl fi

if test "$enable_stats" != no; then
  AC_MSG_RESULT([  Statistical summary of data ("stats" command): yes])
else
  AC_MSG_RESULT([  Statistical summary of data ("stats" command): no (use --enable-stats to enable)])
fi


AC_MSG_RESULT([])
AC_MSG_RESULT([gnuplot will install the following additional materials:])
AC_MSG_RESULT([])

if test "$with_latex" != no; then
  AC_MSG_RESULT([  TeX files will be installed in $TEXDIR])
  AC_MSG_RESULT([                               (use --with-texdir=DIR to change)])
else
  AC_MSG_RESULT([  TeX files will not be installed])
fi
AC_MSG_RESULT([  PostScript prologue files: $GIHDIR/PostScript/])
AC_MSG_RESULT([  Help file: $GIHDIR/gnuplot.gih])

AC_MSG_RESULT([])

dnl end config report

dnl end configure.in
