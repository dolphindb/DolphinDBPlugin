loadPlugin("PluginMatchingEngine.txt")
undef all

ORDER_ADD = 0
ORDER_MOD = 1
ORDER_CAN = 2

ORDER_SEL = 0
ORDER_BUY = 1
ORDER_AON = 2
ORDER_IOC = 4
ORDER_SL  = 8
ORDER_TP  = 16
ORDER_TS  = 32

inputScheme = table(1:0, `op`symbol`id`quantity`condition`price`thresholdPrice`expiredTime, [INT,SYMBOL,LONG,LONG,INT,LONG,LONG,LONG])
pricePrecision = 0
bookDepth = 10
MatchingEngine::setupGlobalConfig(inputScheme, , pricePrecision, bookDepth)

sym = 'AAPL'
output = table(10000:0,`symbol`id`status`condition`quantity`filledQuantity`cost, [SYMBOL,LONG,STRING,INT,LONG,LONG,DOUBLE])
depthOutput = table(10000:0,`is_sell`level`price`aggregate_qty`order_count`market_price,[BOOL,INT,LONG,LONG,LONG,LONG])
exchange = MatchingEngine::createExchange(sym, output,depthOutput)

@testing:case="test_matching_engine_add_order"
insert into exchange values(ORDER_ADD,`AAPL,0,100,ORDER_BUY,100,0,0)
assert 1, eqObj(output[`symbol], [`AAPL])
assert 2, eqObj(output[`status], [`Accepted])
assert 3, eqObj(output[`condition], [1])
assert 4, eqObj(output[`quantity], [100])
assert 5, eqObj(output[`filledQuantity], [0])
assert 6, eqObj(output[`cost], [0.0])

insert into exchange values(ORDER_ADD,`AAPL,1,100,ORDER_SEL,0,0,0)
assert 7, eqObj(output[`symbol], take(`AAPL,4))
assert 8, eqObj(output[`status], [`Accepted,`Accepted,`Filled,`Filled])
assert 9, eqObj(output[`condition], [1,0,0,1])
assert 10, eqObj(output[`quantity], [100,100,100,100])
assert 11, eqObj(output[`filledQuantity], [0,0,100,100])
assert 12, eqObj(output[`cost], [0.0,0.0,10000,10000])
