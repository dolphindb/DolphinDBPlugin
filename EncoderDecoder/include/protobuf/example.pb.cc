// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: example.proto

#include "example.pb.h"
// #include "protobuf/example.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : action_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , clientid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , serialno_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , msgtype_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sendingtime_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , from_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , operator__(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , errorcode_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , errormsg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeaderDefaultTypeInternal {
  constexpr Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeaderDefaultTypeInternal() {}
  union {
    Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeaderDefaultTypeInternal _Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader_default_instance_;
constexpr Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : marketindicator_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , clordid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , transacttime_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , securitytype_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , securityid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , symbol_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mdsubbooktype_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , realtimeundertakeflag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , subjectpartytype_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sendingtime_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , repomethod_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , transactionmethod_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , trademethod_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bridgedealindic_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , splitindicator_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pbmarketdatalist_(nullptr)
  , qid_(0)
  , mdbooktype_(0)
  , marketdepth_(0){}
struct Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBodyDefaultTypeInternal {
  constexpr Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBodyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBodyDefaultTypeInternal() {}
  union {
    Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBodyDefaultTypeInternal _Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody_default_instance_;
constexpr Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : marketdata_(){}
struct Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataListDefaultTypeInternal {
  constexpr Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataListDefaultTypeInternal() {}
  union {
    Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataListDefaultTypeInternal _Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList_default_instance_;
constexpr Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mdentrytype_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , quoteentryid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mdentrydate_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mdentrytime_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , minqty_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lastpx_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mdentrypx_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mdentrysize_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , settltype_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , settldate_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , b_deliverytype_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , s_deliverytype_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , settlcurrency_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , settlcurrfxrate_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , maturityyield_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , partyid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , traderid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tradername_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tradingacctnumber_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tradevolume_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , unmatchqty_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , increasepositionvalue_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mdpricelevel_(0)
  , mdquotetype_(0)
  , clearingmethod_(0){}
struct Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataDefaultTypeInternal {
  constexpr Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataDefaultTypeInternal() {}
  union {
    Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataDefaultTypeInternal _Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData_default_instance_;
constexpr Pb_CfetsTradeMarketDataSubscribeReceiveMessage::Pb_CfetsTradeMarketDataSubscribeReceiveMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , body_(nullptr){}
struct Pb_CfetsTradeMarketDataSubscribeReceiveMessageDefaultTypeInternal {
  constexpr Pb_CfetsTradeMarketDataSubscribeReceiveMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Pb_CfetsTradeMarketDataSubscribeReceiveMessageDefaultTypeInternal() {}
  union {
    Pb_CfetsTradeMarketDataSubscribeReceiveMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Pb_CfetsTradeMarketDataSubscribeReceiveMessageDefaultTypeInternal _Pb_CfetsTradeMarketDataSubscribeReceiveMessage_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_example_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_example_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_example_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_example_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader, action_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader, clientid_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader, serialno_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader, version_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader, msgtype_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader, sendingtime_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader, from_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader, operator__),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader, errorcode_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader, errormsg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody, qid_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody, mdbooktype_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody, marketindicator_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody, clordid_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody, transacttime_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody, securitytype_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody, securityid_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody, symbol_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody, marketdepth_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody, pbmarketdatalist_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody, mdsubbooktype_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody, realtimeundertakeflag_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody, subjectpartytype_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody, sendingtime_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody, repomethod_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody, transactionmethod_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody, trademethod_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody, bridgedealindic_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody, splitindicator_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList, marketdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData, mdentrytype_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData, mdpricelevel_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData, mdquotetype_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData, quoteentryid_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData, mdentrydate_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData, mdentrytime_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData, minqty_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData, lastpx_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData, mdentrypx_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData, mdentrysize_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData, clearingmethod_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData, settltype_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData, settldate_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData, b_deliverytype_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData, s_deliverytype_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData, settlcurrency_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData, settlcurrfxrate_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData, maturityyield_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData, partyid_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData, traderid_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData, tradername_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData, tradingacctnumber_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData, tradevolume_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData, unmatchqty_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData, increasepositionvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage, header_),
  PROTOBUF_FIELD_OFFSET(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage, body_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader)},
  { 15, -1, sizeof(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody)},
  { 39, -1, sizeof(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList)},
  { 45, -1, sizeof(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData)},
  { 75, -1, sizeof(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Pb_CfetsTradeMarketDataSubscribeReceiveMessage_default_instance_),
};

const char descriptor_table_protodef_example_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rexample.proto\"\220\r\n.Pb_CfetsTradeMarketD"
  "ataSubscribeReceiveMessage\022P\n\006header\030\001 \001"
  "(\0132@.Pb_CfetsTradeMarketDataSubscribeRec"
  "eiveMessage.Pb_MessageHeader\022p\n\004body\030\002 \001"
  "(\0132b.Pb_CfetsTradeMarketDataSubscribeRec"
  "eiveMessage.Pb_CfetsTradeMarketDataSubsc"
  "ribeReceiveMessageBody\032\302\001\n\020Pb_MessageHea"
  "der\022\016\n\006action\030\001 \001(\t\022\020\n\010clientID\030\002 \001(\t\022\020\n"
  "\010serialNo\030\003 \001(\t\022\017\n\007version\030\004 \001(\t\022\017\n\007msgT"
  "ype\030\005 \001(\t\022\023\n\013sendingTime\030\006 \001(\t\022\014\n\004from\030\007"
  " \001(\t\022\020\n\010operator\030\010 \001(\t\022\021\n\terrorCode\030\t \001("
  "\t\022\020\n\010errorMsg\030\n \001(\t\032\245\004\n2Pb_CfetsTradeMar"
  "ketDataSubscribeReceiveMessageBody\022\013\n\003qi"
  "d\030\001 \001(\005\022\022\n\nmdBookType\030\002 \001(\005\022\027\n\017marketInd"
  "icator\030\003 \001(\t\022\017\n\007clOrdID\030\004 \001(\t\022\024\n\014transac"
  "tTime\030\005 \001(\t\022\024\n\014securityType\030\006 \001(\t\022\022\n\nsec"
  "urityID\030\007 \001(\t\022\016\n\006symbol\030\010 \001(\t\022\023\n\013marketD"
  "epth\030\t \001(\005\022e\n\020pbMarketDataList\030\n \001(\0132K.P"
  "b_CfetsTradeMarketDataSubscribeReceiveMe"
  "ssage.Pb_CfetsTradeMarketDataList\022\025\n\rmdS"
  "ubBookType\030\013 \001(\t\022\035\n\025realTimeUndertakeFla"
  "g\030\014 \001(\t\022\030\n\020subjectPartyType\030\r \001(\t\022\023\n\013sen"
  "dingTime\030\016 \001(\t\022\022\n\nrepoMethod\030\017 \001(\t\022\031\n\021tr"
  "ansactionMethod\030\020 \001(\t\022\023\n\013tradeMethod\030\021 \001"
  "(\t\022\027\n\017bridgeDealIndic\030\022 \001(\t\022\026\n\016splitIndi"
  "cator\030\023 \001(\t\032z\n\033Pb_CfetsTradeMarketDataLi"
  "st\022[\n\nmarketData\030\001 \003(\0132G.Pb_CfetsTradeMa"
  "rketDataSubscribeReceiveMessage.Pb_Cfets"
  "TradeMarketData\032\260\004\n\027Pb_CfetsTradeMarketD"
  "ata\022\023\n\013mdEntryType\030\001 \001(\t\022\024\n\014mdPriceLevel"
  "\030\002 \001(\005\022\023\n\013mdQuoteType\030\003 \001(\005\022\024\n\014quoteEntr"
  "yID\030\004 \001(\t\022\023\n\013mdEntryDate\030\005 \001(\t\022\023\n\013mdEntr"
  "yTime\030\006 \001(\t\022\016\n\006minQty\030\007 \001(\t\022\016\n\006lastPx\030\010 "
  "\001(\t\022\021\n\tmdEntryPx\030\t \001(\t\022\023\n\013mdEntrySize\030\n "
  "\001(\t\022\026\n\016clearingMethod\030\013 \001(\005\022\021\n\tsettlType"
  "\030\014 \001(\t\022\021\n\tsettlDate\030\r \001(\t\022\026\n\016b_DeliveryT"
  "ype\030\016 \001(\t\022\026\n\016s_DeliveryType\030\017 \001(\t\022\025\n\rset"
  "tlCurrency\030\020 \001(\t\022\027\n\017settlCurrFxRate\030\021 \001("
  "\t\022\025\n\rmaturityYield\030\022 \001(\t\022\017\n\007partyID\030\023 \001("
  "\t\022\020\n\010traderID\030\024 \001(\t\022\022\n\ntraderName\030\025 \001(\t\022"
  "\031\n\021tradingAcctNumber\030\026 \001(\t\022\023\n\013tradeVolum"
  "e\030\027 \001(\t\022\022\n\nunMatchQty\030\030 \001(\t\022\035\n\025increaseP"
  "ositionValue\030\031 \001(\tb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_example_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_example_2eproto = {
  false, false, 1706, descriptor_table_protodef_example_2eproto, "example.proto", 
  &descriptor_table_example_2eproto_once, nullptr, 0, 5,
  schemas, file_default_instances, TableStruct_example_2eproto::offsets,
  file_level_metadata_example_2eproto, file_level_enum_descriptors_example_2eproto, file_level_service_descriptors_example_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_example_2eproto_getter() {
  return &descriptor_table_example_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_example_2eproto(&descriptor_table_example_2eproto);

// ===================================================================

class Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::_Internal {
 public:
};

Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader)
}
Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader(const Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action(), 
      GetArenaForAllocation());
  }
  clientid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clientid().empty()) {
    clientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clientid(), 
      GetArenaForAllocation());
  }
  serialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serialno().empty()) {
    serialno_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serialno(), 
      GetArenaForAllocation());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  msgtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msgtype().empty()) {
    msgtype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msgtype(), 
      GetArenaForAllocation());
  }
  sendingtime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sendingtime().empty()) {
    sendingtime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sendingtime(), 
      GetArenaForAllocation());
  }
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from().empty()) {
    from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from(), 
      GetArenaForAllocation());
  }
  operator__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_operator_().empty()) {
    operator__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_operator_(), 
      GetArenaForAllocation());
  }
  errorcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_errorcode().empty()) {
    errorcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_errorcode(), 
      GetArenaForAllocation());
  }
  errormsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_errormsg().empty()) {
    errormsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_errormsg(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader)
}

void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::SharedCtor() {
action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
clientid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
serialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
msgtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sendingtime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
operator__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
errorcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
errormsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::~Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader() {
  // @@protoc_insertion_point(destructor:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serialno_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msgtype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sendingtime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operator__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  errorcode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  errormsg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::ArenaDtor(void* object) {
  Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader* _this = reinterpret_cast< Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader* >(object);
  (void)_this;
}
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_.ClearToEmpty();
  clientid_.ClearToEmpty();
  serialno_.ClearToEmpty();
  version_.ClearToEmpty();
  msgtype_.ClearToEmpty();
  sendingtime_.ClearToEmpty();
  from_.ClearToEmpty();
  operator__.ClearToEmpty();
  errorcode_.ClearToEmpty();
  errormsg_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string clientID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_clientid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.clientID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string serialNo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_serialno();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.serialNo"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msgType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_msgtype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.msgType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sendingTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_sendingtime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.sendingTime"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string from = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.from"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string operator = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_operator_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.operator"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string errorCode = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_errorcode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.errorCode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string errorMsg = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_errormsg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.errorMsg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string action = 1;
  if (!this->action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.action");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_action(), target);
  }

  // string clientID = 2;
  if (!this->clientid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientid().data(), static_cast<int>(this->_internal_clientid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.clientID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_clientid(), target);
  }

  // string serialNo = 3;
  if (!this->serialno().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serialno().data(), static_cast<int>(this->_internal_serialno().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.serialNo");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_serialno(), target);
  }

  // string version = 4;
  if (!this->version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.version");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_version(), target);
  }

  // string msgType = 5;
  if (!this->msgtype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msgtype().data(), static_cast<int>(this->_internal_msgtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.msgType");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_msgtype(), target);
  }

  // string sendingTime = 6;
  if (!this->sendingtime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sendingtime().data(), static_cast<int>(this->_internal_sendingtime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.sendingTime");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_sendingtime(), target);
  }

  // string from = 7;
  if (!this->from().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from().data(), static_cast<int>(this->_internal_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.from");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_from(), target);
  }

  // string operator = 8;
  if (!this->operator_().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_operator_().data(), static_cast<int>(this->_internal_operator_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.operator");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_operator_(), target);
  }

  // string errorCode = 9;
  if (!this->errorcode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errorcode().data(), static_cast<int>(this->_internal_errorcode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.errorCode");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_errorcode(), target);
  }

  // string errorMsg = 10;
  if (!this->errormsg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errormsg().data(), static_cast<int>(this->_internal_errormsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.errorMsg");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_errormsg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader)
  return target;
}

size_t Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string action = 1;
  if (!this->action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // string clientID = 2;
  if (!this->clientid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientid());
  }

  // string serialNo = 3;
  if (!this->serialno().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serialno());
  }

  // string version = 4;
  if (!this->version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string msgType = 5;
  if (!this->msgtype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msgtype());
  }

  // string sendingTime = 6;
  if (!this->sendingtime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sendingtime());
  }

  // string from = 7;
  if (!this->from().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from());
  }

  // string operator = 8;
  if (!this->operator_().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_operator_());
  }

  // string errorCode = 9;
  if (!this->errorcode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errorcode());
  }

  // string errorMsg = 10;
  if (!this->errormsg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errormsg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader)
    MergeFrom(*source);
  }
}

void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::MergeFrom(const Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.action().empty()) {
    _internal_set_action(from._internal_action());
  }
  if (!from.clientid().empty()) {
    _internal_set_clientid(from._internal_clientid());
  }
  if (!from.serialno().empty()) {
    _internal_set_serialno(from._internal_serialno());
  }
  if (!from.version().empty()) {
    _internal_set_version(from._internal_version());
  }
  if (!from.msgtype().empty()) {
    _internal_set_msgtype(from._internal_msgtype());
  }
  if (!from.sendingtime().empty()) {
    _internal_set_sendingtime(from._internal_sendingtime());
  }
  if (!from.from().empty()) {
    _internal_set_from(from._internal_from());
  }
  if (!from.operator_().empty()) {
    _internal_set_operator_(from._internal_operator_());
  }
  if (!from.errorcode().empty()) {
    _internal_set_errorcode(from._internal_errorcode());
  }
  if (!from.errormsg().empty()) {
    _internal_set_errormsg(from._internal_errormsg());
  }
}

void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::CopyFrom(const Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::IsInitialized() const {
  return true;
}

void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::InternalSwap(Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &action_, GetArenaForAllocation(),
      &other->action_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &clientid_, GetArenaForAllocation(),
      &other->clientid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &serialno_, GetArenaForAllocation(),
      &other->serialno_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, GetArenaForAllocation(),
      &other->version_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msgtype_, GetArenaForAllocation(),
      &other->msgtype_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sendingtime_, GetArenaForAllocation(),
      &other->sendingtime_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &from_, GetArenaForAllocation(),
      &other->from_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &operator__, GetArenaForAllocation(),
      &other->operator__, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &errorcode_, GetArenaForAllocation(),
      &other->errorcode_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &errormsg_, GetArenaForAllocation(),
      &other->errormsg_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_example_2eproto_getter, &descriptor_table_example_2eproto_once,
      file_level_metadata_example_2eproto[0]);
}

// ===================================================================

class Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_Internal {
 public:
  static const ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList& pbmarketdatalist(const Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody* msg);
};

const ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList&
Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_Internal::pbmarketdatalist(const Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody* msg) {
  return *msg->pbmarketdatalist_;
}
Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody)
}
Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody(const Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  marketindicator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_marketindicator().empty()) {
    marketindicator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_marketindicator(), 
      GetArenaForAllocation());
  }
  clordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clordid().empty()) {
    clordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clordid(), 
      GetArenaForAllocation());
  }
  transacttime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transacttime().empty()) {
    transacttime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transacttime(), 
      GetArenaForAllocation());
  }
  securitytype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_securitytype().empty()) {
    securitytype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_securitytype(), 
      GetArenaForAllocation());
  }
  securityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_securityid().empty()) {
    securityid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_securityid(), 
      GetArenaForAllocation());
  }
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symbol().empty()) {
    symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_symbol(), 
      GetArenaForAllocation());
  }
  mdsubbooktype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mdsubbooktype().empty()) {
    mdsubbooktype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mdsubbooktype(), 
      GetArenaForAllocation());
  }
  realtimeundertakeflag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_realtimeundertakeflag().empty()) {
    realtimeundertakeflag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_realtimeundertakeflag(), 
      GetArenaForAllocation());
  }
  subjectpartytype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subjectpartytype().empty()) {
    subjectpartytype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_subjectpartytype(), 
      GetArenaForAllocation());
  }
  sendingtime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sendingtime().empty()) {
    sendingtime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sendingtime(), 
      GetArenaForAllocation());
  }
  repomethod_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_repomethod().empty()) {
    repomethod_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_repomethod(), 
      GetArenaForAllocation());
  }
  transactionmethod_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transactionmethod().empty()) {
    transactionmethod_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transactionmethod(), 
      GetArenaForAllocation());
  }
  trademethod_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_trademethod().empty()) {
    trademethod_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_trademethod(), 
      GetArenaForAllocation());
  }
  bridgedealindic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bridgedealindic().empty()) {
    bridgedealindic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bridgedealindic(), 
      GetArenaForAllocation());
  }
  splitindicator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_splitindicator().empty()) {
    splitindicator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_splitindicator(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_pbmarketdatalist()) {
    pbmarketdatalist_ = new ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList(*from.pbmarketdatalist_);
  } else {
    pbmarketdatalist_ = nullptr;
  }
  ::memcpy(&qid_, &from.qid_,
    static_cast<size_t>(reinterpret_cast<char*>(&marketdepth_) -
    reinterpret_cast<char*>(&qid_)) + sizeof(marketdepth_));
  // @@protoc_insertion_point(copy_constructor:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody)
}

void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::SharedCtor() {
marketindicator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
clordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
transacttime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
securitytype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
securityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
mdsubbooktype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
realtimeundertakeflag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
subjectpartytype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sendingtime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
repomethod_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
transactionmethod_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
trademethod_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bridgedealindic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
splitindicator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pbmarketdatalist_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&marketdepth_) -
    reinterpret_cast<char*>(&pbmarketdatalist_)) + sizeof(marketdepth_));
}

Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::~Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody() {
  // @@protoc_insertion_point(destructor:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  marketindicator_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clordid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transacttime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  securitytype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  securityid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mdsubbooktype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  realtimeundertakeflag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subjectpartytype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sendingtime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  repomethod_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transactionmethod_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trademethod_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bridgedealindic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  splitindicator_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pbmarketdatalist_;
}

void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::ArenaDtor(void* object) {
  Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody* _this = reinterpret_cast< Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody* >(object);
  (void)_this;
}
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketindicator_.ClearToEmpty();
  clordid_.ClearToEmpty();
  transacttime_.ClearToEmpty();
  securitytype_.ClearToEmpty();
  securityid_.ClearToEmpty();
  symbol_.ClearToEmpty();
  mdsubbooktype_.ClearToEmpty();
  realtimeundertakeflag_.ClearToEmpty();
  subjectpartytype_.ClearToEmpty();
  sendingtime_.ClearToEmpty();
  repomethod_.ClearToEmpty();
  transactionmethod_.ClearToEmpty();
  trademethod_.ClearToEmpty();
  bridgedealindic_.ClearToEmpty();
  splitindicator_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && pbmarketdatalist_ != nullptr) {
    delete pbmarketdatalist_;
  }
  pbmarketdatalist_ = nullptr;
  ::memset(&qid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&marketdepth_) -
      reinterpret_cast<char*>(&qid_)) + sizeof(marketdepth_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 qid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          qid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mdBookType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mdbooktype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string marketIndicator = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_marketindicator();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.marketIndicator"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string clOrdID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_clordid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.clOrdID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string transactTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_transacttime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.transactTime"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string securityType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_securitytype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.securityType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string securityID = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_securityid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.securityID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string symbol = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 marketDepth = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          marketdepth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataList pbMarketDataList = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_pbmarketdatalist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mdSubBookType = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_mdsubbooktype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.mdSubBookType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string realTimeUndertakeFlag = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_realtimeundertakeflag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.realTimeUndertakeFlag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string subjectPartyType = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_subjectpartytype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.subjectPartyType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sendingTime = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_sendingtime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.sendingTime"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string repoMethod = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_repomethod();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.repoMethod"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string transactionMethod = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_transactionmethod();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.transactionMethod"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tradeMethod = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_trademethod();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.tradeMethod"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bridgeDealIndic = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_bridgedealindic();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.bridgeDealIndic"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string splitIndicator = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_splitindicator();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.splitIndicator"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 qid = 1;
  if (this->qid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_qid(), target);
  }

  // int32 mdBookType = 2;
  if (this->mdbooktype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mdbooktype(), target);
  }

  // string marketIndicator = 3;
  if (!this->marketindicator().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_marketindicator().data(), static_cast<int>(this->_internal_marketindicator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.marketIndicator");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_marketindicator(), target);
  }

  // string clOrdID = 4;
  if (!this->clordid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clordid().data(), static_cast<int>(this->_internal_clordid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.clOrdID");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_clordid(), target);
  }

  // string transactTime = 5;
  if (!this->transacttime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transacttime().data(), static_cast<int>(this->_internal_transacttime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.transactTime");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_transacttime(), target);
  }

  // string securityType = 6;
  if (!this->securitytype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_securitytype().data(), static_cast<int>(this->_internal_securitytype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.securityType");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_securitytype(), target);
  }

  // string securityID = 7;
  if (!this->securityid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_securityid().data(), static_cast<int>(this->_internal_securityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.securityID");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_securityid(), target);
  }

  // string symbol = 8;
  if (!this->symbol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.symbol");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_symbol(), target);
  }

  // int32 marketDepth = 9;
  if (this->marketdepth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_marketdepth(), target);
  }

  // .Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataList pbMarketDataList = 10;
  if (this->has_pbmarketdatalist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::pbmarketdatalist(this), target, stream);
  }

  // string mdSubBookType = 11;
  if (!this->mdsubbooktype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mdsubbooktype().data(), static_cast<int>(this->_internal_mdsubbooktype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.mdSubBookType");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_mdsubbooktype(), target);
  }

  // string realTimeUndertakeFlag = 12;
  if (!this->realtimeundertakeflag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_realtimeundertakeflag().data(), static_cast<int>(this->_internal_realtimeundertakeflag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.realTimeUndertakeFlag");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_realtimeundertakeflag(), target);
  }

  // string subjectPartyType = 13;
  if (!this->subjectpartytype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subjectpartytype().data(), static_cast<int>(this->_internal_subjectpartytype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.subjectPartyType");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_subjectpartytype(), target);
  }

  // string sendingTime = 14;
  if (!this->sendingtime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sendingtime().data(), static_cast<int>(this->_internal_sendingtime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.sendingTime");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_sendingtime(), target);
  }

  // string repoMethod = 15;
  if (!this->repomethod().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_repomethod().data(), static_cast<int>(this->_internal_repomethod().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.repoMethod");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_repomethod(), target);
  }

  // string transactionMethod = 16;
  if (!this->transactionmethod().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transactionmethod().data(), static_cast<int>(this->_internal_transactionmethod().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.transactionMethod");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_transactionmethod(), target);
  }

  // string tradeMethod = 17;
  if (!this->trademethod().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trademethod().data(), static_cast<int>(this->_internal_trademethod().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.tradeMethod");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_trademethod(), target);
  }

  // string bridgeDealIndic = 18;
  if (!this->bridgedealindic().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bridgedealindic().data(), static_cast<int>(this->_internal_bridgedealindic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.bridgeDealIndic");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_bridgedealindic(), target);
  }

  // string splitIndicator = 19;
  if (!this->splitindicator().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_splitindicator().data(), static_cast<int>(this->_internal_splitindicator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.splitIndicator");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_splitindicator(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody)
  return target;
}

size_t Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string marketIndicator = 3;
  if (!this->marketindicator().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_marketindicator());
  }

  // string clOrdID = 4;
  if (!this->clordid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clordid());
  }

  // string transactTime = 5;
  if (!this->transacttime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transacttime());
  }

  // string securityType = 6;
  if (!this->securitytype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_securitytype());
  }

  // string securityID = 7;
  if (!this->securityid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_securityid());
  }

  // string symbol = 8;
  if (!this->symbol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // string mdSubBookType = 11;
  if (!this->mdsubbooktype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mdsubbooktype());
  }

  // string realTimeUndertakeFlag = 12;
  if (!this->realtimeundertakeflag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_realtimeundertakeflag());
  }

  // string subjectPartyType = 13;
  if (!this->subjectpartytype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subjectpartytype());
  }

  // string sendingTime = 14;
  if (!this->sendingtime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sendingtime());
  }

  // string repoMethod = 15;
  if (!this->repomethod().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_repomethod());
  }

  // string transactionMethod = 16;
  if (!this->transactionmethod().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transactionmethod());
  }

  // string tradeMethod = 17;
  if (!this->trademethod().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trademethod());
  }

  // string bridgeDealIndic = 18;
  if (!this->bridgedealindic().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bridgedealindic());
  }

  // string splitIndicator = 19;
  if (!this->splitindicator().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_splitindicator());
  }

  // .Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataList pbMarketDataList = 10;
  if (this->has_pbmarketdatalist()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pbmarketdatalist_);
  }

  // int32 qid = 1;
  if (this->qid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_qid());
  }

  // int32 mdBookType = 2;
  if (this->mdbooktype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mdbooktype());
  }

  // int32 marketDepth = 9;
  if (this->marketdepth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_marketdepth());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody)
  GOOGLE_DCHECK_NE(&from, this);
  const Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody)
    MergeFrom(*source);
  }
}

void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::MergeFrom(const Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.marketindicator().empty()) {
    _internal_set_marketindicator(from._internal_marketindicator());
  }
  if (!from.clordid().empty()) {
    _internal_set_clordid(from._internal_clordid());
  }
  if (!from.transacttime().empty()) {
    _internal_set_transacttime(from._internal_transacttime());
  }
  if (!from.securitytype().empty()) {
    _internal_set_securitytype(from._internal_securitytype());
  }
  if (!from.securityid().empty()) {
    _internal_set_securityid(from._internal_securityid());
  }
  if (!from.symbol().empty()) {
    _internal_set_symbol(from._internal_symbol());
  }
  if (!from.mdsubbooktype().empty()) {
    _internal_set_mdsubbooktype(from._internal_mdsubbooktype());
  }
  if (!from.realtimeundertakeflag().empty()) {
    _internal_set_realtimeundertakeflag(from._internal_realtimeundertakeflag());
  }
  if (!from.subjectpartytype().empty()) {
    _internal_set_subjectpartytype(from._internal_subjectpartytype());
  }
  if (!from.sendingtime().empty()) {
    _internal_set_sendingtime(from._internal_sendingtime());
  }
  if (!from.repomethod().empty()) {
    _internal_set_repomethod(from._internal_repomethod());
  }
  if (!from.transactionmethod().empty()) {
    _internal_set_transactionmethod(from._internal_transactionmethod());
  }
  if (!from.trademethod().empty()) {
    _internal_set_trademethod(from._internal_trademethod());
  }
  if (!from.bridgedealindic().empty()) {
    _internal_set_bridgedealindic(from._internal_bridgedealindic());
  }
  if (!from.splitindicator().empty()) {
    _internal_set_splitindicator(from._internal_splitindicator());
  }
  if (from.has_pbmarketdatalist()) {
    _internal_mutable_pbmarketdatalist()->::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList::MergeFrom(from._internal_pbmarketdatalist());
  }
  if (from.qid() != 0) {
    _internal_set_qid(from._internal_qid());
  }
  if (from.mdbooktype() != 0) {
    _internal_set_mdbooktype(from._internal_mdbooktype());
  }
  if (from.marketdepth() != 0) {
    _internal_set_marketdepth(from._internal_marketdepth());
  }
}

void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::CopyFrom(const Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::IsInitialized() const {
  return true;
}

void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::InternalSwap(Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &marketindicator_, GetArenaForAllocation(),
      &other->marketindicator_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &clordid_, GetArenaForAllocation(),
      &other->clordid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &transacttime_, GetArenaForAllocation(),
      &other->transacttime_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &securitytype_, GetArenaForAllocation(),
      &other->securitytype_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &securityid_, GetArenaForAllocation(),
      &other->securityid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &symbol_, GetArenaForAllocation(),
      &other->symbol_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mdsubbooktype_, GetArenaForAllocation(),
      &other->mdsubbooktype_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &realtimeundertakeflag_, GetArenaForAllocation(),
      &other->realtimeundertakeflag_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &subjectpartytype_, GetArenaForAllocation(),
      &other->subjectpartytype_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sendingtime_, GetArenaForAllocation(),
      &other->sendingtime_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &repomethod_, GetArenaForAllocation(),
      &other->repomethod_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &transactionmethod_, GetArenaForAllocation(),
      &other->transactionmethod_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &trademethod_, GetArenaForAllocation(),
      &other->trademethod_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bridgedealindic_, GetArenaForAllocation(),
      &other->bridgedealindic_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &splitindicator_, GetArenaForAllocation(),
      &other->splitindicator_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody, marketdepth_)
      + sizeof(Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::marketdepth_)
      - PROTOBUF_FIELD_OFFSET(Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody, pbmarketdatalist_)>(
          reinterpret_cast<char*>(&pbmarketdatalist_),
          reinterpret_cast<char*>(&other->pbmarketdatalist_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_example_2eproto_getter, &descriptor_table_example_2eproto_once,
      file_level_metadata_example_2eproto[1]);
}

// ===================================================================

class Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList::_Internal {
 public:
};

Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  marketdata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataList)
}
Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList(const Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      marketdata_(from.marketdata_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataList)
}

void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList::SharedCtor() {
}

Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList::~Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList() {
  // @@protoc_insertion_point(destructor:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList::ArenaDtor(void* object) {
  Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList* _this = reinterpret_cast< Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList* >(object);
  (void)_this;
}
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketdata_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData marketData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_marketdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData marketData = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_marketdata_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_marketdata(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataList)
  return target;
}

size_t Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData marketData = 1;
  total_size += 1UL * this->_internal_marketdata_size();
  for (const auto& msg : this->marketdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataList)
  GOOGLE_DCHECK_NE(&from, this);
  const Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataList)
    MergeFrom(*source);
  }
}

void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList::MergeFrom(const Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  marketdata_.MergeFrom(from.marketdata_);
}

void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList::CopyFrom(const Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList::IsInitialized() const {
  return true;
}

void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList::InternalSwap(Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  marketdata_.InternalSwap(&other->marketdata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_example_2eproto_getter, &descriptor_table_example_2eproto_once,
      file_level_metadata_example_2eproto[2]);
}

// ===================================================================

class Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_Internal {
 public:
};

Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData)
}
Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData(const Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mdentrytype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mdentrytype().empty()) {
    mdentrytype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mdentrytype(), 
      GetArenaForAllocation());
  }
  quoteentryid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_quoteentryid().empty()) {
    quoteentryid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_quoteentryid(), 
      GetArenaForAllocation());
  }
  mdentrydate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mdentrydate().empty()) {
    mdentrydate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mdentrydate(), 
      GetArenaForAllocation());
  }
  mdentrytime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mdentrytime().empty()) {
    mdentrytime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mdentrytime(), 
      GetArenaForAllocation());
  }
  minqty_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_minqty().empty()) {
    minqty_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_minqty(), 
      GetArenaForAllocation());
  }
  lastpx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lastpx().empty()) {
    lastpx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lastpx(), 
      GetArenaForAllocation());
  }
  mdentrypx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mdentrypx().empty()) {
    mdentrypx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mdentrypx(), 
      GetArenaForAllocation());
  }
  mdentrysize_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mdentrysize().empty()) {
    mdentrysize_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mdentrysize(), 
      GetArenaForAllocation());
  }
  settltype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_settltype().empty()) {
    settltype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_settltype(), 
      GetArenaForAllocation());
  }
  settldate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_settldate().empty()) {
    settldate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_settldate(), 
      GetArenaForAllocation());
  }
  b_deliverytype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_b_deliverytype().empty()) {
    b_deliverytype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_b_deliverytype(), 
      GetArenaForAllocation());
  }
  s_deliverytype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_s_deliverytype().empty()) {
    s_deliverytype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_s_deliverytype(), 
      GetArenaForAllocation());
  }
  settlcurrency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_settlcurrency().empty()) {
    settlcurrency_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_settlcurrency(), 
      GetArenaForAllocation());
  }
  settlcurrfxrate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_settlcurrfxrate().empty()) {
    settlcurrfxrate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_settlcurrfxrate(), 
      GetArenaForAllocation());
  }
  maturityyield_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_maturityyield().empty()) {
    maturityyield_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_maturityyield(), 
      GetArenaForAllocation());
  }
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_partyid().empty()) {
    partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_partyid(), 
      GetArenaForAllocation());
  }
  traderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_traderid().empty()) {
    traderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_traderid(), 
      GetArenaForAllocation());
  }
  tradername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tradername().empty()) {
    tradername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tradername(), 
      GetArenaForAllocation());
  }
  tradingacctnumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tradingacctnumber().empty()) {
    tradingacctnumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tradingacctnumber(), 
      GetArenaForAllocation());
  }
  tradevolume_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tradevolume().empty()) {
    tradevolume_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tradevolume(), 
      GetArenaForAllocation());
  }
  unmatchqty_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_unmatchqty().empty()) {
    unmatchqty_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_unmatchqty(), 
      GetArenaForAllocation());
  }
  increasepositionvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_increasepositionvalue().empty()) {
    increasepositionvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_increasepositionvalue(), 
      GetArenaForAllocation());
  }
  ::memcpy(&mdpricelevel_, &from.mdpricelevel_,
    static_cast<size_t>(reinterpret_cast<char*>(&clearingmethod_) -
    reinterpret_cast<char*>(&mdpricelevel_)) + sizeof(clearingmethod_));
  // @@protoc_insertion_point(copy_constructor:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData)
}

void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::SharedCtor() {
mdentrytype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
quoteentryid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
mdentrydate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
mdentrytime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
minqty_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
lastpx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
mdentrypx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
mdentrysize_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
settltype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
settldate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
b_deliverytype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
s_deliverytype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
settlcurrency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
settlcurrfxrate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
maturityyield_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
traderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
tradername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
tradingacctnumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
tradevolume_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
unmatchqty_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
increasepositionvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mdpricelevel_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&clearingmethod_) -
    reinterpret_cast<char*>(&mdpricelevel_)) + sizeof(clearingmethod_));
}

Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::~Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData() {
  // @@protoc_insertion_point(destructor:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  mdentrytype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  quoteentryid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mdentrydate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mdentrytime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  minqty_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lastpx_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mdentrypx_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mdentrysize_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  settltype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  settldate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  b_deliverytype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  s_deliverytype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  settlcurrency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  settlcurrfxrate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  maturityyield_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partyid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  traderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tradername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tradingacctnumber_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tradevolume_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unmatchqty_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  increasepositionvalue_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::ArenaDtor(void* object) {
  Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData* _this = reinterpret_cast< Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData* >(object);
  (void)_this;
}
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mdentrytype_.ClearToEmpty();
  quoteentryid_.ClearToEmpty();
  mdentrydate_.ClearToEmpty();
  mdentrytime_.ClearToEmpty();
  minqty_.ClearToEmpty();
  lastpx_.ClearToEmpty();
  mdentrypx_.ClearToEmpty();
  mdentrysize_.ClearToEmpty();
  settltype_.ClearToEmpty();
  settldate_.ClearToEmpty();
  b_deliverytype_.ClearToEmpty();
  s_deliverytype_.ClearToEmpty();
  settlcurrency_.ClearToEmpty();
  settlcurrfxrate_.ClearToEmpty();
  maturityyield_.ClearToEmpty();
  partyid_.ClearToEmpty();
  traderid_.ClearToEmpty();
  tradername_.ClearToEmpty();
  tradingacctnumber_.ClearToEmpty();
  tradevolume_.ClearToEmpty();
  unmatchqty_.ClearToEmpty();
  increasepositionvalue_.ClearToEmpty();
  ::memset(&mdpricelevel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clearingmethod_) -
      reinterpret_cast<char*>(&mdpricelevel_)) + sizeof(clearingmethod_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string mdEntryType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_mdentrytype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.mdEntryType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mdPriceLevel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mdpricelevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mdQuoteType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          mdquotetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string quoteEntryID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_quoteentryid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.quoteEntryID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mdEntryDate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_mdentrydate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.mdEntryDate"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mdEntryTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_mdentrytime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.mdEntryTime"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string minQty = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_minqty();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.minQty"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string lastPx = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_lastpx();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.lastPx"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mdEntryPx = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_mdentrypx();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.mdEntryPx"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mdEntrySize = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_mdentrysize();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.mdEntrySize"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 clearingMethod = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          clearingmethod_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string settlType = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_settltype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.settlType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string settlDate = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_settldate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.settlDate"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string b_DeliveryType = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_b_deliverytype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.b_DeliveryType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string s_DeliveryType = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_s_deliverytype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.s_DeliveryType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string settlCurrency = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_settlcurrency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.settlCurrency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string settlCurrFxRate = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_settlcurrfxrate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.settlCurrFxRate"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string maturityYield = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_maturityyield();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.maturityYield"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string partyID = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_partyid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.partyID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string traderID = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_traderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.traderID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string traderName = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_tradername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.traderName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tradingAcctNumber = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_tradingacctnumber();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.tradingAcctNumber"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tradeVolume = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_tradevolume();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.tradeVolume"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string unMatchQty = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_unmatchqty();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.unMatchQty"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string increasePositionValue = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_increasepositionvalue();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.increasePositionValue"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string mdEntryType = 1;
  if (!this->mdentrytype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mdentrytype().data(), static_cast<int>(this->_internal_mdentrytype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.mdEntryType");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mdentrytype(), target);
  }

  // int32 mdPriceLevel = 2;
  if (this->mdpricelevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mdpricelevel(), target);
  }

  // int32 mdQuoteType = 3;
  if (this->mdquotetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_mdquotetype(), target);
  }

  // string quoteEntryID = 4;
  if (!this->quoteentryid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_quoteentryid().data(), static_cast<int>(this->_internal_quoteentryid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.quoteEntryID");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_quoteentryid(), target);
  }

  // string mdEntryDate = 5;
  if (!this->mdentrydate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mdentrydate().data(), static_cast<int>(this->_internal_mdentrydate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.mdEntryDate");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_mdentrydate(), target);
  }

  // string mdEntryTime = 6;
  if (!this->mdentrytime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mdentrytime().data(), static_cast<int>(this->_internal_mdentrytime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.mdEntryTime");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_mdentrytime(), target);
  }

  // string minQty = 7;
  if (!this->minqty().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_minqty().data(), static_cast<int>(this->_internal_minqty().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.minQty");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_minqty(), target);
  }

  // string lastPx = 8;
  if (!this->lastpx().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lastpx().data(), static_cast<int>(this->_internal_lastpx().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.lastPx");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_lastpx(), target);
  }

  // string mdEntryPx = 9;
  if (!this->mdentrypx().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mdentrypx().data(), static_cast<int>(this->_internal_mdentrypx().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.mdEntryPx");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_mdentrypx(), target);
  }

  // string mdEntrySize = 10;
  if (!this->mdentrysize().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mdentrysize().data(), static_cast<int>(this->_internal_mdentrysize().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.mdEntrySize");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_mdentrysize(), target);
  }

  // int32 clearingMethod = 11;
  if (this->clearingmethod() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_clearingmethod(), target);
  }

  // string settlType = 12;
  if (!this->settltype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_settltype().data(), static_cast<int>(this->_internal_settltype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.settlType");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_settltype(), target);
  }

  // string settlDate = 13;
  if (!this->settldate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_settldate().data(), static_cast<int>(this->_internal_settldate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.settlDate");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_settldate(), target);
  }

  // string b_DeliveryType = 14;
  if (!this->b_deliverytype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_b_deliverytype().data(), static_cast<int>(this->_internal_b_deliverytype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.b_DeliveryType");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_b_deliverytype(), target);
  }

  // string s_DeliveryType = 15;
  if (!this->s_deliverytype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_s_deliverytype().data(), static_cast<int>(this->_internal_s_deliverytype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.s_DeliveryType");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_s_deliverytype(), target);
  }

  // string settlCurrency = 16;
  if (!this->settlcurrency().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_settlcurrency().data(), static_cast<int>(this->_internal_settlcurrency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.settlCurrency");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_settlcurrency(), target);
  }

  // string settlCurrFxRate = 17;
  if (!this->settlcurrfxrate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_settlcurrfxrate().data(), static_cast<int>(this->_internal_settlcurrfxrate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.settlCurrFxRate");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_settlcurrfxrate(), target);
  }

  // string maturityYield = 18;
  if (!this->maturityyield().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_maturityyield().data(), static_cast<int>(this->_internal_maturityyield().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.maturityYield");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_maturityyield(), target);
  }

  // string partyID = 19;
  if (!this->partyid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partyid().data(), static_cast<int>(this->_internal_partyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.partyID");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_partyid(), target);
  }

  // string traderID = 20;
  if (!this->traderid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_traderid().data(), static_cast<int>(this->_internal_traderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.traderID");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_traderid(), target);
  }

  // string traderName = 21;
  if (!this->tradername().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tradername().data(), static_cast<int>(this->_internal_tradername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.traderName");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_tradername(), target);
  }

  // string tradingAcctNumber = 22;
  if (!this->tradingacctnumber().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tradingacctnumber().data(), static_cast<int>(this->_internal_tradingacctnumber().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.tradingAcctNumber");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_tradingacctnumber(), target);
  }

  // string tradeVolume = 23;
  if (!this->tradevolume().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tradevolume().data(), static_cast<int>(this->_internal_tradevolume().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.tradeVolume");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_tradevolume(), target);
  }

  // string unMatchQty = 24;
  if (!this->unmatchqty().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unmatchqty().data(), static_cast<int>(this->_internal_unmatchqty().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.unMatchQty");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_unmatchqty(), target);
  }

  // string increasePositionValue = 25;
  if (!this->increasepositionvalue().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_increasepositionvalue().data(), static_cast<int>(this->_internal_increasepositionvalue().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.increasePositionValue");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_increasepositionvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData)
  return target;
}

size_t Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mdEntryType = 1;
  if (!this->mdentrytype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mdentrytype());
  }

  // string quoteEntryID = 4;
  if (!this->quoteentryid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_quoteentryid());
  }

  // string mdEntryDate = 5;
  if (!this->mdentrydate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mdentrydate());
  }

  // string mdEntryTime = 6;
  if (!this->mdentrytime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mdentrytime());
  }

  // string minQty = 7;
  if (!this->minqty().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_minqty());
  }

  // string lastPx = 8;
  if (!this->lastpx().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lastpx());
  }

  // string mdEntryPx = 9;
  if (!this->mdentrypx().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mdentrypx());
  }

  // string mdEntrySize = 10;
  if (!this->mdentrysize().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mdentrysize());
  }

  // string settlType = 12;
  if (!this->settltype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_settltype());
  }

  // string settlDate = 13;
  if (!this->settldate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_settldate());
  }

  // string b_DeliveryType = 14;
  if (!this->b_deliverytype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_b_deliverytype());
  }

  // string s_DeliveryType = 15;
  if (!this->s_deliverytype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s_deliverytype());
  }

  // string settlCurrency = 16;
  if (!this->settlcurrency().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_settlcurrency());
  }

  // string settlCurrFxRate = 17;
  if (!this->settlcurrfxrate().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_settlcurrfxrate());
  }

  // string maturityYield = 18;
  if (!this->maturityyield().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_maturityyield());
  }

  // string partyID = 19;
  if (!this->partyid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partyid());
  }

  // string traderID = 20;
  if (!this->traderid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_traderid());
  }

  // string traderName = 21;
  if (!this->tradername().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tradername());
  }

  // string tradingAcctNumber = 22;
  if (!this->tradingacctnumber().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tradingacctnumber());
  }

  // string tradeVolume = 23;
  if (!this->tradevolume().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tradevolume());
  }

  // string unMatchQty = 24;
  if (!this->unmatchqty().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unmatchqty());
  }

  // string increasePositionValue = 25;
  if (!this->increasepositionvalue().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_increasepositionvalue());
  }

  // int32 mdPriceLevel = 2;
  if (this->mdpricelevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mdpricelevel());
  }

  // int32 mdQuoteType = 3;
  if (this->mdquotetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mdquotetype());
  }

  // int32 clearingMethod = 11;
  if (this->clearingmethod() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_clearingmethod());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData)
  GOOGLE_DCHECK_NE(&from, this);
  const Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData)
    MergeFrom(*source);
  }
}

void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::MergeFrom(const Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.mdentrytype().empty()) {
    _internal_set_mdentrytype(from._internal_mdentrytype());
  }
  if (!from.quoteentryid().empty()) {
    _internal_set_quoteentryid(from._internal_quoteentryid());
  }
  if (!from.mdentrydate().empty()) {
    _internal_set_mdentrydate(from._internal_mdentrydate());
  }
  if (!from.mdentrytime().empty()) {
    _internal_set_mdentrytime(from._internal_mdentrytime());
  }
  if (!from.minqty().empty()) {
    _internal_set_minqty(from._internal_minqty());
  }
  if (!from.lastpx().empty()) {
    _internal_set_lastpx(from._internal_lastpx());
  }
  if (!from.mdentrypx().empty()) {
    _internal_set_mdentrypx(from._internal_mdentrypx());
  }
  if (!from.mdentrysize().empty()) {
    _internal_set_mdentrysize(from._internal_mdentrysize());
  }
  if (!from.settltype().empty()) {
    _internal_set_settltype(from._internal_settltype());
  }
  if (!from.settldate().empty()) {
    _internal_set_settldate(from._internal_settldate());
  }
  if (!from.b_deliverytype().empty()) {
    _internal_set_b_deliverytype(from._internal_b_deliverytype());
  }
  if (!from.s_deliverytype().empty()) {
    _internal_set_s_deliverytype(from._internal_s_deliverytype());
  }
  if (!from.settlcurrency().empty()) {
    _internal_set_settlcurrency(from._internal_settlcurrency());
  }
  if (!from.settlcurrfxrate().empty()) {
    _internal_set_settlcurrfxrate(from._internal_settlcurrfxrate());
  }
  if (!from.maturityyield().empty()) {
    _internal_set_maturityyield(from._internal_maturityyield());
  }
  if (!from.partyid().empty()) {
    _internal_set_partyid(from._internal_partyid());
  }
  if (!from.traderid().empty()) {
    _internal_set_traderid(from._internal_traderid());
  }
  if (!from.tradername().empty()) {
    _internal_set_tradername(from._internal_tradername());
  }
  if (!from.tradingacctnumber().empty()) {
    _internal_set_tradingacctnumber(from._internal_tradingacctnumber());
  }
  if (!from.tradevolume().empty()) {
    _internal_set_tradevolume(from._internal_tradevolume());
  }
  if (!from.unmatchqty().empty()) {
    _internal_set_unmatchqty(from._internal_unmatchqty());
  }
  if (!from.increasepositionvalue().empty()) {
    _internal_set_increasepositionvalue(from._internal_increasepositionvalue());
  }
  if (from.mdpricelevel() != 0) {
    _internal_set_mdpricelevel(from._internal_mdpricelevel());
  }
  if (from.mdquotetype() != 0) {
    _internal_set_mdquotetype(from._internal_mdquotetype());
  }
  if (from.clearingmethod() != 0) {
    _internal_set_clearingmethod(from._internal_clearingmethod());
  }
}

void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::CopyFrom(const Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::IsInitialized() const {
  return true;
}

void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::InternalSwap(Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mdentrytype_, GetArenaForAllocation(),
      &other->mdentrytype_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &quoteentryid_, GetArenaForAllocation(),
      &other->quoteentryid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mdentrydate_, GetArenaForAllocation(),
      &other->mdentrydate_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mdentrytime_, GetArenaForAllocation(),
      &other->mdentrytime_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &minqty_, GetArenaForAllocation(),
      &other->minqty_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &lastpx_, GetArenaForAllocation(),
      &other->lastpx_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mdentrypx_, GetArenaForAllocation(),
      &other->mdentrypx_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mdentrysize_, GetArenaForAllocation(),
      &other->mdentrysize_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &settltype_, GetArenaForAllocation(),
      &other->settltype_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &settldate_, GetArenaForAllocation(),
      &other->settldate_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &b_deliverytype_, GetArenaForAllocation(),
      &other->b_deliverytype_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &s_deliverytype_, GetArenaForAllocation(),
      &other->s_deliverytype_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &settlcurrency_, GetArenaForAllocation(),
      &other->settlcurrency_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &settlcurrfxrate_, GetArenaForAllocation(),
      &other->settlcurrfxrate_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &maturityyield_, GetArenaForAllocation(),
      &other->maturityyield_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &partyid_, GetArenaForAllocation(),
      &other->partyid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &traderid_, GetArenaForAllocation(),
      &other->traderid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tradername_, GetArenaForAllocation(),
      &other->tradername_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tradingacctnumber_, GetArenaForAllocation(),
      &other->tradingacctnumber_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tradevolume_, GetArenaForAllocation(),
      &other->tradevolume_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &unmatchqty_, GetArenaForAllocation(),
      &other->unmatchqty_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &increasepositionvalue_, GetArenaForAllocation(),
      &other->increasepositionvalue_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData, clearingmethod_)
      + sizeof(Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::clearingmethod_)
      - PROTOBUF_FIELD_OFFSET(Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData, mdpricelevel_)>(
          reinterpret_cast<char*>(&mdpricelevel_),
          reinterpret_cast<char*>(&other->mdpricelevel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_example_2eproto_getter, &descriptor_table_example_2eproto_once,
      file_level_metadata_example_2eproto[3]);
}

// ===================================================================

class Pb_CfetsTradeMarketDataSubscribeReceiveMessage::_Internal {
 public:
  static const ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader& header(const Pb_CfetsTradeMarketDataSubscribeReceiveMessage* msg);
  static const ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody& body(const Pb_CfetsTradeMarketDataSubscribeReceiveMessage* msg);
};

const ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader&
Pb_CfetsTradeMarketDataSubscribeReceiveMessage::_Internal::header(const Pb_CfetsTradeMarketDataSubscribeReceiveMessage* msg) {
  return *msg->header_;
}
const ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody&
Pb_CfetsTradeMarketDataSubscribeReceiveMessage::_Internal::body(const Pb_CfetsTradeMarketDataSubscribeReceiveMessage* msg) {
  return *msg->body_;
}
Pb_CfetsTradeMarketDataSubscribeReceiveMessage::Pb_CfetsTradeMarketDataSubscribeReceiveMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Pb_CfetsTradeMarketDataSubscribeReceiveMessage)
}
Pb_CfetsTradeMarketDataSubscribeReceiveMessage::Pb_CfetsTradeMarketDataSubscribeReceiveMessage(const Pb_CfetsTradeMarketDataSubscribeReceiveMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_body()) {
    body_ = new ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody(*from.body_);
  } else {
    body_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Pb_CfetsTradeMarketDataSubscribeReceiveMessage)
}

void Pb_CfetsTradeMarketDataSubscribeReceiveMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&body_) -
    reinterpret_cast<char*>(&header_)) + sizeof(body_));
}

Pb_CfetsTradeMarketDataSubscribeReceiveMessage::~Pb_CfetsTradeMarketDataSubscribeReceiveMessage() {
  // @@protoc_insertion_point(destructor:Pb_CfetsTradeMarketDataSubscribeReceiveMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Pb_CfetsTradeMarketDataSubscribeReceiveMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete body_;
}

void Pb_CfetsTradeMarketDataSubscribeReceiveMessage::ArenaDtor(void* object) {
  Pb_CfetsTradeMarketDataSubscribeReceiveMessage* _this = reinterpret_cast< Pb_CfetsTradeMarketDataSubscribeReceiveMessage* >(object);
  (void)_this;
}
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Pb_CfetsTradeMarketDataSubscribeReceiveMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb_CfetsTradeMarketDataSubscribeReceiveMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && body_ != nullptr) {
    delete body_;
  }
  body_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pb_CfetsTradeMarketDataSubscribeReceiveMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody body = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pb_CfetsTradeMarketDataSubscribeReceiveMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pb_CfetsTradeMarketDataSubscribeReceiveMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody body = 2;
  if (this->has_body()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::body(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb_CfetsTradeMarketDataSubscribeReceiveMessage)
  return target;
}

size_t Pb_CfetsTradeMarketDataSubscribeReceiveMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb_CfetsTradeMarketDataSubscribeReceiveMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody body = 2;
  if (this->has_body()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *body_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pb_CfetsTradeMarketDataSubscribeReceiveMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pb_CfetsTradeMarketDataSubscribeReceiveMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const Pb_CfetsTradeMarketDataSubscribeReceiveMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pb_CfetsTradeMarketDataSubscribeReceiveMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pb_CfetsTradeMarketDataSubscribeReceiveMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pb_CfetsTradeMarketDataSubscribeReceiveMessage)
    MergeFrom(*source);
  }
}

void Pb_CfetsTradeMarketDataSubscribeReceiveMessage::MergeFrom(const Pb_CfetsTradeMarketDataSubscribeReceiveMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pb_CfetsTradeMarketDataSubscribeReceiveMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::MergeFrom(from._internal_header());
  }
  if (from.has_body()) {
    _internal_mutable_body()->::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::MergeFrom(from._internal_body());
  }
}

void Pb_CfetsTradeMarketDataSubscribeReceiveMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pb_CfetsTradeMarketDataSubscribeReceiveMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pb_CfetsTradeMarketDataSubscribeReceiveMessage::CopyFrom(const Pb_CfetsTradeMarketDataSubscribeReceiveMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb_CfetsTradeMarketDataSubscribeReceiveMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pb_CfetsTradeMarketDataSubscribeReceiveMessage::IsInitialized() const {
  return true;
}

void Pb_CfetsTradeMarketDataSubscribeReceiveMessage::InternalSwap(Pb_CfetsTradeMarketDataSubscribeReceiveMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pb_CfetsTradeMarketDataSubscribeReceiveMessage, body_)
      + sizeof(Pb_CfetsTradeMarketDataSubscribeReceiveMessage::body_)
      - PROTOBUF_FIELD_OFFSET(Pb_CfetsTradeMarketDataSubscribeReceiveMessage, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pb_CfetsTradeMarketDataSubscribeReceiveMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_example_2eproto_getter, &descriptor_table_example_2eproto_once,
      file_level_metadata_example_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader* Arena::CreateMaybeMessage< ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody* Arena::CreateMaybeMessage< ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody >(arena);
}
template<> PROTOBUF_NOINLINE ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList* Arena::CreateMaybeMessage< ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList >(arena);
}
template<> PROTOBUF_NOINLINE ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData* Arena::CreateMaybeMessage< ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData >(arena);
}
template<> PROTOBUF_NOINLINE ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage* Arena::CreateMaybeMessage< ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
