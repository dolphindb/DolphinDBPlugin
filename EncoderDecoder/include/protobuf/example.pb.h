// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: example.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_example_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_example_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>

#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_example_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_example_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_example_2eproto;
class Pb_CfetsTradeMarketDataSubscribeReceiveMessage;
struct Pb_CfetsTradeMarketDataSubscribeReceiveMessageDefaultTypeInternal;
extern Pb_CfetsTradeMarketDataSubscribeReceiveMessageDefaultTypeInternal _Pb_CfetsTradeMarketDataSubscribeReceiveMessage_default_instance_;
class Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData;
struct Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataDefaultTypeInternal;
extern Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataDefaultTypeInternal _Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData_default_instance_;
class Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList;
struct Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataListDefaultTypeInternal;
extern Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataListDefaultTypeInternal _Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList_default_instance_;
class Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody;
struct Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBodyDefaultTypeInternal;
extern Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBodyDefaultTypeInternal _Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody_default_instance_;
class Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader;
struct Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeaderDefaultTypeInternal;
extern Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeaderDefaultTypeInternal _Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage* Arena::CreateMaybeMessage<::Pb_CfetsTradeMarketDataSubscribeReceiveMessage>(Arena*);
template<> ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData* Arena::CreateMaybeMessage<::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData>(Arena*);
template<> ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList* Arena::CreateMaybeMessage<::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList>(Arena*);
template<> ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody* Arena::CreateMaybeMessage<::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody>(Arena*);
template<> ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader* Arena::CreateMaybeMessage<::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader) */ {
 public:
  inline Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader() : Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader(nullptr) {}
  ~Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader() override;
  explicit constexpr Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader(const Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader& from);
  Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader(Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader&& from) noexcept
    : Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader() {
    *this = ::std::move(from);
  }

  inline Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader& operator=(const Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader& operator=(Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader* internal_default_instance() {
    return reinterpret_cast<const Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader*>(
               &_Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader& a, Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader* New() const final {
    return new Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader();
  }

  Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader& from);
  void MergeFrom(const Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader";
  }
  protected:
  explicit Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kClientIDFieldNumber = 2,
    kSerialNoFieldNumber = 3,
    kVersionFieldNumber = 4,
    kMsgTypeFieldNumber = 5,
    kSendingTimeFieldNumber = 6,
    kFromFieldNumber = 7,
    kOperatorFieldNumber = 8,
    kErrorCodeFieldNumber = 9,
    kErrorMsgFieldNumber = 10,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string clientID = 2;
  void clear_clientid();
  const std::string& clientid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientid();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_clientid();
  void set_allocated_clientid(std::string* clientid);
  private:
  const std::string& _internal_clientid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientid(const std::string& value);
  std::string* _internal_mutable_clientid();
  public:

  // string serialNo = 3;
  void clear_serialno();
  const std::string& serialno() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serialno(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serialno();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_serialno();
  void set_allocated_serialno(std::string* serialno);
  private:
  const std::string& _internal_serialno() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serialno(const std::string& value);
  std::string* _internal_mutable_serialno();
  public:

  // string version = 4;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string msgType = 5;
  void clear_msgtype();
  const std::string& msgtype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msgtype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msgtype();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_msgtype();
  void set_allocated_msgtype(std::string* msgtype);
  private:
  const std::string& _internal_msgtype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msgtype(const std::string& value);
  std::string* _internal_mutable_msgtype();
  public:

  // string sendingTime = 6;
  void clear_sendingtime();
  const std::string& sendingtime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sendingtime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sendingtime();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_sendingtime();
  void set_allocated_sendingtime(std::string* sendingtime);
  private:
  const std::string& _internal_sendingtime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sendingtime(const std::string& value);
  std::string* _internal_mutable_sendingtime();
  public:

  // string from = 7;
  void clear_from();
  const std::string& from() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // string operator = 8;
  void clear_operator_();
  const std::string& operator_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_operator_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_operator_();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_operator_();
  void set_allocated_operator_(std::string* operator_);
  private:
  const std::string& _internal_operator_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_operator_(const std::string& value);
  std::string* _internal_mutable_operator_();
  public:

  // string errorCode = 9;
  void clear_errorcode();
  const std::string& errorcode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errorcode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errorcode();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_errorcode();
  void set_allocated_errorcode(std::string* errorcode);
  private:
  const std::string& _internal_errorcode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errorcode(const std::string& value);
  std::string* _internal_mutable_errorcode();
  public:

  // string errorMsg = 10;
  void clear_errormsg();
  const std::string& errormsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errormsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errormsg();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_errormsg();
  void set_allocated_errormsg(std::string* errormsg);
  private:
  const std::string& _internal_errormsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errormsg(const std::string& value);
  std::string* _internal_mutable_errormsg();
  public:

  // @@protoc_insertion_point(class_scope:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serialno_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msgtype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sendingtime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operator__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errorcode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errormsg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_example_2eproto;
};
// -------------------------------------------------------------------

class Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody) */ {
 public:
  inline Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody() : Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody(nullptr) {}
  ~Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody() override;
  explicit constexpr Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody(const Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody& from);
  Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody(Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody&& from) noexcept
    : Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody() {
    *this = ::std::move(from);
  }

  inline Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody& operator=(const Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody& operator=(Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody* internal_default_instance() {
    return reinterpret_cast<const Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody*>(
               &_Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody& a, Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody& b) {
    a.Swap(&b);
  }
  inline void Swap(Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody* New() const final {
    return new Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody();
  }

  Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody& from);
  void MergeFrom(const Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody";
  }
  protected:
  explicit Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIndicatorFieldNumber = 3,
    kClOrdIDFieldNumber = 4,
    kTransactTimeFieldNumber = 5,
    kSecurityTypeFieldNumber = 6,
    kSecurityIDFieldNumber = 7,
    kSymbolFieldNumber = 8,
    kMdSubBookTypeFieldNumber = 11,
    kRealTimeUndertakeFlagFieldNumber = 12,
    kSubjectPartyTypeFieldNumber = 13,
    kSendingTimeFieldNumber = 14,
    kRepoMethodFieldNumber = 15,
    kTransactionMethodFieldNumber = 16,
    kTradeMethodFieldNumber = 17,
    kBridgeDealIndicFieldNumber = 18,
    kSplitIndicatorFieldNumber = 19,
    kPbMarketDataListFieldNumber = 10,
    kQidFieldNumber = 1,
    kMdBookTypeFieldNumber = 2,
    kMarketDepthFieldNumber = 9,
  };
  // string marketIndicator = 3;
  void clear_marketindicator();
  const std::string& marketindicator() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_marketindicator(ArgT0&& arg0, ArgT... args);
  std::string* mutable_marketindicator();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_marketindicator();
  void set_allocated_marketindicator(std::string* marketindicator);
  private:
  const std::string& _internal_marketindicator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_marketindicator(const std::string& value);
  std::string* _internal_mutable_marketindicator();
  public:

  // string clOrdID = 4;
  void clear_clordid();
  const std::string& clordid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clordid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clordid();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_clordid();
  void set_allocated_clordid(std::string* clordid);
  private:
  const std::string& _internal_clordid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clordid(const std::string& value);
  std::string* _internal_mutable_clordid();
  public:

  // string transactTime = 5;
  void clear_transacttime();
  const std::string& transacttime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transacttime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transacttime();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_transacttime();
  void set_allocated_transacttime(std::string* transacttime);
  private:
  const std::string& _internal_transacttime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transacttime(const std::string& value);
  std::string* _internal_mutable_transacttime();
  public:

  // string securityType = 6;
  void clear_securitytype();
  const std::string& securitytype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_securitytype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_securitytype();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_securitytype();
  void set_allocated_securitytype(std::string* securitytype);
  private:
  const std::string& _internal_securitytype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_securitytype(const std::string& value);
  std::string* _internal_mutable_securitytype();
  public:

  // string securityID = 7;
  void clear_securityid();
  const std::string& securityid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_securityid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_securityid();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_securityid();
  void set_allocated_securityid(std::string* securityid);
  private:
  const std::string& _internal_securityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_securityid(const std::string& value);
  std::string* _internal_mutable_securityid();
  public:

  // string symbol = 8;
  void clear_symbol();
  const std::string& symbol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_symbol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_symbol();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // string mdSubBookType = 11;
  void clear_mdsubbooktype();
  const std::string& mdsubbooktype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mdsubbooktype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mdsubbooktype();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_mdsubbooktype();
  void set_allocated_mdsubbooktype(std::string* mdsubbooktype);
  private:
  const std::string& _internal_mdsubbooktype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mdsubbooktype(const std::string& value);
  std::string* _internal_mutable_mdsubbooktype();
  public:

  // string realTimeUndertakeFlag = 12;
  void clear_realtimeundertakeflag();
  const std::string& realtimeundertakeflag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_realtimeundertakeflag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_realtimeundertakeflag();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_realtimeundertakeflag();
  void set_allocated_realtimeundertakeflag(std::string* realtimeundertakeflag);
  private:
  const std::string& _internal_realtimeundertakeflag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_realtimeundertakeflag(const std::string& value);
  std::string* _internal_mutable_realtimeundertakeflag();
  public:

  // string subjectPartyType = 13;
  void clear_subjectpartytype();
  const std::string& subjectpartytype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subjectpartytype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subjectpartytype();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_subjectpartytype();
  void set_allocated_subjectpartytype(std::string* subjectpartytype);
  private:
  const std::string& _internal_subjectpartytype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subjectpartytype(const std::string& value);
  std::string* _internal_mutable_subjectpartytype();
  public:

  // string sendingTime = 14;
  void clear_sendingtime();
  const std::string& sendingtime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sendingtime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sendingtime();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_sendingtime();
  void set_allocated_sendingtime(std::string* sendingtime);
  private:
  const std::string& _internal_sendingtime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sendingtime(const std::string& value);
  std::string* _internal_mutable_sendingtime();
  public:

  // string repoMethod = 15;
  void clear_repomethod();
  const std::string& repomethod() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_repomethod(ArgT0&& arg0, ArgT... args);
  std::string* mutable_repomethod();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_repomethod();
  void set_allocated_repomethod(std::string* repomethod);
  private:
  const std::string& _internal_repomethod() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_repomethod(const std::string& value);
  std::string* _internal_mutable_repomethod();
  public:

  // string transactionMethod = 16;
  void clear_transactionmethod();
  const std::string& transactionmethod() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transactionmethod(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transactionmethod();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_transactionmethod();
  void set_allocated_transactionmethod(std::string* transactionmethod);
  private:
  const std::string& _internal_transactionmethod() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transactionmethod(const std::string& value);
  std::string* _internal_mutable_transactionmethod();
  public:

  // string tradeMethod = 17;
  void clear_trademethod();
  const std::string& trademethod() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trademethod(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trademethod();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_trademethod();
  void set_allocated_trademethod(std::string* trademethod);
  private:
  const std::string& _internal_trademethod() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trademethod(const std::string& value);
  std::string* _internal_mutable_trademethod();
  public:

  // string bridgeDealIndic = 18;
  void clear_bridgedealindic();
  const std::string& bridgedealindic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bridgedealindic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bridgedealindic();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_bridgedealindic();
  void set_allocated_bridgedealindic(std::string* bridgedealindic);
  private:
  const std::string& _internal_bridgedealindic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bridgedealindic(const std::string& value);
  std::string* _internal_mutable_bridgedealindic();
  public:

  // string splitIndicator = 19;
  void clear_splitindicator();
  const std::string& splitindicator() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_splitindicator(ArgT0&& arg0, ArgT... args);
  std::string* mutable_splitindicator();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_splitindicator();
  void set_allocated_splitindicator(std::string* splitindicator);
  private:
  const std::string& _internal_splitindicator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_splitindicator(const std::string& value);
  std::string* _internal_mutable_splitindicator();
  public:

  // .Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataList pbMarketDataList = 10;
  bool has_pbmarketdatalist() const;
  private:
  bool _internal_has_pbmarketdatalist() const;
  public:
  void clear_pbmarketdatalist();
  const ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList& pbmarketdatalist() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList* release_pbmarketdatalist();
  ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList* mutable_pbmarketdatalist();
  void set_allocated_pbmarketdatalist(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList* pbmarketdatalist);
  private:
  const ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList& _internal_pbmarketdatalist() const;
  ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList* _internal_mutable_pbmarketdatalist();
  public:
  void unsafe_arena_set_allocated_pbmarketdatalist(
      ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList* pbmarketdatalist);
  ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList* unsafe_arena_release_pbmarketdatalist();

  // int32 qid = 1;
  void clear_qid();
  ::PROTOBUF_NAMESPACE_ID::int32 qid() const;
  void set_qid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_qid() const;
  void _internal_set_qid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mdBookType = 2;
  void clear_mdbooktype();
  ::PROTOBUF_NAMESPACE_ID::int32 mdbooktype() const;
  void set_mdbooktype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mdbooktype() const;
  void _internal_set_mdbooktype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 marketDepth = 9;
  void clear_marketdepth();
  ::PROTOBUF_NAMESPACE_ID::int32 marketdepth() const;
  void set_marketdepth(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_marketdepth() const;
  void _internal_set_marketdepth(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketindicator_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clordid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transacttime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr securitytype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr securityid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mdsubbooktype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr realtimeundertakeflag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subjectpartytype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sendingtime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr repomethod_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transactionmethod_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trademethod_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bridgedealindic_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr splitindicator_;
  ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList* pbmarketdatalist_;
  ::PROTOBUF_NAMESPACE_ID::int32 qid_;
  ::PROTOBUF_NAMESPACE_ID::int32 mdbooktype_;
  ::PROTOBUF_NAMESPACE_ID::int32 marketdepth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_example_2eproto;
};
// -------------------------------------------------------------------

class Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataList) */ {
 public:
  inline Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList() : Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList(nullptr) {}
  ~Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList() override;
  explicit constexpr Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList(const Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList& from);
  Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList(Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList&& from) noexcept
    : Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList() {
    *this = ::std::move(from);
  }

  inline Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList& operator=(const Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList& operator=(Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList* internal_default_instance() {
    return reinterpret_cast<const Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList*>(
               &_Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList& a, Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList& b) {
    a.Swap(&b);
  }
  inline void Swap(Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList* New() const final {
    return new Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList();
  }

  Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList& from);
  void MergeFrom(const Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataList";
  }
  protected:
  explicit Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketDataFieldNumber = 1,
  };
  // repeated .Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData marketData = 1;
  int marketdata_size() const;
  private:
  int _internal_marketdata_size() const;
  public:
  void clear_marketdata();
  ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData* mutable_marketdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData >*
      mutable_marketdata();
  private:
  const ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData& _internal_marketdata(int index) const;
  ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData* _internal_add_marketdata();
  public:
  const ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData& marketdata(int index) const;
  ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData* add_marketdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData >&
      marketdata() const;

  // @@protoc_insertion_point(class_scope:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData > marketdata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_example_2eproto;
};
// -------------------------------------------------------------------

class Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData) */ {
 public:
  inline Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData() : Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData(nullptr) {}
  ~Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData() override;
  explicit constexpr Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData(const Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData& from);
  Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData(Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData&& from) noexcept
    : Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData() {
    *this = ::std::move(from);
  }

  inline Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData& operator=(const Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData& operator=(Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData* internal_default_instance() {
    return reinterpret_cast<const Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData*>(
               &_Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData& a, Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData& b) {
    a.Swap(&b);
  }
  inline void Swap(Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData* New() const final {
    return new Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData();
  }

  Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData& from);
  void MergeFrom(const Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData";
  }
  protected:
  explicit Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMdEntryTypeFieldNumber = 1,
    kQuoteEntryIDFieldNumber = 4,
    kMdEntryDateFieldNumber = 5,
    kMdEntryTimeFieldNumber = 6,
    kMinQtyFieldNumber = 7,
    kLastPxFieldNumber = 8,
    kMdEntryPxFieldNumber = 9,
    kMdEntrySizeFieldNumber = 10,
    kSettlTypeFieldNumber = 12,
    kSettlDateFieldNumber = 13,
    kBDeliveryTypeFieldNumber = 14,
    kSDeliveryTypeFieldNumber = 15,
    kSettlCurrencyFieldNumber = 16,
    kSettlCurrFxRateFieldNumber = 17,
    kMaturityYieldFieldNumber = 18,
    kPartyIDFieldNumber = 19,
    kTraderIDFieldNumber = 20,
    kTraderNameFieldNumber = 21,
    kTradingAcctNumberFieldNumber = 22,
    kTradeVolumeFieldNumber = 23,
    kUnMatchQtyFieldNumber = 24,
    kIncreasePositionValueFieldNumber = 25,
    kMdPriceLevelFieldNumber = 2,
    kMdQuoteTypeFieldNumber = 3,
    kClearingMethodFieldNumber = 11,
  };
  // string mdEntryType = 1;
  void clear_mdentrytype();
  const std::string& mdentrytype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mdentrytype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mdentrytype();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_mdentrytype();
  void set_allocated_mdentrytype(std::string* mdentrytype);
  private:
  const std::string& _internal_mdentrytype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mdentrytype(const std::string& value);
  std::string* _internal_mutable_mdentrytype();
  public:

  // string quoteEntryID = 4;
  void clear_quoteentryid();
  const std::string& quoteentryid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_quoteentryid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_quoteentryid();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_quoteentryid();
  void set_allocated_quoteentryid(std::string* quoteentryid);
  private:
  const std::string& _internal_quoteentryid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_quoteentryid(const std::string& value);
  std::string* _internal_mutable_quoteentryid();
  public:

  // string mdEntryDate = 5;
  void clear_mdentrydate();
  const std::string& mdentrydate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mdentrydate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mdentrydate();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_mdentrydate();
  void set_allocated_mdentrydate(std::string* mdentrydate);
  private:
  const std::string& _internal_mdentrydate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mdentrydate(const std::string& value);
  std::string* _internal_mutable_mdentrydate();
  public:

  // string mdEntryTime = 6;
  void clear_mdentrytime();
  const std::string& mdentrytime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mdentrytime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mdentrytime();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_mdentrytime();
  void set_allocated_mdentrytime(std::string* mdentrytime);
  private:
  const std::string& _internal_mdentrytime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mdentrytime(const std::string& value);
  std::string* _internal_mutable_mdentrytime();
  public:

  // string minQty = 7;
  void clear_minqty();
  const std::string& minqty() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_minqty(ArgT0&& arg0, ArgT... args);
  std::string* mutable_minqty();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_minqty();
  void set_allocated_minqty(std::string* minqty);
  private:
  const std::string& _internal_minqty() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_minqty(const std::string& value);
  std::string* _internal_mutable_minqty();
  public:

  // string lastPx = 8;
  void clear_lastpx();
  const std::string& lastpx() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lastpx(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lastpx();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_lastpx();
  void set_allocated_lastpx(std::string* lastpx);
  private:
  const std::string& _internal_lastpx() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lastpx(const std::string& value);
  std::string* _internal_mutable_lastpx();
  public:

  // string mdEntryPx = 9;
  void clear_mdentrypx();
  const std::string& mdentrypx() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mdentrypx(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mdentrypx();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_mdentrypx();
  void set_allocated_mdentrypx(std::string* mdentrypx);
  private:
  const std::string& _internal_mdentrypx() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mdentrypx(const std::string& value);
  std::string* _internal_mutable_mdentrypx();
  public:

  // string mdEntrySize = 10;
  void clear_mdentrysize();
  const std::string& mdentrysize() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mdentrysize(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mdentrysize();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_mdentrysize();
  void set_allocated_mdentrysize(std::string* mdentrysize);
  private:
  const std::string& _internal_mdentrysize() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mdentrysize(const std::string& value);
  std::string* _internal_mutable_mdentrysize();
  public:

  // string settlType = 12;
  void clear_settltype();
  const std::string& settltype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_settltype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_settltype();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_settltype();
  void set_allocated_settltype(std::string* settltype);
  private:
  const std::string& _internal_settltype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_settltype(const std::string& value);
  std::string* _internal_mutable_settltype();
  public:

  // string settlDate = 13;
  void clear_settldate();
  const std::string& settldate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_settldate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_settldate();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_settldate();
  void set_allocated_settldate(std::string* settldate);
  private:
  const std::string& _internal_settldate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_settldate(const std::string& value);
  std::string* _internal_mutable_settldate();
  public:

  // string b_DeliveryType = 14;
  void clear_b_deliverytype();
  const std::string& b_deliverytype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_b_deliverytype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_b_deliverytype();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_b_deliverytype();
  void set_allocated_b_deliverytype(std::string* b_deliverytype);
  private:
  const std::string& _internal_b_deliverytype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_b_deliverytype(const std::string& value);
  std::string* _internal_mutable_b_deliverytype();
  public:

  // string s_DeliveryType = 15;
  void clear_s_deliverytype();
  const std::string& s_deliverytype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_s_deliverytype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_s_deliverytype();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_s_deliverytype();
  void set_allocated_s_deliverytype(std::string* s_deliverytype);
  private:
  const std::string& _internal_s_deliverytype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s_deliverytype(const std::string& value);
  std::string* _internal_mutable_s_deliverytype();
  public:

  // string settlCurrency = 16;
  void clear_settlcurrency();
  const std::string& settlcurrency() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_settlcurrency(ArgT0&& arg0, ArgT... args);
  std::string* mutable_settlcurrency();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_settlcurrency();
  void set_allocated_settlcurrency(std::string* settlcurrency);
  private:
  const std::string& _internal_settlcurrency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_settlcurrency(const std::string& value);
  std::string* _internal_mutable_settlcurrency();
  public:

  // string settlCurrFxRate = 17;
  void clear_settlcurrfxrate();
  const std::string& settlcurrfxrate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_settlcurrfxrate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_settlcurrfxrate();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_settlcurrfxrate();
  void set_allocated_settlcurrfxrate(std::string* settlcurrfxrate);
  private:
  const std::string& _internal_settlcurrfxrate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_settlcurrfxrate(const std::string& value);
  std::string* _internal_mutable_settlcurrfxrate();
  public:

  // string maturityYield = 18;
  void clear_maturityyield();
  const std::string& maturityyield() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_maturityyield(ArgT0&& arg0, ArgT... args);
  std::string* mutable_maturityyield();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_maturityyield();
  void set_allocated_maturityyield(std::string* maturityyield);
  private:
  const std::string& _internal_maturityyield() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_maturityyield(const std::string& value);
  std::string* _internal_mutable_maturityyield();
  public:

  // string partyID = 19;
  void clear_partyid();
  const std::string& partyid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_partyid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_partyid();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_partyid();
  void set_allocated_partyid(std::string* partyid);
  private:
  const std::string& _internal_partyid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_partyid(const std::string& value);
  std::string* _internal_mutable_partyid();
  public:

  // string traderID = 20;
  void clear_traderid();
  const std::string& traderid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_traderid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_traderid();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_traderid();
  void set_allocated_traderid(std::string* traderid);
  private:
  const std::string& _internal_traderid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_traderid(const std::string& value);
  std::string* _internal_mutable_traderid();
  public:

  // string traderName = 21;
  void clear_tradername();
  const std::string& tradername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tradername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tradername();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_tradername();
  void set_allocated_tradername(std::string* tradername);
  private:
  const std::string& _internal_tradername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tradername(const std::string& value);
  std::string* _internal_mutable_tradername();
  public:

  // string tradingAcctNumber = 22;
  void clear_tradingacctnumber();
  const std::string& tradingacctnumber() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tradingacctnumber(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tradingacctnumber();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_tradingacctnumber();
  void set_allocated_tradingacctnumber(std::string* tradingacctnumber);
  private:
  const std::string& _internal_tradingacctnumber() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tradingacctnumber(const std::string& value);
  std::string* _internal_mutable_tradingacctnumber();
  public:

  // string tradeVolume = 23;
  void clear_tradevolume();
  const std::string& tradevolume() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tradevolume(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tradevolume();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_tradevolume();
  void set_allocated_tradevolume(std::string* tradevolume);
  private:
  const std::string& _internal_tradevolume() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tradevolume(const std::string& value);
  std::string* _internal_mutable_tradevolume();
  public:

  // string unMatchQty = 24;
  void clear_unmatchqty();
  const std::string& unmatchqty() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unmatchqty(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unmatchqty();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_unmatchqty();
  void set_allocated_unmatchqty(std::string* unmatchqty);
  private:
  const std::string& _internal_unmatchqty() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unmatchqty(const std::string& value);
  std::string* _internal_mutable_unmatchqty();
  public:

  // string increasePositionValue = 25;
  void clear_increasepositionvalue();
  const std::string& increasepositionvalue() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_increasepositionvalue(ArgT0&& arg0, ArgT... args);
  std::string* mutable_increasepositionvalue();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_increasepositionvalue();
  void set_allocated_increasepositionvalue(std::string* increasepositionvalue);
  private:
  const std::string& _internal_increasepositionvalue() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_increasepositionvalue(const std::string& value);
  std::string* _internal_mutable_increasepositionvalue();
  public:

  // int32 mdPriceLevel = 2;
  void clear_mdpricelevel();
  ::PROTOBUF_NAMESPACE_ID::int32 mdpricelevel() const;
  void set_mdpricelevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mdpricelevel() const;
  void _internal_set_mdpricelevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mdQuoteType = 3;
  void clear_mdquotetype();
  ::PROTOBUF_NAMESPACE_ID::int32 mdquotetype() const;
  void set_mdquotetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mdquotetype() const;
  void _internal_set_mdquotetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 clearingMethod = 11;
  void clear_clearingmethod();
  ::PROTOBUF_NAMESPACE_ID::int32 clearingmethod() const;
  void set_clearingmethod(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_clearingmethod() const;
  void _internal_set_clearingmethod(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mdentrytype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quoteentryid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mdentrydate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mdentrytime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr minqty_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lastpx_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mdentrypx_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mdentrysize_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr settltype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr settldate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr b_deliverytype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s_deliverytype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr settlcurrency_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr settlcurrfxrate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr maturityyield_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partyid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr traderid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradername_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradingacctnumber_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradevolume_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unmatchqty_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr increasepositionvalue_;
  ::PROTOBUF_NAMESPACE_ID::int32 mdpricelevel_;
  ::PROTOBUF_NAMESPACE_ID::int32 mdquotetype_;
  ::PROTOBUF_NAMESPACE_ID::int32 clearingmethod_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_example_2eproto;
};
// -------------------------------------------------------------------

class Pb_CfetsTradeMarketDataSubscribeReceiveMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Pb_CfetsTradeMarketDataSubscribeReceiveMessage) */ {
 public:
  inline Pb_CfetsTradeMarketDataSubscribeReceiveMessage() : Pb_CfetsTradeMarketDataSubscribeReceiveMessage(nullptr) {}
  ~Pb_CfetsTradeMarketDataSubscribeReceiveMessage() override;
  explicit constexpr Pb_CfetsTradeMarketDataSubscribeReceiveMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pb_CfetsTradeMarketDataSubscribeReceiveMessage(const Pb_CfetsTradeMarketDataSubscribeReceiveMessage& from);
  Pb_CfetsTradeMarketDataSubscribeReceiveMessage(Pb_CfetsTradeMarketDataSubscribeReceiveMessage&& from) noexcept
    : Pb_CfetsTradeMarketDataSubscribeReceiveMessage() {
    *this = ::std::move(from);
  }

  inline Pb_CfetsTradeMarketDataSubscribeReceiveMessage& operator=(const Pb_CfetsTradeMarketDataSubscribeReceiveMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pb_CfetsTradeMarketDataSubscribeReceiveMessage& operator=(Pb_CfetsTradeMarketDataSubscribeReceiveMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pb_CfetsTradeMarketDataSubscribeReceiveMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pb_CfetsTradeMarketDataSubscribeReceiveMessage* internal_default_instance() {
    return reinterpret_cast<const Pb_CfetsTradeMarketDataSubscribeReceiveMessage*>(
               &_Pb_CfetsTradeMarketDataSubscribeReceiveMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Pb_CfetsTradeMarketDataSubscribeReceiveMessage& a, Pb_CfetsTradeMarketDataSubscribeReceiveMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(Pb_CfetsTradeMarketDataSubscribeReceiveMessage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pb_CfetsTradeMarketDataSubscribeReceiveMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pb_CfetsTradeMarketDataSubscribeReceiveMessage* New() const final {
    return new Pb_CfetsTradeMarketDataSubscribeReceiveMessage();
  }

  Pb_CfetsTradeMarketDataSubscribeReceiveMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pb_CfetsTradeMarketDataSubscribeReceiveMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pb_CfetsTradeMarketDataSubscribeReceiveMessage& from);
  void MergeFrom(const Pb_CfetsTradeMarketDataSubscribeReceiveMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pb_CfetsTradeMarketDataSubscribeReceiveMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Pb_CfetsTradeMarketDataSubscribeReceiveMessage";
  }
  protected:
  explicit Pb_CfetsTradeMarketDataSubscribeReceiveMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader Pb_MessageHeader;
  typedef Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody;
  typedef Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList Pb_CfetsTradeMarketDataList;
  typedef Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData Pb_CfetsTradeMarketData;

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kBodyFieldNumber = 2,
  };
  // .Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader& header() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader* release_header();
  ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader* mutable_header();
  void set_allocated_header(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader* header);
  private:
  const ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader& _internal_header() const;
  ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader* header);
  ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader* unsafe_arena_release_header();

  // .Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody body = 2;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody& body() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody* release_body();
  ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody* mutable_body();
  void set_allocated_body(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody* body);
  private:
  const ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody& _internal_body() const;
  ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody* _internal_mutable_body();
  public:
  void unsafe_arena_set_allocated_body(
      ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody* body);
  ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody* unsafe_arena_release_body();

  // @@protoc_insertion_point(class_scope:Pb_CfetsTradeMarketDataSubscribeReceiveMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader* header_;
  ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody* body_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_example_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader

// string action = 1;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::clear_action() {
  action_.ClearToEmpty();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::action() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::set_action(ArgT0&& arg0, ArgT... args) {
 
 action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.action)
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::mutable_action() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.action)
  return _internal_mutable_action();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::_internal_action() const {
  return action_.Get();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::_internal_set_action(const std::string& value) {
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::_internal_mutable_action() {
  
  return action_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::release_action() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.action)
}

// string clientID = 2;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::clear_clientid() {
  clientid_.ClearToEmpty();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::clientid() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.clientID)
  return _internal_clientid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::set_clientid(ArgT0&& arg0, ArgT... args) {
 
 clientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.clientID)
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::mutable_clientid() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.clientID)
  return _internal_mutable_clientid();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::_internal_clientid() const {
  return clientid_.Get();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::_internal_set_clientid(const std::string& value) {
  
  clientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::_internal_mutable_clientid() {
  
  return clientid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::release_clientid() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.clientID)
  return clientid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::set_allocated_clientid(std::string* clientid) {
  if (clientid != nullptr) {
    
  } else {
    
  }
  clientid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.clientID)
}

// string serialNo = 3;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::clear_serialno() {
  serialno_.ClearToEmpty();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::serialno() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.serialNo)
  return _internal_serialno();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::set_serialno(ArgT0&& arg0, ArgT... args) {
 
 serialno_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.serialNo)
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::mutable_serialno() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.serialNo)
  return _internal_mutable_serialno();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::_internal_serialno() const {
  return serialno_.Get();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::_internal_set_serialno(const std::string& value) {
  
  serialno_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::_internal_mutable_serialno() {
  
  return serialno_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::release_serialno() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.serialNo)
  return serialno_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::set_allocated_serialno(std::string* serialno) {
  if (serialno != nullptr) {
    
  } else {
    
  }
  serialno_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serialno,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.serialNo)
}

// string version = 4;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::version() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::set_version(ArgT0&& arg0, ArgT... args) {
 
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.version)
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::mutable_version() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.version)
  return _internal_mutable_version();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::_internal_version() const {
  return version_.Get();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::release_version() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.version)
}

// string msgType = 5;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::clear_msgtype() {
  msgtype_.ClearToEmpty();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::msgtype() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.msgType)
  return _internal_msgtype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::set_msgtype(ArgT0&& arg0, ArgT... args) {
 
 msgtype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.msgType)
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::mutable_msgtype() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.msgType)
  return _internal_mutable_msgtype();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::_internal_msgtype() const {
  return msgtype_.Get();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::_internal_set_msgtype(const std::string& value) {
  
  msgtype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::_internal_mutable_msgtype() {
  
  return msgtype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::release_msgtype() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.msgType)
  return msgtype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::set_allocated_msgtype(std::string* msgtype) {
  if (msgtype != nullptr) {
    
  } else {
    
  }
  msgtype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msgtype,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.msgType)
}

// string sendingTime = 6;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::clear_sendingtime() {
  sendingtime_.ClearToEmpty();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::sendingtime() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.sendingTime)
  return _internal_sendingtime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::set_sendingtime(ArgT0&& arg0, ArgT... args) {
 
 sendingtime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.sendingTime)
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::mutable_sendingtime() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.sendingTime)
  return _internal_mutable_sendingtime();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::_internal_sendingtime() const {
  return sendingtime_.Get();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::_internal_set_sendingtime(const std::string& value) {
  
  sendingtime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::_internal_mutable_sendingtime() {
  
  return sendingtime_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::release_sendingtime() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.sendingTime)
  return sendingtime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::set_allocated_sendingtime(std::string* sendingtime) {
  if (sendingtime != nullptr) {
    
  } else {
    
  }
  sendingtime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sendingtime,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.sendingTime)
}

// string from = 7;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::clear_from() {
  from_.ClearToEmpty();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::from() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.from)
  return _internal_from();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::set_from(ArgT0&& arg0, ArgT... args) {
 
 from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.from)
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::mutable_from() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.from)
  return _internal_mutable_from();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::_internal_from() const {
  return from_.Get();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::_internal_set_from(const std::string& value) {
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::_internal_mutable_from() {
  
  return from_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::release_from() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.from)
  return from_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.from)
}

// string operator = 8;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::clear_operator_() {
  operator__.ClearToEmpty();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::operator_() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.operator)
  return _internal_operator_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::set_operator_(ArgT0&& arg0, ArgT... args) {
 
 operator__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.operator)
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::mutable_operator_() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.operator)
  return _internal_mutable_operator_();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::_internal_operator_() const {
  return operator__.Get();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::_internal_set_operator_(const std::string& value) {
  
  operator__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::_internal_mutable_operator_() {
  
  return operator__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::release_operator_() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.operator)
  return operator__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::set_allocated_operator_(std::string* operator_) {
  if (operator_ != nullptr) {
    
  } else {
    
  }
  operator__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), operator_,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.operator)
}

// string errorCode = 9;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::clear_errorcode() {
  errorcode_.ClearToEmpty();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::errorcode() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.errorCode)
  return _internal_errorcode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::set_errorcode(ArgT0&& arg0, ArgT... args) {
 
 errorcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.errorCode)
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::mutable_errorcode() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.errorCode)
  return _internal_mutable_errorcode();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::_internal_errorcode() const {
  return errorcode_.Get();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::_internal_set_errorcode(const std::string& value) {
  
  errorcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::_internal_mutable_errorcode() {
  
  return errorcode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::release_errorcode() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.errorCode)
  return errorcode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::set_allocated_errorcode(std::string* errorcode) {
  if (errorcode != nullptr) {
    
  } else {
    
  }
  errorcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errorcode,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.errorCode)
}

// string errorMsg = 10;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::clear_errormsg() {
  errormsg_.ClearToEmpty();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::errormsg() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.errorMsg)
  return _internal_errormsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::set_errormsg(ArgT0&& arg0, ArgT... args) {
 
 errormsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.errorMsg)
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::mutable_errormsg() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.errorMsg)
  return _internal_mutable_errormsg();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::_internal_errormsg() const {
  return errormsg_.Get();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::_internal_set_errormsg(const std::string& value) {
  
  errormsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::_internal_mutable_errormsg() {
  
  return errormsg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::release_errormsg() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.errorMsg)
  return errormsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader::set_allocated_errormsg(std::string* errormsg) {
  if (errormsg != nullptr) {
    
  } else {
    
  }
  errormsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errormsg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader.errorMsg)
}

// -------------------------------------------------------------------

// Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody

// int32 qid = 1;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::clear_qid() {
  qid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_qid() const {
  return qid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::qid() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.qid)
  return _internal_qid();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_set_qid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  qid_ = value;
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::set_qid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_qid(value);
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.qid)
}

// int32 mdBookType = 2;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::clear_mdbooktype() {
  mdbooktype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_mdbooktype() const {
  return mdbooktype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::mdbooktype() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.mdBookType)
  return _internal_mdbooktype();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_set_mdbooktype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mdbooktype_ = value;
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::set_mdbooktype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mdbooktype(value);
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.mdBookType)
}

// string marketIndicator = 3;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::clear_marketindicator() {
  marketindicator_.ClearToEmpty();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::marketindicator() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.marketIndicator)
  return _internal_marketindicator();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::set_marketindicator(ArgT0&& arg0, ArgT... args) {
 
 marketindicator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.marketIndicator)
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::mutable_marketindicator() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.marketIndicator)
  return _internal_mutable_marketindicator();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_marketindicator() const {
  return marketindicator_.Get();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_set_marketindicator(const std::string& value) {
  
  marketindicator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_mutable_marketindicator() {
  
  return marketindicator_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::release_marketindicator() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.marketIndicator)
  return marketindicator_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::set_allocated_marketindicator(std::string* marketindicator) {
  if (marketindicator != nullptr) {
    
  } else {
    
  }
  marketindicator_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketindicator,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.marketIndicator)
}

// string clOrdID = 4;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::clear_clordid() {
  clordid_.ClearToEmpty();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::clordid() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.clOrdID)
  return _internal_clordid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::set_clordid(ArgT0&& arg0, ArgT... args) {
 
 clordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.clOrdID)
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::mutable_clordid() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.clOrdID)
  return _internal_mutable_clordid();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_clordid() const {
  return clordid_.Get();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_set_clordid(const std::string& value) {
  
  clordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_mutable_clordid() {
  
  return clordid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::release_clordid() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.clOrdID)
  return clordid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::set_allocated_clordid(std::string* clordid) {
  if (clordid != nullptr) {
    
  } else {
    
  }
  clordid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clordid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.clOrdID)
}

// string transactTime = 5;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::clear_transacttime() {
  transacttime_.ClearToEmpty();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::transacttime() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.transactTime)
  return _internal_transacttime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::set_transacttime(ArgT0&& arg0, ArgT... args) {
 
 transacttime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.transactTime)
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::mutable_transacttime() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.transactTime)
  return _internal_mutable_transacttime();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_transacttime() const {
  return transacttime_.Get();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_set_transacttime(const std::string& value) {
  
  transacttime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_mutable_transacttime() {
  
  return transacttime_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::release_transacttime() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.transactTime)
  return transacttime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::set_allocated_transacttime(std::string* transacttime) {
  if (transacttime != nullptr) {
    
  } else {
    
  }
  transacttime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transacttime,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.transactTime)
}

// string securityType = 6;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::clear_securitytype() {
  securitytype_.ClearToEmpty();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::securitytype() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.securityType)
  return _internal_securitytype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::set_securitytype(ArgT0&& arg0, ArgT... args) {
 
 securitytype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.securityType)
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::mutable_securitytype() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.securityType)
  return _internal_mutable_securitytype();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_securitytype() const {
  return securitytype_.Get();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_set_securitytype(const std::string& value) {
  
  securitytype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_mutable_securitytype() {
  
  return securitytype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::release_securitytype() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.securityType)
  return securitytype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::set_allocated_securitytype(std::string* securitytype) {
  if (securitytype != nullptr) {
    
  } else {
    
  }
  securitytype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), securitytype,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.securityType)
}

// string securityID = 7;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::clear_securityid() {
  securityid_.ClearToEmpty();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::securityid() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.securityID)
  return _internal_securityid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::set_securityid(ArgT0&& arg0, ArgT... args) {
 
 securityid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.securityID)
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::mutable_securityid() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.securityID)
  return _internal_mutable_securityid();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_securityid() const {
  return securityid_.Get();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_set_securityid(const std::string& value) {
  
  securityid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_mutable_securityid() {
  
  return securityid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::release_securityid() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.securityID)
  return securityid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::set_allocated_securityid(std::string* securityid) {
  if (securityid != nullptr) {
    
  } else {
    
  }
  securityid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), securityid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.securityID)
}

// string symbol = 8;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::clear_symbol() {
  symbol_.ClearToEmpty();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::symbol() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.symbol)
  return _internal_symbol();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::set_symbol(ArgT0&& arg0, ArgT... args) {
 
 symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.symbol)
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_symbol() const {
  return symbol_.Get();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_mutable_symbol() {
  
  return symbol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::release_symbol() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.symbol)
}

// int32 marketDepth = 9;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::clear_marketdepth() {
  marketdepth_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_marketdepth() const {
  return marketdepth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::marketdepth() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.marketDepth)
  return _internal_marketdepth();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_set_marketdepth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  marketdepth_ = value;
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::set_marketdepth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_marketdepth(value);
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.marketDepth)
}

// .Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataList pbMarketDataList = 10;
inline bool Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_has_pbmarketdatalist() const {
  return this != internal_default_instance() && pbmarketdatalist_ != nullptr;
}
inline bool Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::has_pbmarketdatalist() const {
  return _internal_has_pbmarketdatalist();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::clear_pbmarketdatalist() {
  if (GetArenaForAllocation() == nullptr && pbmarketdatalist_ != nullptr) {
    delete pbmarketdatalist_;
  }
  pbmarketdatalist_ = nullptr;
}
inline const ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_pbmarketdatalist() const {
  const ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList* p = pbmarketdatalist_;
  return p != nullptr ? *p : reinterpret_cast<const ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList&>(
      ::_Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList_default_instance_);
}
inline const ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::pbmarketdatalist() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.pbMarketDataList)
  return _internal_pbmarketdatalist();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::unsafe_arena_set_allocated_pbmarketdatalist(
    ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList* pbmarketdatalist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pbmarketdatalist_);
  }
  pbmarketdatalist_ = pbmarketdatalist;
  if (pbmarketdatalist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.pbMarketDataList)
}
inline ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::release_pbmarketdatalist() {
  
  ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList* temp = pbmarketdatalist_;
  pbmarketdatalist_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::unsafe_arena_release_pbmarketdatalist() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.pbMarketDataList)
  
  ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList* temp = pbmarketdatalist_;
  pbmarketdatalist_ = nullptr;
  return temp;
}
inline ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_mutable_pbmarketdatalist() {
  
  if (pbmarketdatalist_ == nullptr) {
    auto* p = CreateMaybeMessage<::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList>(GetArenaForAllocation());
    pbmarketdatalist_ = p;
  }
  return pbmarketdatalist_;
}
inline ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::mutable_pbmarketdatalist() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.pbMarketDataList)
  return _internal_mutable_pbmarketdatalist();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::set_allocated_pbmarketdatalist(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList* pbmarketdatalist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pbmarketdatalist_;
  }
  if (pbmarketdatalist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList>::GetOwningArena(pbmarketdatalist);
    if (message_arena != submessage_arena) {
      pbmarketdatalist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pbmarketdatalist, submessage_arena);
    }
    
  } else {
    
  }
  pbmarketdatalist_ = pbmarketdatalist;
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.pbMarketDataList)
}

// string mdSubBookType = 11;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::clear_mdsubbooktype() {
  mdsubbooktype_.ClearToEmpty();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::mdsubbooktype() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.mdSubBookType)
  return _internal_mdsubbooktype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::set_mdsubbooktype(ArgT0&& arg0, ArgT... args) {
 
 mdsubbooktype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.mdSubBookType)
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::mutable_mdsubbooktype() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.mdSubBookType)
  return _internal_mutable_mdsubbooktype();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_mdsubbooktype() const {
  return mdsubbooktype_.Get();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_set_mdsubbooktype(const std::string& value) {
  
  mdsubbooktype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_mutable_mdsubbooktype() {
  
  return mdsubbooktype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::release_mdsubbooktype() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.mdSubBookType)
  return mdsubbooktype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::set_allocated_mdsubbooktype(std::string* mdsubbooktype) {
  if (mdsubbooktype != nullptr) {
    
  } else {
    
  }
  mdsubbooktype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mdsubbooktype,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.mdSubBookType)
}

// string realTimeUndertakeFlag = 12;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::clear_realtimeundertakeflag() {
  realtimeundertakeflag_.ClearToEmpty();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::realtimeundertakeflag() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.realTimeUndertakeFlag)
  return _internal_realtimeundertakeflag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::set_realtimeundertakeflag(ArgT0&& arg0, ArgT... args) {
 
 realtimeundertakeflag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.realTimeUndertakeFlag)
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::mutable_realtimeundertakeflag() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.realTimeUndertakeFlag)
  return _internal_mutable_realtimeundertakeflag();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_realtimeundertakeflag() const {
  return realtimeundertakeflag_.Get();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_set_realtimeundertakeflag(const std::string& value) {
  
  realtimeundertakeflag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_mutable_realtimeundertakeflag() {
  
  return realtimeundertakeflag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::release_realtimeundertakeflag() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.realTimeUndertakeFlag)
  return realtimeundertakeflag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::set_allocated_realtimeundertakeflag(std::string* realtimeundertakeflag) {
  if (realtimeundertakeflag != nullptr) {
    
  } else {
    
  }
  realtimeundertakeflag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), realtimeundertakeflag,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.realTimeUndertakeFlag)
}

// string subjectPartyType = 13;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::clear_subjectpartytype() {
  subjectpartytype_.ClearToEmpty();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::subjectpartytype() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.subjectPartyType)
  return _internal_subjectpartytype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::set_subjectpartytype(ArgT0&& arg0, ArgT... args) {
 
 subjectpartytype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.subjectPartyType)
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::mutable_subjectpartytype() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.subjectPartyType)
  return _internal_mutable_subjectpartytype();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_subjectpartytype() const {
  return subjectpartytype_.Get();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_set_subjectpartytype(const std::string& value) {
  
  subjectpartytype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_mutable_subjectpartytype() {
  
  return subjectpartytype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::release_subjectpartytype() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.subjectPartyType)
  return subjectpartytype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::set_allocated_subjectpartytype(std::string* subjectpartytype) {
  if (subjectpartytype != nullptr) {
    
  } else {
    
  }
  subjectpartytype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subjectpartytype,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.subjectPartyType)
}

// string sendingTime = 14;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::clear_sendingtime() {
  sendingtime_.ClearToEmpty();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::sendingtime() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.sendingTime)
  return _internal_sendingtime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::set_sendingtime(ArgT0&& arg0, ArgT... args) {
 
 sendingtime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.sendingTime)
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::mutable_sendingtime() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.sendingTime)
  return _internal_mutable_sendingtime();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_sendingtime() const {
  return sendingtime_.Get();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_set_sendingtime(const std::string& value) {
  
  sendingtime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_mutable_sendingtime() {
  
  return sendingtime_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::release_sendingtime() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.sendingTime)
  return sendingtime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::set_allocated_sendingtime(std::string* sendingtime) {
  if (sendingtime != nullptr) {
    
  } else {
    
  }
  sendingtime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sendingtime,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.sendingTime)
}

// string repoMethod = 15;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::clear_repomethod() {
  repomethod_.ClearToEmpty();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::repomethod() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.repoMethod)
  return _internal_repomethod();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::set_repomethod(ArgT0&& arg0, ArgT... args) {
 
 repomethod_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.repoMethod)
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::mutable_repomethod() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.repoMethod)
  return _internal_mutable_repomethod();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_repomethod() const {
  return repomethod_.Get();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_set_repomethod(const std::string& value) {
  
  repomethod_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_mutable_repomethod() {
  
  return repomethod_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::release_repomethod() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.repoMethod)
  return repomethod_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::set_allocated_repomethod(std::string* repomethod) {
  if (repomethod != nullptr) {
    
  } else {
    
  }
  repomethod_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), repomethod,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.repoMethod)
}

// string transactionMethod = 16;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::clear_transactionmethod() {
  transactionmethod_.ClearToEmpty();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::transactionmethod() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.transactionMethod)
  return _internal_transactionmethod();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::set_transactionmethod(ArgT0&& arg0, ArgT... args) {
 
 transactionmethod_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.transactionMethod)
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::mutable_transactionmethod() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.transactionMethod)
  return _internal_mutable_transactionmethod();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_transactionmethod() const {
  return transactionmethod_.Get();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_set_transactionmethod(const std::string& value) {
  
  transactionmethod_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_mutable_transactionmethod() {
  
  return transactionmethod_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::release_transactionmethod() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.transactionMethod)
  return transactionmethod_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::set_allocated_transactionmethod(std::string* transactionmethod) {
  if (transactionmethod != nullptr) {
    
  } else {
    
  }
  transactionmethod_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transactionmethod,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.transactionMethod)
}

// string tradeMethod = 17;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::clear_trademethod() {
  trademethod_.ClearToEmpty();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::trademethod() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.tradeMethod)
  return _internal_trademethod();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::set_trademethod(ArgT0&& arg0, ArgT... args) {
 
 trademethod_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.tradeMethod)
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::mutable_trademethod() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.tradeMethod)
  return _internal_mutable_trademethod();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_trademethod() const {
  return trademethod_.Get();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_set_trademethod(const std::string& value) {
  
  trademethod_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_mutable_trademethod() {
  
  return trademethod_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::release_trademethod() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.tradeMethod)
  return trademethod_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::set_allocated_trademethod(std::string* trademethod) {
  if (trademethod != nullptr) {
    
  } else {
    
  }
  trademethod_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trademethod,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.tradeMethod)
}

// string bridgeDealIndic = 18;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::clear_bridgedealindic() {
  bridgedealindic_.ClearToEmpty();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::bridgedealindic() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.bridgeDealIndic)
  return _internal_bridgedealindic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::set_bridgedealindic(ArgT0&& arg0, ArgT... args) {
 
 bridgedealindic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.bridgeDealIndic)
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::mutable_bridgedealindic() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.bridgeDealIndic)
  return _internal_mutable_bridgedealindic();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_bridgedealindic() const {
  return bridgedealindic_.Get();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_set_bridgedealindic(const std::string& value) {
  
  bridgedealindic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_mutable_bridgedealindic() {
  
  return bridgedealindic_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::release_bridgedealindic() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.bridgeDealIndic)
  return bridgedealindic_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::set_allocated_bridgedealindic(std::string* bridgedealindic) {
  if (bridgedealindic != nullptr) {
    
  } else {
    
  }
  bridgedealindic_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bridgedealindic,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.bridgeDealIndic)
}

// string splitIndicator = 19;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::clear_splitindicator() {
  splitindicator_.ClearToEmpty();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::splitindicator() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.splitIndicator)
  return _internal_splitindicator();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::set_splitindicator(ArgT0&& arg0, ArgT... args) {
 
 splitindicator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.splitIndicator)
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::mutable_splitindicator() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.splitIndicator)
  return _internal_mutable_splitindicator();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_splitindicator() const {
  return splitindicator_.Get();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_set_splitindicator(const std::string& value) {
  
  splitindicator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::_internal_mutable_splitindicator() {
  
  return splitindicator_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::release_splitindicator() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.splitIndicator)
  return splitindicator_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody::set_allocated_splitindicator(std::string* splitindicator) {
  if (splitindicator != nullptr) {
    
  } else {
    
  }
  splitindicator_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), splitindicator,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody.splitIndicator)
}

// -------------------------------------------------------------------

// Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList

// repeated .Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData marketData = 1;
inline int Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList::_internal_marketdata_size() const {
  return marketdata_.size();
}
inline int Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList::marketdata_size() const {
  return _internal_marketdata_size();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList::clear_marketdata() {
  marketdata_.Clear();
}
inline ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList::mutable_marketdata(int index) {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataList.marketData)
  return marketdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData >*
Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList::mutable_marketdata() {
  // @@protoc_insertion_point(field_mutable_list:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataList.marketData)
  return &marketdata_;
}
inline const ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList::_internal_marketdata(int index) const {
  return marketdata_.Get(index);
}
inline const ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList::marketdata(int index) const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataList.marketData)
  return _internal_marketdata(index);
}
inline ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList::_internal_add_marketdata() {
  return marketdata_.Add();
}
inline ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList::add_marketdata() {
  // @@protoc_insertion_point(field_add:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataList.marketData)
  return _internal_add_marketdata();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData >&
Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataList::marketdata() const {
  // @@protoc_insertion_point(field_list:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataList.marketData)
  return marketdata_;
}

// -------------------------------------------------------------------

// Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData

// string mdEntryType = 1;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::clear_mdentrytype() {
  mdentrytype_.ClearToEmpty();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::mdentrytype() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.mdEntryType)
  return _internal_mdentrytype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::set_mdentrytype(ArgT0&& arg0, ArgT... args) {
 
 mdentrytype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.mdEntryType)
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::mutable_mdentrytype() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.mdEntryType)
  return _internal_mutable_mdentrytype();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_mdentrytype() const {
  return mdentrytype_.Get();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_set_mdentrytype(const std::string& value) {
  
  mdentrytype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_mutable_mdentrytype() {
  
  return mdentrytype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::release_mdentrytype() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.mdEntryType)
  return mdentrytype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::set_allocated_mdentrytype(std::string* mdentrytype) {
  if (mdentrytype != nullptr) {
    
  } else {
    
  }
  mdentrytype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mdentrytype,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.mdEntryType)
}

// int32 mdPriceLevel = 2;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::clear_mdpricelevel() {
  mdpricelevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_mdpricelevel() const {
  return mdpricelevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::mdpricelevel() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.mdPriceLevel)
  return _internal_mdpricelevel();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_set_mdpricelevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mdpricelevel_ = value;
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::set_mdpricelevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mdpricelevel(value);
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.mdPriceLevel)
}

// int32 mdQuoteType = 3;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::clear_mdquotetype() {
  mdquotetype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_mdquotetype() const {
  return mdquotetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::mdquotetype() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.mdQuoteType)
  return _internal_mdquotetype();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_set_mdquotetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mdquotetype_ = value;
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::set_mdquotetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mdquotetype(value);
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.mdQuoteType)
}

// string quoteEntryID = 4;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::clear_quoteentryid() {
  quoteentryid_.ClearToEmpty();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::quoteentryid() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.quoteEntryID)
  return _internal_quoteentryid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::set_quoteentryid(ArgT0&& arg0, ArgT... args) {
 
 quoteentryid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.quoteEntryID)
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::mutable_quoteentryid() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.quoteEntryID)
  return _internal_mutable_quoteentryid();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_quoteentryid() const {
  return quoteentryid_.Get();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_set_quoteentryid(const std::string& value) {
  
  quoteentryid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_mutable_quoteentryid() {
  
  return quoteentryid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::release_quoteentryid() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.quoteEntryID)
  return quoteentryid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::set_allocated_quoteentryid(std::string* quoteentryid) {
  if (quoteentryid != nullptr) {
    
  } else {
    
  }
  quoteentryid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), quoteentryid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.quoteEntryID)
}

// string mdEntryDate = 5;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::clear_mdentrydate() {
  mdentrydate_.ClearToEmpty();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::mdentrydate() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.mdEntryDate)
  return _internal_mdentrydate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::set_mdentrydate(ArgT0&& arg0, ArgT... args) {
 
 mdentrydate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.mdEntryDate)
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::mutable_mdentrydate() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.mdEntryDate)
  return _internal_mutable_mdentrydate();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_mdentrydate() const {
  return mdentrydate_.Get();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_set_mdentrydate(const std::string& value) {
  
  mdentrydate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_mutable_mdentrydate() {
  
  return mdentrydate_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::release_mdentrydate() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.mdEntryDate)
  return mdentrydate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::set_allocated_mdentrydate(std::string* mdentrydate) {
  if (mdentrydate != nullptr) {
    
  } else {
    
  }
  mdentrydate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mdentrydate,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.mdEntryDate)
}

// string mdEntryTime = 6;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::clear_mdentrytime() {
  mdentrytime_.ClearToEmpty();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::mdentrytime() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.mdEntryTime)
  return _internal_mdentrytime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::set_mdentrytime(ArgT0&& arg0, ArgT... args) {
 
 mdentrytime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.mdEntryTime)
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::mutable_mdentrytime() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.mdEntryTime)
  return _internal_mutable_mdentrytime();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_mdentrytime() const {
  return mdentrytime_.Get();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_set_mdentrytime(const std::string& value) {
  
  mdentrytime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_mutable_mdentrytime() {
  
  return mdentrytime_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::release_mdentrytime() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.mdEntryTime)
  return mdentrytime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::set_allocated_mdentrytime(std::string* mdentrytime) {
  if (mdentrytime != nullptr) {
    
  } else {
    
  }
  mdentrytime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mdentrytime,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.mdEntryTime)
}

// string minQty = 7;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::clear_minqty() {
  minqty_.ClearToEmpty();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::minqty() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.minQty)
  return _internal_minqty();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::set_minqty(ArgT0&& arg0, ArgT... args) {
 
 minqty_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.minQty)
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::mutable_minqty() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.minQty)
  return _internal_mutable_minqty();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_minqty() const {
  return minqty_.Get();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_set_minqty(const std::string& value) {
  
  minqty_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_mutable_minqty() {
  
  return minqty_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::release_minqty() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.minQty)
  return minqty_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::set_allocated_minqty(std::string* minqty) {
  if (minqty != nullptr) {
    
  } else {
    
  }
  minqty_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), minqty,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.minQty)
}

// string lastPx = 8;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::clear_lastpx() {
  lastpx_.ClearToEmpty();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::lastpx() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.lastPx)
  return _internal_lastpx();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::set_lastpx(ArgT0&& arg0, ArgT... args) {
 
 lastpx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.lastPx)
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::mutable_lastpx() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.lastPx)
  return _internal_mutable_lastpx();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_lastpx() const {
  return lastpx_.Get();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_set_lastpx(const std::string& value) {
  
  lastpx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_mutable_lastpx() {
  
  return lastpx_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::release_lastpx() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.lastPx)
  return lastpx_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::set_allocated_lastpx(std::string* lastpx) {
  if (lastpx != nullptr) {
    
  } else {
    
  }
  lastpx_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lastpx,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.lastPx)
}

// string mdEntryPx = 9;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::clear_mdentrypx() {
  mdentrypx_.ClearToEmpty();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::mdentrypx() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.mdEntryPx)
  return _internal_mdentrypx();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::set_mdentrypx(ArgT0&& arg0, ArgT... args) {
 
 mdentrypx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.mdEntryPx)
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::mutable_mdentrypx() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.mdEntryPx)
  return _internal_mutable_mdentrypx();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_mdentrypx() const {
  return mdentrypx_.Get();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_set_mdentrypx(const std::string& value) {
  
  mdentrypx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_mutable_mdentrypx() {
  
  return mdentrypx_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::release_mdentrypx() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.mdEntryPx)
  return mdentrypx_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::set_allocated_mdentrypx(std::string* mdentrypx) {
  if (mdentrypx != nullptr) {
    
  } else {
    
  }
  mdentrypx_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mdentrypx,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.mdEntryPx)
}

// string mdEntrySize = 10;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::clear_mdentrysize() {
  mdentrysize_.ClearToEmpty();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::mdentrysize() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.mdEntrySize)
  return _internal_mdentrysize();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::set_mdentrysize(ArgT0&& arg0, ArgT... args) {
 
 mdentrysize_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.mdEntrySize)
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::mutable_mdentrysize() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.mdEntrySize)
  return _internal_mutable_mdentrysize();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_mdentrysize() const {
  return mdentrysize_.Get();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_set_mdentrysize(const std::string& value) {
  
  mdentrysize_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_mutable_mdentrysize() {
  
  return mdentrysize_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::release_mdentrysize() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.mdEntrySize)
  return mdentrysize_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::set_allocated_mdentrysize(std::string* mdentrysize) {
  if (mdentrysize != nullptr) {
    
  } else {
    
  }
  mdentrysize_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mdentrysize,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.mdEntrySize)
}

// int32 clearingMethod = 11;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::clear_clearingmethod() {
  clearingmethod_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_clearingmethod() const {
  return clearingmethod_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::clearingmethod() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.clearingMethod)
  return _internal_clearingmethod();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_set_clearingmethod(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  clearingmethod_ = value;
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::set_clearingmethod(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_clearingmethod(value);
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.clearingMethod)
}

// string settlType = 12;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::clear_settltype() {
  settltype_.ClearToEmpty();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::settltype() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.settlType)
  return _internal_settltype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::set_settltype(ArgT0&& arg0, ArgT... args) {
 
 settltype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.settlType)
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::mutable_settltype() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.settlType)
  return _internal_mutable_settltype();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_settltype() const {
  return settltype_.Get();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_set_settltype(const std::string& value) {
  
  settltype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_mutable_settltype() {
  
  return settltype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::release_settltype() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.settlType)
  return settltype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::set_allocated_settltype(std::string* settltype) {
  if (settltype != nullptr) {
    
  } else {
    
  }
  settltype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), settltype,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.settlType)
}

// string settlDate = 13;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::clear_settldate() {
  settldate_.ClearToEmpty();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::settldate() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.settlDate)
  return _internal_settldate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::set_settldate(ArgT0&& arg0, ArgT... args) {
 
 settldate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.settlDate)
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::mutable_settldate() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.settlDate)
  return _internal_mutable_settldate();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_settldate() const {
  return settldate_.Get();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_set_settldate(const std::string& value) {
  
  settldate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_mutable_settldate() {
  
  return settldate_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::release_settldate() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.settlDate)
  return settldate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::set_allocated_settldate(std::string* settldate) {
  if (settldate != nullptr) {
    
  } else {
    
  }
  settldate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), settldate,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.settlDate)
}

// string b_DeliveryType = 14;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::clear_b_deliverytype() {
  b_deliverytype_.ClearToEmpty();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::b_deliverytype() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.b_DeliveryType)
  return _internal_b_deliverytype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::set_b_deliverytype(ArgT0&& arg0, ArgT... args) {
 
 b_deliverytype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.b_DeliveryType)
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::mutable_b_deliverytype() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.b_DeliveryType)
  return _internal_mutable_b_deliverytype();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_b_deliverytype() const {
  return b_deliverytype_.Get();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_set_b_deliverytype(const std::string& value) {
  
  b_deliverytype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_mutable_b_deliverytype() {
  
  return b_deliverytype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::release_b_deliverytype() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.b_DeliveryType)
  return b_deliverytype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::set_allocated_b_deliverytype(std::string* b_deliverytype) {
  if (b_deliverytype != nullptr) {
    
  } else {
    
  }
  b_deliverytype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), b_deliverytype,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.b_DeliveryType)
}

// string s_DeliveryType = 15;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::clear_s_deliverytype() {
  s_deliverytype_.ClearToEmpty();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::s_deliverytype() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.s_DeliveryType)
  return _internal_s_deliverytype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::set_s_deliverytype(ArgT0&& arg0, ArgT... args) {
 
 s_deliverytype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.s_DeliveryType)
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::mutable_s_deliverytype() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.s_DeliveryType)
  return _internal_mutable_s_deliverytype();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_s_deliverytype() const {
  return s_deliverytype_.Get();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_set_s_deliverytype(const std::string& value) {
  
  s_deliverytype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_mutable_s_deliverytype() {
  
  return s_deliverytype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::release_s_deliverytype() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.s_DeliveryType)
  return s_deliverytype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::set_allocated_s_deliverytype(std::string* s_deliverytype) {
  if (s_deliverytype != nullptr) {
    
  } else {
    
  }
  s_deliverytype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), s_deliverytype,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.s_DeliveryType)
}

// string settlCurrency = 16;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::clear_settlcurrency() {
  settlcurrency_.ClearToEmpty();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::settlcurrency() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.settlCurrency)
  return _internal_settlcurrency();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::set_settlcurrency(ArgT0&& arg0, ArgT... args) {
 
 settlcurrency_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.settlCurrency)
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::mutable_settlcurrency() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.settlCurrency)
  return _internal_mutable_settlcurrency();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_settlcurrency() const {
  return settlcurrency_.Get();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_set_settlcurrency(const std::string& value) {
  
  settlcurrency_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_mutable_settlcurrency() {
  
  return settlcurrency_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::release_settlcurrency() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.settlCurrency)
  return settlcurrency_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::set_allocated_settlcurrency(std::string* settlcurrency) {
  if (settlcurrency != nullptr) {
    
  } else {
    
  }
  settlcurrency_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), settlcurrency,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.settlCurrency)
}

// string settlCurrFxRate = 17;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::clear_settlcurrfxrate() {
  settlcurrfxrate_.ClearToEmpty();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::settlcurrfxrate() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.settlCurrFxRate)
  return _internal_settlcurrfxrate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::set_settlcurrfxrate(ArgT0&& arg0, ArgT... args) {
 
 settlcurrfxrate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.settlCurrFxRate)
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::mutable_settlcurrfxrate() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.settlCurrFxRate)
  return _internal_mutable_settlcurrfxrate();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_settlcurrfxrate() const {
  return settlcurrfxrate_.Get();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_set_settlcurrfxrate(const std::string& value) {
  
  settlcurrfxrate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_mutable_settlcurrfxrate() {
  
  return settlcurrfxrate_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::release_settlcurrfxrate() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.settlCurrFxRate)
  return settlcurrfxrate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::set_allocated_settlcurrfxrate(std::string* settlcurrfxrate) {
  if (settlcurrfxrate != nullptr) {
    
  } else {
    
  }
  settlcurrfxrate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), settlcurrfxrate,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.settlCurrFxRate)
}

// string maturityYield = 18;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::clear_maturityyield() {
  maturityyield_.ClearToEmpty();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::maturityyield() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.maturityYield)
  return _internal_maturityyield();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::set_maturityyield(ArgT0&& arg0, ArgT... args) {
 
 maturityyield_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.maturityYield)
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::mutable_maturityyield() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.maturityYield)
  return _internal_mutable_maturityyield();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_maturityyield() const {
  return maturityyield_.Get();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_set_maturityyield(const std::string& value) {
  
  maturityyield_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_mutable_maturityyield() {
  
  return maturityyield_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::release_maturityyield() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.maturityYield)
  return maturityyield_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::set_allocated_maturityyield(std::string* maturityyield) {
  if (maturityyield != nullptr) {
    
  } else {
    
  }
  maturityyield_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), maturityyield,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.maturityYield)
}

// string partyID = 19;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::clear_partyid() {
  partyid_.ClearToEmpty();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::partyid() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.partyID)
  return _internal_partyid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::set_partyid(ArgT0&& arg0, ArgT... args) {
 
 partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.partyID)
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::mutable_partyid() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.partyID)
  return _internal_mutable_partyid();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_partyid() const {
  return partyid_.Get();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_set_partyid(const std::string& value) {
  
  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_mutable_partyid() {
  
  return partyid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::release_partyid() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.partyID)
  return partyid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::set_allocated_partyid(std::string* partyid) {
  if (partyid != nullptr) {
    
  } else {
    
  }
  partyid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partyid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.partyID)
}

// string traderID = 20;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::clear_traderid() {
  traderid_.ClearToEmpty();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::traderid() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.traderID)
  return _internal_traderid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::set_traderid(ArgT0&& arg0, ArgT... args) {
 
 traderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.traderID)
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::mutable_traderid() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.traderID)
  return _internal_mutable_traderid();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_traderid() const {
  return traderid_.Get();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_set_traderid(const std::string& value) {
  
  traderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_mutable_traderid() {
  
  return traderid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::release_traderid() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.traderID)
  return traderid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::set_allocated_traderid(std::string* traderid) {
  if (traderid != nullptr) {
    
  } else {
    
  }
  traderid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), traderid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.traderID)
}

// string traderName = 21;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::clear_tradername() {
  tradername_.ClearToEmpty();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::tradername() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.traderName)
  return _internal_tradername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::set_tradername(ArgT0&& arg0, ArgT... args) {
 
 tradername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.traderName)
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::mutable_tradername() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.traderName)
  return _internal_mutable_tradername();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_tradername() const {
  return tradername_.Get();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_set_tradername(const std::string& value) {
  
  tradername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_mutable_tradername() {
  
  return tradername_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::release_tradername() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.traderName)
  return tradername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::set_allocated_tradername(std::string* tradername) {
  if (tradername != nullptr) {
    
  } else {
    
  }
  tradername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tradername,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.traderName)
}

// string tradingAcctNumber = 22;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::clear_tradingacctnumber() {
  tradingacctnumber_.ClearToEmpty();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::tradingacctnumber() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.tradingAcctNumber)
  return _internal_tradingacctnumber();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::set_tradingacctnumber(ArgT0&& arg0, ArgT... args) {
 
 tradingacctnumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.tradingAcctNumber)
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::mutable_tradingacctnumber() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.tradingAcctNumber)
  return _internal_mutable_tradingacctnumber();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_tradingacctnumber() const {
  return tradingacctnumber_.Get();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_set_tradingacctnumber(const std::string& value) {
  
  tradingacctnumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_mutable_tradingacctnumber() {
  
  return tradingacctnumber_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::release_tradingacctnumber() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.tradingAcctNumber)
  return tradingacctnumber_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::set_allocated_tradingacctnumber(std::string* tradingacctnumber) {
  if (tradingacctnumber != nullptr) {
    
  } else {
    
  }
  tradingacctnumber_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tradingacctnumber,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.tradingAcctNumber)
}

// string tradeVolume = 23;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::clear_tradevolume() {
  tradevolume_.ClearToEmpty();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::tradevolume() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.tradeVolume)
  return _internal_tradevolume();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::set_tradevolume(ArgT0&& arg0, ArgT... args) {
 
 tradevolume_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.tradeVolume)
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::mutable_tradevolume() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.tradeVolume)
  return _internal_mutable_tradevolume();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_tradevolume() const {
  return tradevolume_.Get();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_set_tradevolume(const std::string& value) {
  
  tradevolume_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_mutable_tradevolume() {
  
  return tradevolume_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::release_tradevolume() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.tradeVolume)
  return tradevolume_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::set_allocated_tradevolume(std::string* tradevolume) {
  if (tradevolume != nullptr) {
    
  } else {
    
  }
  tradevolume_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tradevolume,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.tradeVolume)
}

// string unMatchQty = 24;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::clear_unmatchqty() {
  unmatchqty_.ClearToEmpty();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::unmatchqty() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.unMatchQty)
  return _internal_unmatchqty();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::set_unmatchqty(ArgT0&& arg0, ArgT... args) {
 
 unmatchqty_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.unMatchQty)
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::mutable_unmatchqty() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.unMatchQty)
  return _internal_mutable_unmatchqty();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_unmatchqty() const {
  return unmatchqty_.Get();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_set_unmatchqty(const std::string& value) {
  
  unmatchqty_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_mutable_unmatchqty() {
  
  return unmatchqty_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::release_unmatchqty() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.unMatchQty)
  return unmatchqty_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::set_allocated_unmatchqty(std::string* unmatchqty) {
  if (unmatchqty != nullptr) {
    
  } else {
    
  }
  unmatchqty_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unmatchqty,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.unMatchQty)
}

// string increasePositionValue = 25;
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::clear_increasepositionvalue() {
  increasepositionvalue_.ClearToEmpty();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::increasepositionvalue() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.increasePositionValue)
  return _internal_increasepositionvalue();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::set_increasepositionvalue(ArgT0&& arg0, ArgT... args) {
 
 increasepositionvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.increasePositionValue)
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::mutable_increasepositionvalue() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.increasePositionValue)
  return _internal_mutable_increasepositionvalue();
}
inline const std::string& Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_increasepositionvalue() const {
  return increasepositionvalue_.Get();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_set_increasepositionvalue(const std::string& value) {
  
  increasepositionvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::_internal_mutable_increasepositionvalue() {
  
  return increasepositionvalue_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::release_increasepositionvalue() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.increasePositionValue)
  return increasepositionvalue_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketData::set_allocated_increasepositionvalue(std::string* increasepositionvalue) {
  if (increasepositionvalue != nullptr) {
    
  } else {
    
  }
  increasepositionvalue_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), increasepositionvalue,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketData.increasePositionValue)
}

// -------------------------------------------------------------------

// Pb_CfetsTradeMarketDataSubscribeReceiveMessage

// .Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_MessageHeader header = 1;
inline bool Pb_CfetsTradeMarketDataSubscribeReceiveMessage::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Pb_CfetsTradeMarketDataSubscribeReceiveMessage::has_header() const {
  return _internal_has_header();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader& Pb_CfetsTradeMarketDataSubscribeReceiveMessage::_internal_header() const {
  const ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader&>(
      ::_Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader_default_instance_);
}
inline const ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader& Pb_CfetsTradeMarketDataSubscribeReceiveMessage::header() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.header)
  return _internal_header();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage::unsafe_arena_set_allocated_header(
    ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.header)
}
inline ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader* Pb_CfetsTradeMarketDataSubscribeReceiveMessage::release_header() {
  
  ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader* temp = header_;
  header_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader* Pb_CfetsTradeMarketDataSubscribeReceiveMessage::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.header)
  
  ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader* Pb_CfetsTradeMarketDataSubscribeReceiveMessage::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader* Pb_CfetsTradeMarketDataSubscribeReceiveMessage::mutable_header() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.header)
  return _internal_mutable_header();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage::set_allocated_header(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_MessageHeader>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.header)
}

// .Pb_CfetsTradeMarketDataSubscribeReceiveMessage.Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody body = 2;
inline bool Pb_CfetsTradeMarketDataSubscribeReceiveMessage::_internal_has_body() const {
  return this != internal_default_instance() && body_ != nullptr;
}
inline bool Pb_CfetsTradeMarketDataSubscribeReceiveMessage::has_body() const {
  return _internal_has_body();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage::clear_body() {
  if (GetArenaForAllocation() == nullptr && body_ != nullptr) {
    delete body_;
  }
  body_ = nullptr;
}
inline const ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody& Pb_CfetsTradeMarketDataSubscribeReceiveMessage::_internal_body() const {
  const ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody* p = body_;
  return p != nullptr ? *p : reinterpret_cast<const ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody&>(
      ::_Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody_default_instance_);
}
inline const ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody& Pb_CfetsTradeMarketDataSubscribeReceiveMessage::body() const {
  // @@protoc_insertion_point(field_get:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.body)
  return _internal_body();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage::unsafe_arena_set_allocated_body(
    ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody* body) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(body_);
  }
  body_ = body;
  if (body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.body)
}
inline ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody* Pb_CfetsTradeMarketDataSubscribeReceiveMessage::release_body() {
  
  ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody* temp = body_;
  body_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody* Pb_CfetsTradeMarketDataSubscribeReceiveMessage::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_release:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.body)
  
  ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody* temp = body_;
  body_ = nullptr;
  return temp;
}
inline ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody* Pb_CfetsTradeMarketDataSubscribeReceiveMessage::_internal_mutable_body() {
  
  if (body_ == nullptr) {
    auto* p = CreateMaybeMessage<::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody>(GetArenaForAllocation());
    body_ = p;
  }
  return body_;
}
inline ::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody* Pb_CfetsTradeMarketDataSubscribeReceiveMessage::mutable_body() {
  // @@protoc_insertion_point(field_mutable:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.body)
  return _internal_mutable_body();
}
inline void Pb_CfetsTradeMarketDataSubscribeReceiveMessage::set_allocated_body(::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody* body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete body_;
  }
  if (body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Pb_CfetsTradeMarketDataSubscribeReceiveMessage_Pb_CfetsTradeMarketDataSubscribeReceiveMessageBody>::GetOwningArena(body);
    if (message_arena != submessage_arena) {
      body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    
  } else {
    
  }
  body_ = body;
  // @@protoc_insertion_point(field_set_allocated:Pb_CfetsTradeMarketDataSubscribeReceiveMessage.body)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_example_2eproto
