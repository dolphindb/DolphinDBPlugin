// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dolphindbFast.proto

#include "dolphindbFast.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace ddbprotobuf {
constexpr Scalar::Scalar(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : is_null_(false)
  , _oneof_case_{}{}
struct ScalarDefaultTypeInternal {
  constexpr ScalarDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ScalarDefaultTypeInternal() {}
  union {
    Scalar _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ScalarDefaultTypeInternal _Scalar_default_instance_;
constexpr intVector::intVector(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dt_int_()
  , _dt_int_cached_byte_size_(){}
struct intVectorDefaultTypeInternal {
  constexpr intVectorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~intVectorDefaultTypeInternal() {}
  union {
    intVector _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT intVectorDefaultTypeInternal _intVector_default_instance_;
constexpr longVector::longVector(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dt_long_()
  , _dt_long_cached_byte_size_(){}
struct longVectorDefaultTypeInternal {
  constexpr longVectorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~longVectorDefaultTypeInternal() {}
  union {
    longVector _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT longVectorDefaultTypeInternal _longVector_default_instance_;
constexpr floatVector::floatVector(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dt_float_(){}
struct floatVectorDefaultTypeInternal {
  constexpr floatVectorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~floatVectorDefaultTypeInternal() {}
  union {
    floatVector _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT floatVectorDefaultTypeInternal _floatVector_default_instance_;
constexpr doubleVector::doubleVector(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dt_double_(){}
struct doubleVectorDefaultTypeInternal {
  constexpr doubleVectorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~doubleVectorDefaultTypeInternal() {}
  union {
    doubleVector _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT doubleVectorDefaultTypeInternal _doubleVector_default_instance_;
constexpr stringVector::stringVector(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dt_string_(){}
struct stringVectorDefaultTypeInternal {
  constexpr stringVectorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~stringVectorDefaultTypeInternal() {}
  union {
    stringVector _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT stringVectorDefaultTypeInternal _stringVector_default_instance_;
constexpr boolVector::boolVector(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dt_bool_(){}
struct boolVectorDefaultTypeInternal {
  constexpr boolVectorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~boolVectorDefaultTypeInternal() {}
  union {
    boolVector _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT boolVectorDefaultTypeInternal _boolVector_default_instance_;
constexpr Vector::Vector(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : is_null_(false)
  , _oneof_case_{}{}
struct VectorDefaultTypeInternal {
  constexpr VectorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VectorDefaultTypeInternal() {}
  union {
    Vector _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VectorDefaultTypeInternal _Vector_default_instance_;
constexpr Table::Table(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : columns_(){}
struct TableDefaultTypeInternal {
  constexpr TableDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TableDefaultTypeInternal() {}
  union {
    Table _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TableDefaultTypeInternal _Table_default_instance_;
constexpr Dictionary::Dictionary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : keys_(nullptr)
  , values_(nullptr){}
struct DictionaryDefaultTypeInternal {
  constexpr DictionaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DictionaryDefaultTypeInternal() {}
  union {
    Dictionary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DictionaryDefaultTypeInternal _Dictionary_default_instance_;
constexpr DolphinMessage::DolphinMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct DolphinMessageDefaultTypeInternal {
  constexpr DolphinMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DolphinMessageDefaultTypeInternal() {}
  union {
    DolphinMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DolphinMessageDefaultTypeInternal _DolphinMessage_default_instance_;
}  // namespace ddbprotobuf
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dolphindbFast_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_dolphindbFast_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dolphindbFast_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dolphindbFast_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ddbprotobuf::Scalar, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ddbprotobuf::Scalar, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ddbprotobuf::Scalar, is_null_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ddbprotobuf::Scalar, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ddbprotobuf::intVector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ddbprotobuf::intVector, dt_int_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ddbprotobuf::longVector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ddbprotobuf::longVector, dt_long_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ddbprotobuf::floatVector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ddbprotobuf::floatVector, dt_float_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ddbprotobuf::doubleVector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ddbprotobuf::doubleVector, dt_double_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ddbprotobuf::stringVector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ddbprotobuf::stringVector, dt_string_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ddbprotobuf::boolVector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ddbprotobuf::boolVector, dt_bool_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ddbprotobuf::Vector, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ddbprotobuf::Vector, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ddbprotobuf::Vector, is_null_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ddbprotobuf::Vector, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ddbprotobuf::Table, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ddbprotobuf::Table, columns_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ddbprotobuf::Dictionary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ddbprotobuf::Dictionary, keys_),
  PROTOBUF_FIELD_OFFSET(::ddbprotobuf::Dictionary, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ddbprotobuf::DolphinMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ddbprotobuf::DolphinMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ddbprotobuf::DolphinMessage, form_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ddbprotobuf::Scalar)},
  { 13, -1, sizeof(::ddbprotobuf::intVector)},
  { 19, -1, sizeof(::ddbprotobuf::longVector)},
  { 25, -1, sizeof(::ddbprotobuf::floatVector)},
  { 31, -1, sizeof(::ddbprotobuf::doubleVector)},
  { 37, -1, sizeof(::ddbprotobuf::stringVector)},
  { 43, -1, sizeof(::ddbprotobuf::boolVector)},
  { 49, -1, sizeof(::ddbprotobuf::Vector)},
  { 62, -1, sizeof(::ddbprotobuf::Table)},
  { 68, -1, sizeof(::ddbprotobuf::Dictionary)},
  { 75, -1, sizeof(::ddbprotobuf::DolphinMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ddbprotobuf::_Scalar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ddbprotobuf::_intVector_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ddbprotobuf::_longVector_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ddbprotobuf::_floatVector_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ddbprotobuf::_doubleVector_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ddbprotobuf::_stringVector_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ddbprotobuf::_boolVector_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ddbprotobuf::_Vector_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ddbprotobuf::_Table_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ddbprotobuf::_Dictionary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ddbprotobuf::_DolphinMessage_default_instance_),
};

const char descriptor_table_protodef_dolphindbFast_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023dolphindbFast.proto\022\013ddbprotobuf\"\227\001\n\006S"
  "calar\022\017\n\007is_null\030\001 \001(\010\022\020\n\006dt_int\030\002 \001(\021H\000"
  "\022\021\n\007dt_long\030\003 \001(\022H\000\022\022\n\010dt_float\030\004 \001(\002H\000\022"
  "\023\n\tdt_double\030\005 \001(\001H\000\022\023\n\tdt_string\030\006 \001(\tH"
  "\000\022\021\n\007dt_bool\030\007 \001(\010H\000B\006\n\004type\"\033\n\tintVecto"
  "r\022\016\n\006dt_int\030\001 \003(\021\"\035\n\nlongVector\022\017\n\007dt_lo"
  "ng\030\001 \003(\022\"\037\n\013floatVector\022\020\n\010dt_float\030\001 \003("
  "\002\"!\n\014doubleVector\022\021\n\tdt_double\030\001 \003(\001\"!\n\014"
  "stringVector\022\021\n\tdt_string\030\001 \003(\t\"\035\n\nboolV"
  "ector\022\017\n\007dt_bool\030\001 \003(\010\"\267\002\n\006Vector\022\017\n\007is_"
  "null\030\001 \001(\010\022)\n\007int_vec\030\002 \001(\0132\026.ddbprotobu"
  "f.intVectorH\000\022+\n\010long_vec\030\003 \001(\0132\027.ddbpro"
  "tobuf.longVectorH\000\022-\n\tfloat_vec\030\004 \001(\0132\030."
  "ddbprotobuf.floatVectorH\000\022/\n\ndouble_vec\030"
  "\005 \001(\0132\031.ddbprotobuf.doubleVectorH\000\022/\n\nst"
  "ring_vec\030\006 \001(\0132\031.ddbprotobuf.stringVecto"
  "rH\000\022+\n\010bool_vec\030\007 \001(\0132\027.ddbprotobuf.bool"
  "VectorH\000B\006\n\004type\"-\n\005Table\022$\n\007columns\030\001 \003"
  "(\0132\023.ddbprotobuf.Vector\"T\n\nDictionary\022!\n"
  "\004keys\030\001 \001(\0132\023.ddbprotobuf.Vector\022#\n\006valu"
  "es\030\002 \001(\0132\023.ddbprotobuf.Vector\"\306\001\n\016Dolphi"
  "nMessage\022(\n\tdf_scalar\030\001 \001(\0132\023.ddbprotobu"
  "f.ScalarH\000\022(\n\tdf_vector\030\002 \001(\0132\023.ddbproto"
  "buf.VectorH\000\022&\n\010df_table\030\003 \001(\0132\022.ddbprot"
  "obuf.TableH\000\0220\n\rdf_dictionary\030\004 \001(\0132\027.dd"
  "bprotobuf.DictionaryH\000B\006\n\004formb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dolphindbFast_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dolphindbFast_2eproto = {
  false, false, 1038, descriptor_table_protodef_dolphindbFast_2eproto, "dolphindbFast.proto", 
  &descriptor_table_dolphindbFast_2eproto_once, nullptr, 0, 11,
  schemas, file_default_instances, TableStruct_dolphindbFast_2eproto::offsets,
  file_level_metadata_dolphindbFast_2eproto, file_level_enum_descriptors_dolphindbFast_2eproto, file_level_service_descriptors_dolphindbFast_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_dolphindbFast_2eproto_getter() {
  return &descriptor_table_dolphindbFast_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_dolphindbFast_2eproto(&descriptor_table_dolphindbFast_2eproto);
namespace ddbprotobuf {

// ===================================================================

class Scalar::_Internal {
 public:
};

Scalar::Scalar(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ddbprotobuf.Scalar)
}
Scalar::Scalar(const Scalar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_null_ = from.is_null_;
  clear_has_type();
  switch (from.type_case()) {
    case kDtInt: {
      _internal_set_dt_int(from._internal_dt_int());
      break;
    }
    case kDtLong: {
      _internal_set_dt_long(from._internal_dt_long());
      break;
    }
    case kDtFloat: {
      _internal_set_dt_float(from._internal_dt_float());
      break;
    }
    case kDtDouble: {
      _internal_set_dt_double(from._internal_dt_double());
      break;
    }
    case kDtString: {
      _internal_set_dt_string(from._internal_dt_string());
      break;
    }
    case kDtBool: {
      _internal_set_dt_bool(from._internal_dt_bool());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ddbprotobuf.Scalar)
}

void Scalar::SharedCtor() {
is_null_ = false;
clear_has_type();
}

Scalar::~Scalar() {
  // @@protoc_insertion_point(destructor:ddbprotobuf.Scalar)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Scalar::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_type()) {
    clear_type();
  }
}

void Scalar::ArenaDtor(void* object) {
  Scalar* _this = reinterpret_cast< Scalar* >(object);
  (void)_this;
}
void Scalar::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Scalar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Scalar::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:ddbprotobuf.Scalar)
  switch (type_case()) {
    case kDtInt: {
      // No need to clear
      break;
    }
    case kDtLong: {
      // No need to clear
      break;
    }
    case kDtFloat: {
      // No need to clear
      break;
    }
    case kDtDouble: {
      // No need to clear
      break;
    }
    case kDtString: {
      type_.dt_string_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kDtBool: {
      // No need to clear
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void Scalar::Clear() {
// @@protoc_insertion_point(message_clear_start:ddbprotobuf.Scalar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_null_ = false;
  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Scalar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_null = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 dt_int = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_dt_int(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint64 dt_long = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_dt_long(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float dt_float = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _internal_set_dt_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // double dt_double = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _internal_set_dt_double(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string dt_string = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_dt_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ddbprotobuf.Scalar.dt_string"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool dt_bool = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _internal_set_dt_bool(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Scalar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddbprotobuf.Scalar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_null = 1;
  if (this->is_null() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_null(), target);
  }

  // sint32 dt_int = 2;
  if (_internal_has_dt_int()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_dt_int(), target);
  }

  // sint64 dt_long = 3;
  if (_internal_has_dt_long()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(3, this->_internal_dt_long(), target);
  }

  // float dt_float = 4;
  if (_internal_has_dt_float()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_dt_float(), target);
  }

  // double dt_double = 5;
  if (_internal_has_dt_double()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_dt_double(), target);
  }

  // string dt_string = 6;
  if (_internal_has_dt_string()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dt_string().data(), static_cast<int>(this->_internal_dt_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ddbprotobuf.Scalar.dt_string");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_dt_string(), target);
  }

  // bool dt_bool = 7;
  if (_internal_has_dt_bool()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_dt_bool(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ddbprotobuf.Scalar)
  return target;
}

size_t Scalar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ddbprotobuf.Scalar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_null = 1;
  if (this->is_null() != 0) {
    total_size += 1 + 1;
  }

  switch (type_case()) {
    // sint32 dt_int = 2;
    case kDtInt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_dt_int());
      break;
    }
    // sint64 dt_long = 3;
    case kDtLong: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
          this->_internal_dt_long());
      break;
    }
    // float dt_float = 4;
    case kDtFloat: {
      total_size += 1 + 4;
      break;
    }
    // double dt_double = 5;
    case kDtDouble: {
      total_size += 1 + 8;
      break;
    }
    // string dt_string = 6;
    case kDtString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dt_string());
      break;
    }
    // bool dt_bool = 7;
    case kDtBool: {
      total_size += 1 + 1;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scalar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ddbprotobuf.Scalar)
  GOOGLE_DCHECK_NE(&from, this);
  const Scalar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Scalar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ddbprotobuf.Scalar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ddbprotobuf.Scalar)
    MergeFrom(*source);
  }
}

void Scalar::MergeFrom(const Scalar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ddbprotobuf.Scalar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_null() != 0) {
    _internal_set_is_null(from._internal_is_null());
  }
  switch (from.type_case()) {
    case kDtInt: {
      _internal_set_dt_int(from._internal_dt_int());
      break;
    }
    case kDtLong: {
      _internal_set_dt_long(from._internal_dt_long());
      break;
    }
    case kDtFloat: {
      _internal_set_dt_float(from._internal_dt_float());
      break;
    }
    case kDtDouble: {
      _internal_set_dt_double(from._internal_dt_double());
      break;
    }
    case kDtString: {
      _internal_set_dt_string(from._internal_dt_string());
      break;
    }
    case kDtBool: {
      _internal_set_dt_bool(from._internal_dt_bool());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void Scalar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ddbprotobuf.Scalar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scalar::CopyFrom(const Scalar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ddbprotobuf.Scalar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scalar::IsInitialized() const {
  return true;
}

void Scalar::InternalSwap(Scalar* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(is_null_, other->is_null_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Scalar::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dolphindbFast_2eproto_getter, &descriptor_table_dolphindbFast_2eproto_once,
      file_level_metadata_dolphindbFast_2eproto[0]);
}

// ===================================================================

class intVector::_Internal {
 public:
};

intVector::intVector(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  dt_int_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ddbprotobuf.intVector)
}
intVector::intVector(const intVector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dt_int_(from.dt_int_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ddbprotobuf.intVector)
}

void intVector::SharedCtor() {
}

intVector::~intVector() {
  // @@protoc_insertion_point(destructor:ddbprotobuf.intVector)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void intVector::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void intVector::ArenaDtor(void* object) {
  intVector* _this = reinterpret_cast< intVector* >(object);
  (void)_this;
}
void intVector::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void intVector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void intVector::Clear() {
// @@protoc_insertion_point(message_clear_start:ddbprotobuf.intVector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dt_int_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* intVector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated sint32 dt_int = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_dt_int(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_dt_int(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* intVector::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddbprotobuf.intVector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated sint32 dt_int = 1;
  {
    int byte_size = _dt_int_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt32Packed(
          1, _internal_dt_int(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ddbprotobuf.intVector)
  return target;
}

size_t intVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ddbprotobuf.intVector)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated sint32 dt_int = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt32Size(this->dt_int_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _dt_int_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void intVector::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ddbprotobuf.intVector)
  GOOGLE_DCHECK_NE(&from, this);
  const intVector* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<intVector>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ddbprotobuf.intVector)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ddbprotobuf.intVector)
    MergeFrom(*source);
  }
}

void intVector::MergeFrom(const intVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ddbprotobuf.intVector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dt_int_.MergeFrom(from.dt_int_);
}

void intVector::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ddbprotobuf.intVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void intVector::CopyFrom(const intVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ddbprotobuf.intVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool intVector::IsInitialized() const {
  return true;
}

void intVector::InternalSwap(intVector* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  dt_int_.InternalSwap(&other->dt_int_);
}

::PROTOBUF_NAMESPACE_ID::Metadata intVector::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dolphindbFast_2eproto_getter, &descriptor_table_dolphindbFast_2eproto_once,
      file_level_metadata_dolphindbFast_2eproto[1]);
}

// ===================================================================

class longVector::_Internal {
 public:
};

longVector::longVector(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  dt_long_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ddbprotobuf.longVector)
}
longVector::longVector(const longVector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dt_long_(from.dt_long_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ddbprotobuf.longVector)
}

void longVector::SharedCtor() {
}

longVector::~longVector() {
  // @@protoc_insertion_point(destructor:ddbprotobuf.longVector)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void longVector::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void longVector::ArenaDtor(void* object) {
  longVector* _this = reinterpret_cast< longVector* >(object);
  (void)_this;
}
void longVector::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void longVector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void longVector::Clear() {
// @@protoc_insertion_point(message_clear_start:ddbprotobuf.longVector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dt_long_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* longVector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated sint64 dt_long = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt64Parser(_internal_mutable_dt_long(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_dt_long(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* longVector::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddbprotobuf.longVector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated sint64 dt_long = 1;
  {
    int byte_size = _dt_long_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt64Packed(
          1, _internal_dt_long(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ddbprotobuf.longVector)
  return target;
}

size_t longVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ddbprotobuf.longVector)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated sint64 dt_long = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt64Size(this->dt_long_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _dt_long_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void longVector::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ddbprotobuf.longVector)
  GOOGLE_DCHECK_NE(&from, this);
  const longVector* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<longVector>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ddbprotobuf.longVector)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ddbprotobuf.longVector)
    MergeFrom(*source);
  }
}

void longVector::MergeFrom(const longVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ddbprotobuf.longVector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dt_long_.MergeFrom(from.dt_long_);
}

void longVector::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ddbprotobuf.longVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void longVector::CopyFrom(const longVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ddbprotobuf.longVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool longVector::IsInitialized() const {
  return true;
}

void longVector::InternalSwap(longVector* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  dt_long_.InternalSwap(&other->dt_long_);
}

::PROTOBUF_NAMESPACE_ID::Metadata longVector::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dolphindbFast_2eproto_getter, &descriptor_table_dolphindbFast_2eproto_once,
      file_level_metadata_dolphindbFast_2eproto[2]);
}

// ===================================================================

class floatVector::_Internal {
 public:
};

floatVector::floatVector(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  dt_float_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ddbprotobuf.floatVector)
}
floatVector::floatVector(const floatVector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dt_float_(from.dt_float_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ddbprotobuf.floatVector)
}

void floatVector::SharedCtor() {
}

floatVector::~floatVector() {
  // @@protoc_insertion_point(destructor:ddbprotobuf.floatVector)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void floatVector::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void floatVector::ArenaDtor(void* object) {
  floatVector* _this = reinterpret_cast< floatVector* >(object);
  (void)_this;
}
void floatVector::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void floatVector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void floatVector::Clear() {
// @@protoc_insertion_point(message_clear_start:ddbprotobuf.floatVector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dt_float_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* floatVector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float dt_float = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_dt_float(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_dt_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* floatVector::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddbprotobuf.floatVector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float dt_float = 1;
  if (this->_internal_dt_float_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_dt_float(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ddbprotobuf.floatVector)
  return target;
}

size_t floatVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ddbprotobuf.floatVector)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float dt_float = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_dt_float_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void floatVector::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ddbprotobuf.floatVector)
  GOOGLE_DCHECK_NE(&from, this);
  const floatVector* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<floatVector>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ddbprotobuf.floatVector)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ddbprotobuf.floatVector)
    MergeFrom(*source);
  }
}

void floatVector::MergeFrom(const floatVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ddbprotobuf.floatVector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dt_float_.MergeFrom(from.dt_float_);
}

void floatVector::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ddbprotobuf.floatVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void floatVector::CopyFrom(const floatVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ddbprotobuf.floatVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool floatVector::IsInitialized() const {
  return true;
}

void floatVector::InternalSwap(floatVector* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  dt_float_.InternalSwap(&other->dt_float_);
}

::PROTOBUF_NAMESPACE_ID::Metadata floatVector::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dolphindbFast_2eproto_getter, &descriptor_table_dolphindbFast_2eproto_once,
      file_level_metadata_dolphindbFast_2eproto[3]);
}

// ===================================================================

class doubleVector::_Internal {
 public:
};

doubleVector::doubleVector(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  dt_double_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ddbprotobuf.doubleVector)
}
doubleVector::doubleVector(const doubleVector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dt_double_(from.dt_double_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ddbprotobuf.doubleVector)
}

void doubleVector::SharedCtor() {
}

doubleVector::~doubleVector() {
  // @@protoc_insertion_point(destructor:ddbprotobuf.doubleVector)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void doubleVector::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void doubleVector::ArenaDtor(void* object) {
  doubleVector* _this = reinterpret_cast< doubleVector* >(object);
  (void)_this;
}
void doubleVector::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void doubleVector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void doubleVector::Clear() {
// @@protoc_insertion_point(message_clear_start:ddbprotobuf.doubleVector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dt_double_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* doubleVector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double dt_double = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_dt_double(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          _internal_add_dt_double(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* doubleVector::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddbprotobuf.doubleVector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double dt_double = 1;
  if (this->_internal_dt_double_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_dt_double(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ddbprotobuf.doubleVector)
  return target;
}

size_t doubleVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ddbprotobuf.doubleVector)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double dt_double = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_dt_double_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void doubleVector::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ddbprotobuf.doubleVector)
  GOOGLE_DCHECK_NE(&from, this);
  const doubleVector* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<doubleVector>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ddbprotobuf.doubleVector)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ddbprotobuf.doubleVector)
    MergeFrom(*source);
  }
}

void doubleVector::MergeFrom(const doubleVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ddbprotobuf.doubleVector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dt_double_.MergeFrom(from.dt_double_);
}

void doubleVector::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ddbprotobuf.doubleVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void doubleVector::CopyFrom(const doubleVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ddbprotobuf.doubleVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool doubleVector::IsInitialized() const {
  return true;
}

void doubleVector::InternalSwap(doubleVector* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  dt_double_.InternalSwap(&other->dt_double_);
}

::PROTOBUF_NAMESPACE_ID::Metadata doubleVector::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dolphindbFast_2eproto_getter, &descriptor_table_dolphindbFast_2eproto_once,
      file_level_metadata_dolphindbFast_2eproto[4]);
}

// ===================================================================

class stringVector::_Internal {
 public:
};

stringVector::stringVector(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  dt_string_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ddbprotobuf.stringVector)
}
stringVector::stringVector(const stringVector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dt_string_(from.dt_string_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ddbprotobuf.stringVector)
}

void stringVector::SharedCtor() {
}

stringVector::~stringVector() {
  // @@protoc_insertion_point(destructor:ddbprotobuf.stringVector)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void stringVector::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void stringVector::ArenaDtor(void* object) {
  stringVector* _this = reinterpret_cast< stringVector* >(object);
  (void)_this;
}
void stringVector::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void stringVector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void stringVector::Clear() {
// @@protoc_insertion_point(message_clear_start:ddbprotobuf.stringVector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dt_string_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* stringVector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string dt_string = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_dt_string();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ddbprotobuf.stringVector.dt_string"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* stringVector::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddbprotobuf.stringVector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string dt_string = 1;
  for (int i = 0, n = this->_internal_dt_string_size(); i < n; i++) {
    const auto& s = this->_internal_dt_string(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ddbprotobuf.stringVector.dt_string");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ddbprotobuf.stringVector)
  return target;
}

size_t stringVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ddbprotobuf.stringVector)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string dt_string = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(dt_string_.size());
  for (int i = 0, n = dt_string_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      dt_string_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void stringVector::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ddbprotobuf.stringVector)
  GOOGLE_DCHECK_NE(&from, this);
  const stringVector* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<stringVector>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ddbprotobuf.stringVector)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ddbprotobuf.stringVector)
    MergeFrom(*source);
  }
}

void stringVector::MergeFrom(const stringVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ddbprotobuf.stringVector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dt_string_.MergeFrom(from.dt_string_);
}

void stringVector::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ddbprotobuf.stringVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stringVector::CopyFrom(const stringVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ddbprotobuf.stringVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stringVector::IsInitialized() const {
  return true;
}

void stringVector::InternalSwap(stringVector* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  dt_string_.InternalSwap(&other->dt_string_);
}

::PROTOBUF_NAMESPACE_ID::Metadata stringVector::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dolphindbFast_2eproto_getter, &descriptor_table_dolphindbFast_2eproto_once,
      file_level_metadata_dolphindbFast_2eproto[5]);
}

// ===================================================================

class boolVector::_Internal {
 public:
};

boolVector::boolVector(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  dt_bool_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ddbprotobuf.boolVector)
}
boolVector::boolVector(const boolVector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dt_bool_(from.dt_bool_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ddbprotobuf.boolVector)
}

void boolVector::SharedCtor() {
}

boolVector::~boolVector() {
  // @@protoc_insertion_point(destructor:ddbprotobuf.boolVector)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void boolVector::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void boolVector::ArenaDtor(void* object) {
  boolVector* _this = reinterpret_cast< boolVector* >(object);
  (void)_this;
}
void boolVector::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void boolVector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void boolVector::Clear() {
// @@protoc_insertion_point(message_clear_start:ddbprotobuf.boolVector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dt_bool_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* boolVector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bool dt_bool = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_dt_bool(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_dt_bool(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* boolVector::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddbprotobuf.boolVector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bool dt_bool = 1;
  if (this->_internal_dt_bool_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_dt_bool(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ddbprotobuf.boolVector)
  return target;
}

size_t boolVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ddbprotobuf.boolVector)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool dt_bool = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_dt_bool_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void boolVector::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ddbprotobuf.boolVector)
  GOOGLE_DCHECK_NE(&from, this);
  const boolVector* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<boolVector>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ddbprotobuf.boolVector)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ddbprotobuf.boolVector)
    MergeFrom(*source);
  }
}

void boolVector::MergeFrom(const boolVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ddbprotobuf.boolVector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dt_bool_.MergeFrom(from.dt_bool_);
}

void boolVector::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ddbprotobuf.boolVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void boolVector::CopyFrom(const boolVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ddbprotobuf.boolVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool boolVector::IsInitialized() const {
  return true;
}

void boolVector::InternalSwap(boolVector* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  dt_bool_.InternalSwap(&other->dt_bool_);
}

::PROTOBUF_NAMESPACE_ID::Metadata boolVector::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dolphindbFast_2eproto_getter, &descriptor_table_dolphindbFast_2eproto_once,
      file_level_metadata_dolphindbFast_2eproto[6]);
}

// ===================================================================

class Vector::_Internal {
 public:
  static const ::ddbprotobuf::intVector& int_vec(const Vector* msg);
  static const ::ddbprotobuf::longVector& long_vec(const Vector* msg);
  static const ::ddbprotobuf::floatVector& float_vec(const Vector* msg);
  static const ::ddbprotobuf::doubleVector& double_vec(const Vector* msg);
  static const ::ddbprotobuf::stringVector& string_vec(const Vector* msg);
  static const ::ddbprotobuf::boolVector& bool_vec(const Vector* msg);
};

const ::ddbprotobuf::intVector&
Vector::_Internal::int_vec(const Vector* msg) {
  return *msg->type_.int_vec_;
}
const ::ddbprotobuf::longVector&
Vector::_Internal::long_vec(const Vector* msg) {
  return *msg->type_.long_vec_;
}
const ::ddbprotobuf::floatVector&
Vector::_Internal::float_vec(const Vector* msg) {
  return *msg->type_.float_vec_;
}
const ::ddbprotobuf::doubleVector&
Vector::_Internal::double_vec(const Vector* msg) {
  return *msg->type_.double_vec_;
}
const ::ddbprotobuf::stringVector&
Vector::_Internal::string_vec(const Vector* msg) {
  return *msg->type_.string_vec_;
}
const ::ddbprotobuf::boolVector&
Vector::_Internal::bool_vec(const Vector* msg) {
  return *msg->type_.bool_vec_;
}
void Vector::set_allocated_int_vec(::ddbprotobuf::intVector* int_vec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (int_vec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ddbprotobuf::intVector>::GetOwningArena(int_vec);
    if (message_arena != submessage_arena) {
      int_vec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, int_vec, submessage_arena);
    }
    set_has_int_vec();
    type_.int_vec_ = int_vec;
  }
  // @@protoc_insertion_point(field_set_allocated:ddbprotobuf.Vector.int_vec)
}
void Vector::set_allocated_long_vec(::ddbprotobuf::longVector* long_vec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (long_vec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ddbprotobuf::longVector>::GetOwningArena(long_vec);
    if (message_arena != submessage_arena) {
      long_vec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, long_vec, submessage_arena);
    }
    set_has_long_vec();
    type_.long_vec_ = long_vec;
  }
  // @@protoc_insertion_point(field_set_allocated:ddbprotobuf.Vector.long_vec)
}
void Vector::set_allocated_float_vec(::ddbprotobuf::floatVector* float_vec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (float_vec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ddbprotobuf::floatVector>::GetOwningArena(float_vec);
    if (message_arena != submessage_arena) {
      float_vec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, float_vec, submessage_arena);
    }
    set_has_float_vec();
    type_.float_vec_ = float_vec;
  }
  // @@protoc_insertion_point(field_set_allocated:ddbprotobuf.Vector.float_vec)
}
void Vector::set_allocated_double_vec(::ddbprotobuf::doubleVector* double_vec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (double_vec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ddbprotobuf::doubleVector>::GetOwningArena(double_vec);
    if (message_arena != submessage_arena) {
      double_vec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, double_vec, submessage_arena);
    }
    set_has_double_vec();
    type_.double_vec_ = double_vec;
  }
  // @@protoc_insertion_point(field_set_allocated:ddbprotobuf.Vector.double_vec)
}
void Vector::set_allocated_string_vec(::ddbprotobuf::stringVector* string_vec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (string_vec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ddbprotobuf::stringVector>::GetOwningArena(string_vec);
    if (message_arena != submessage_arena) {
      string_vec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, string_vec, submessage_arena);
    }
    set_has_string_vec();
    type_.string_vec_ = string_vec;
  }
  // @@protoc_insertion_point(field_set_allocated:ddbprotobuf.Vector.string_vec)
}
void Vector::set_allocated_bool_vec(::ddbprotobuf::boolVector* bool_vec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (bool_vec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ddbprotobuf::boolVector>::GetOwningArena(bool_vec);
    if (message_arena != submessage_arena) {
      bool_vec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bool_vec, submessage_arena);
    }
    set_has_bool_vec();
    type_.bool_vec_ = bool_vec;
  }
  // @@protoc_insertion_point(field_set_allocated:ddbprotobuf.Vector.bool_vec)
}
Vector::Vector(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ddbprotobuf.Vector)
}
Vector::Vector(const Vector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_null_ = from.is_null_;
  clear_has_type();
  switch (from.type_case()) {
    case kIntVec: {
      _internal_mutable_int_vec()->::ddbprotobuf::intVector::MergeFrom(from._internal_int_vec());
      break;
    }
    case kLongVec: {
      _internal_mutable_long_vec()->::ddbprotobuf::longVector::MergeFrom(from._internal_long_vec());
      break;
    }
    case kFloatVec: {
      _internal_mutable_float_vec()->::ddbprotobuf::floatVector::MergeFrom(from._internal_float_vec());
      break;
    }
    case kDoubleVec: {
      _internal_mutable_double_vec()->::ddbprotobuf::doubleVector::MergeFrom(from._internal_double_vec());
      break;
    }
    case kStringVec: {
      _internal_mutable_string_vec()->::ddbprotobuf::stringVector::MergeFrom(from._internal_string_vec());
      break;
    }
    case kBoolVec: {
      _internal_mutable_bool_vec()->::ddbprotobuf::boolVector::MergeFrom(from._internal_bool_vec());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ddbprotobuf.Vector)
}

void Vector::SharedCtor() {
is_null_ = false;
clear_has_type();
}

Vector::~Vector() {
  // @@protoc_insertion_point(destructor:ddbprotobuf.Vector)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vector::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_type()) {
    clear_type();
  }
}

void Vector::ArenaDtor(void* object) {
  Vector* _this = reinterpret_cast< Vector* >(object);
  (void)_this;
}
void Vector::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vector::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:ddbprotobuf.Vector)
  switch (type_case()) {
    case kIntVec: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.int_vec_;
      }
      break;
    }
    case kLongVec: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.long_vec_;
      }
      break;
    }
    case kFloatVec: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.float_vec_;
      }
      break;
    }
    case kDoubleVec: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.double_vec_;
      }
      break;
    }
    case kStringVec: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.string_vec_;
      }
      break;
    }
    case kBoolVec: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.bool_vec_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void Vector::Clear() {
// @@protoc_insertion_point(message_clear_start:ddbprotobuf.Vector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_null_ = false;
  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_null = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ddbprotobuf.intVector int_vec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_int_vec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ddbprotobuf.longVector long_vec = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_long_vec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ddbprotobuf.floatVector float_vec = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_float_vec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ddbprotobuf.doubleVector double_vec = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_double_vec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ddbprotobuf.stringVector string_vec = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_string_vec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ddbprotobuf.boolVector bool_vec = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_bool_vec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vector::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddbprotobuf.Vector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_null = 1;
  if (this->is_null() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_null(), target);
  }

  // .ddbprotobuf.intVector int_vec = 2;
  if (_internal_has_int_vec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::int_vec(this), target, stream);
  }

  // .ddbprotobuf.longVector long_vec = 3;
  if (_internal_has_long_vec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::long_vec(this), target, stream);
  }

  // .ddbprotobuf.floatVector float_vec = 4;
  if (_internal_has_float_vec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::float_vec(this), target, stream);
  }

  // .ddbprotobuf.doubleVector double_vec = 5;
  if (_internal_has_double_vec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::double_vec(this), target, stream);
  }

  // .ddbprotobuf.stringVector string_vec = 6;
  if (_internal_has_string_vec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::string_vec(this), target, stream);
  }

  // .ddbprotobuf.boolVector bool_vec = 7;
  if (_internal_has_bool_vec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::bool_vec(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ddbprotobuf.Vector)
  return target;
}

size_t Vector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ddbprotobuf.Vector)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_null = 1;
  if (this->is_null() != 0) {
    total_size += 1 + 1;
  }

  switch (type_case()) {
    // .ddbprotobuf.intVector int_vec = 2;
    case kIntVec: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.int_vec_);
      break;
    }
    // .ddbprotobuf.longVector long_vec = 3;
    case kLongVec: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.long_vec_);
      break;
    }
    // .ddbprotobuf.floatVector float_vec = 4;
    case kFloatVec: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.float_vec_);
      break;
    }
    // .ddbprotobuf.doubleVector double_vec = 5;
    case kDoubleVec: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.double_vec_);
      break;
    }
    // .ddbprotobuf.stringVector string_vec = 6;
    case kStringVec: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.string_vec_);
      break;
    }
    // .ddbprotobuf.boolVector bool_vec = 7;
    case kBoolVec: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.bool_vec_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vector::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ddbprotobuf.Vector)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vector>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ddbprotobuf.Vector)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ddbprotobuf.Vector)
    MergeFrom(*source);
  }
}

void Vector::MergeFrom(const Vector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ddbprotobuf.Vector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_null() != 0) {
    _internal_set_is_null(from._internal_is_null());
  }
  switch (from.type_case()) {
    case kIntVec: {
      _internal_mutable_int_vec()->::ddbprotobuf::intVector::MergeFrom(from._internal_int_vec());
      break;
    }
    case kLongVec: {
      _internal_mutable_long_vec()->::ddbprotobuf::longVector::MergeFrom(from._internal_long_vec());
      break;
    }
    case kFloatVec: {
      _internal_mutable_float_vec()->::ddbprotobuf::floatVector::MergeFrom(from._internal_float_vec());
      break;
    }
    case kDoubleVec: {
      _internal_mutable_double_vec()->::ddbprotobuf::doubleVector::MergeFrom(from._internal_double_vec());
      break;
    }
    case kStringVec: {
      _internal_mutable_string_vec()->::ddbprotobuf::stringVector::MergeFrom(from._internal_string_vec());
      break;
    }
    case kBoolVec: {
      _internal_mutable_bool_vec()->::ddbprotobuf::boolVector::MergeFrom(from._internal_bool_vec());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void Vector::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ddbprotobuf.Vector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector::CopyFrom(const Vector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ddbprotobuf.Vector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector::IsInitialized() const {
  return true;
}

void Vector::InternalSwap(Vector* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(is_null_, other->is_null_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dolphindbFast_2eproto_getter, &descriptor_table_dolphindbFast_2eproto_once,
      file_level_metadata_dolphindbFast_2eproto[7]);
}

// ===================================================================

class Table::_Internal {
 public:
};

Table::Table(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  columns_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ddbprotobuf.Table)
}
Table::Table(const Table& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      columns_(from.columns_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ddbprotobuf.Table)
}

void Table::SharedCtor() {
}

Table::~Table() {
  // @@protoc_insertion_point(destructor:ddbprotobuf.Table)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Table::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Table::ArenaDtor(void* object) {
  Table* _this = reinterpret_cast< Table* >(object);
  (void)_this;
}
void Table::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Table::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Table::Clear() {
// @@protoc_insertion_point(message_clear_start:ddbprotobuf.Table)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columns_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Table::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ddbprotobuf.Vector columns = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_columns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Table::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddbprotobuf.Table)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ddbprotobuf.Vector columns = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_columns_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_columns(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ddbprotobuf.Table)
  return target;
}

size_t Table::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ddbprotobuf.Table)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ddbprotobuf.Vector columns = 1;
  total_size += 1UL * this->_internal_columns_size();
  for (const auto& msg : this->columns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Table::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ddbprotobuf.Table)
  GOOGLE_DCHECK_NE(&from, this);
  const Table* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Table>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ddbprotobuf.Table)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ddbprotobuf.Table)
    MergeFrom(*source);
  }
}

void Table::MergeFrom(const Table& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ddbprotobuf.Table)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columns_.MergeFrom(from.columns_);
}

void Table::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ddbprotobuf.Table)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Table::CopyFrom(const Table& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ddbprotobuf.Table)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Table::IsInitialized() const {
  return true;
}

void Table::InternalSwap(Table* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  columns_.InternalSwap(&other->columns_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Table::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dolphindbFast_2eproto_getter, &descriptor_table_dolphindbFast_2eproto_once,
      file_level_metadata_dolphindbFast_2eproto[8]);
}

// ===================================================================

class Dictionary::_Internal {
 public:
  static const ::ddbprotobuf::Vector& keys(const Dictionary* msg);
  static const ::ddbprotobuf::Vector& values(const Dictionary* msg);
};

const ::ddbprotobuf::Vector&
Dictionary::_Internal::keys(const Dictionary* msg) {
  return *msg->keys_;
}
const ::ddbprotobuf::Vector&
Dictionary::_Internal::values(const Dictionary* msg) {
  return *msg->values_;
}
Dictionary::Dictionary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ddbprotobuf.Dictionary)
}
Dictionary::Dictionary(const Dictionary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_keys()) {
    keys_ = new ::ddbprotobuf::Vector(*from.keys_);
  } else {
    keys_ = nullptr;
  }
  if (from._internal_has_values()) {
    values_ = new ::ddbprotobuf::Vector(*from.values_);
  } else {
    values_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ddbprotobuf.Dictionary)
}

void Dictionary::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&keys_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&values_) -
    reinterpret_cast<char*>(&keys_)) + sizeof(values_));
}

Dictionary::~Dictionary() {
  // @@protoc_insertion_point(destructor:ddbprotobuf.Dictionary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Dictionary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete keys_;
  if (this != internal_default_instance()) delete values_;
}

void Dictionary::ArenaDtor(void* object) {
  Dictionary* _this = reinterpret_cast< Dictionary* >(object);
  (void)_this;
}
void Dictionary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Dictionary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Dictionary::Clear() {
// @@protoc_insertion_point(message_clear_start:ddbprotobuf.Dictionary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && keys_ != nullptr) {
    delete keys_;
  }
  keys_ = nullptr;
  if (GetArenaForAllocation() == nullptr && values_ != nullptr) {
    delete values_;
  }
  values_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Dictionary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ddbprotobuf.Vector keys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_keys(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ddbprotobuf.Vector values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_values(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dictionary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddbprotobuf.Dictionary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ddbprotobuf.Vector keys = 1;
  if (this->has_keys()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::keys(this), target, stream);
  }

  // .ddbprotobuf.Vector values = 2;
  if (this->has_values()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::values(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ddbprotobuf.Dictionary)
  return target;
}

size_t Dictionary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ddbprotobuf.Dictionary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ddbprotobuf.Vector keys = 1;
  if (this->has_keys()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *keys_);
  }

  // .ddbprotobuf.Vector values = 2;
  if (this->has_values()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *values_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dictionary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ddbprotobuf.Dictionary)
  GOOGLE_DCHECK_NE(&from, this);
  const Dictionary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Dictionary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ddbprotobuf.Dictionary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ddbprotobuf.Dictionary)
    MergeFrom(*source);
  }
}

void Dictionary::MergeFrom(const Dictionary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ddbprotobuf.Dictionary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_keys()) {
    _internal_mutable_keys()->::ddbprotobuf::Vector::MergeFrom(from._internal_keys());
  }
  if (from.has_values()) {
    _internal_mutable_values()->::ddbprotobuf::Vector::MergeFrom(from._internal_values());
  }
}

void Dictionary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ddbprotobuf.Dictionary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dictionary::CopyFrom(const Dictionary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ddbprotobuf.Dictionary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dictionary::IsInitialized() const {
  return true;
}

void Dictionary::InternalSwap(Dictionary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Dictionary, values_)
      + sizeof(Dictionary::values_)
      - PROTOBUF_FIELD_OFFSET(Dictionary, keys_)>(
          reinterpret_cast<char*>(&keys_),
          reinterpret_cast<char*>(&other->keys_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Dictionary::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dolphindbFast_2eproto_getter, &descriptor_table_dolphindbFast_2eproto_once,
      file_level_metadata_dolphindbFast_2eproto[9]);
}

// ===================================================================

class DolphinMessage::_Internal {
 public:
  static const ::ddbprotobuf::Scalar& df_scalar(const DolphinMessage* msg);
  static const ::ddbprotobuf::Vector& df_vector(const DolphinMessage* msg);
  static const ::ddbprotobuf::Table& df_table(const DolphinMessage* msg);
  static const ::ddbprotobuf::Dictionary& df_dictionary(const DolphinMessage* msg);
};

const ::ddbprotobuf::Scalar&
DolphinMessage::_Internal::df_scalar(const DolphinMessage* msg) {
  return *msg->form_.df_scalar_;
}
const ::ddbprotobuf::Vector&
DolphinMessage::_Internal::df_vector(const DolphinMessage* msg) {
  return *msg->form_.df_vector_;
}
const ::ddbprotobuf::Table&
DolphinMessage::_Internal::df_table(const DolphinMessage* msg) {
  return *msg->form_.df_table_;
}
const ::ddbprotobuf::Dictionary&
DolphinMessage::_Internal::df_dictionary(const DolphinMessage* msg) {
  return *msg->form_.df_dictionary_;
}
void DolphinMessage::set_allocated_df_scalar(::ddbprotobuf::Scalar* df_scalar) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_form();
  if (df_scalar) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ddbprotobuf::Scalar>::GetOwningArena(df_scalar);
    if (message_arena != submessage_arena) {
      df_scalar = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, df_scalar, submessage_arena);
    }
    set_has_df_scalar();
    form_.df_scalar_ = df_scalar;
  }
  // @@protoc_insertion_point(field_set_allocated:ddbprotobuf.DolphinMessage.df_scalar)
}
void DolphinMessage::set_allocated_df_vector(::ddbprotobuf::Vector* df_vector) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_form();
  if (df_vector) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ddbprotobuf::Vector>::GetOwningArena(df_vector);
    if (message_arena != submessage_arena) {
      df_vector = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, df_vector, submessage_arena);
    }
    set_has_df_vector();
    form_.df_vector_ = df_vector;
  }
  // @@protoc_insertion_point(field_set_allocated:ddbprotobuf.DolphinMessage.df_vector)
}
void DolphinMessage::set_allocated_df_table(::ddbprotobuf::Table* df_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_form();
  if (df_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ddbprotobuf::Table>::GetOwningArena(df_table);
    if (message_arena != submessage_arena) {
      df_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, df_table, submessage_arena);
    }
    set_has_df_table();
    form_.df_table_ = df_table;
  }
  // @@protoc_insertion_point(field_set_allocated:ddbprotobuf.DolphinMessage.df_table)
}
void DolphinMessage::set_allocated_df_dictionary(::ddbprotobuf::Dictionary* df_dictionary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_form();
  if (df_dictionary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ddbprotobuf::Dictionary>::GetOwningArena(df_dictionary);
    if (message_arena != submessage_arena) {
      df_dictionary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, df_dictionary, submessage_arena);
    }
    set_has_df_dictionary();
    form_.df_dictionary_ = df_dictionary;
  }
  // @@protoc_insertion_point(field_set_allocated:ddbprotobuf.DolphinMessage.df_dictionary)
}
DolphinMessage::DolphinMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ddbprotobuf.DolphinMessage)
}
DolphinMessage::DolphinMessage(const DolphinMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_form();
  switch (from.form_case()) {
    case kDfScalar: {
      _internal_mutable_df_scalar()->::ddbprotobuf::Scalar::MergeFrom(from._internal_df_scalar());
      break;
    }
    case kDfVector: {
      _internal_mutable_df_vector()->::ddbprotobuf::Vector::MergeFrom(from._internal_df_vector());
      break;
    }
    case kDfTable: {
      _internal_mutable_df_table()->::ddbprotobuf::Table::MergeFrom(from._internal_df_table());
      break;
    }
    case kDfDictionary: {
      _internal_mutable_df_dictionary()->::ddbprotobuf::Dictionary::MergeFrom(from._internal_df_dictionary());
      break;
    }
    case FORM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ddbprotobuf.DolphinMessage)
}

void DolphinMessage::SharedCtor() {
clear_has_form();
}

DolphinMessage::~DolphinMessage() {
  // @@protoc_insertion_point(destructor:ddbprotobuf.DolphinMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DolphinMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_form()) {
    clear_form();
  }
}

void DolphinMessage::ArenaDtor(void* object) {
  DolphinMessage* _this = reinterpret_cast< DolphinMessage* >(object);
  (void)_this;
}
void DolphinMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DolphinMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DolphinMessage::clear_form() {
// @@protoc_insertion_point(one_of_clear_start:ddbprotobuf.DolphinMessage)
  switch (form_case()) {
    case kDfScalar: {
      if (GetArenaForAllocation() == nullptr) {
        delete form_.df_scalar_;
      }
      break;
    }
    case kDfVector: {
      if (GetArenaForAllocation() == nullptr) {
        delete form_.df_vector_;
      }
      break;
    }
    case kDfTable: {
      if (GetArenaForAllocation() == nullptr) {
        delete form_.df_table_;
      }
      break;
    }
    case kDfDictionary: {
      if (GetArenaForAllocation() == nullptr) {
        delete form_.df_dictionary_;
      }
      break;
    }
    case FORM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FORM_NOT_SET;
}


void DolphinMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ddbprotobuf.DolphinMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_form();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DolphinMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ddbprotobuf.Scalar df_scalar = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_df_scalar(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ddbprotobuf.Vector df_vector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_df_vector(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ddbprotobuf.Table df_table = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_df_table(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ddbprotobuf.Dictionary df_dictionary = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_df_dictionary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DolphinMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddbprotobuf.DolphinMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ddbprotobuf.Scalar df_scalar = 1;
  if (_internal_has_df_scalar()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::df_scalar(this), target, stream);
  }

  // .ddbprotobuf.Vector df_vector = 2;
  if (_internal_has_df_vector()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::df_vector(this), target, stream);
  }

  // .ddbprotobuf.Table df_table = 3;
  if (_internal_has_df_table()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::df_table(this), target, stream);
  }

  // .ddbprotobuf.Dictionary df_dictionary = 4;
  if (_internal_has_df_dictionary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::df_dictionary(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ddbprotobuf.DolphinMessage)
  return target;
}

size_t DolphinMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ddbprotobuf.DolphinMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (form_case()) {
    // .ddbprotobuf.Scalar df_scalar = 1;
    case kDfScalar: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *form_.df_scalar_);
      break;
    }
    // .ddbprotobuf.Vector df_vector = 2;
    case kDfVector: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *form_.df_vector_);
      break;
    }
    // .ddbprotobuf.Table df_table = 3;
    case kDfTable: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *form_.df_table_);
      break;
    }
    // .ddbprotobuf.Dictionary df_dictionary = 4;
    case kDfDictionary: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *form_.df_dictionary_);
      break;
    }
    case FORM_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DolphinMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ddbprotobuf.DolphinMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const DolphinMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DolphinMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ddbprotobuf.DolphinMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ddbprotobuf.DolphinMessage)
    MergeFrom(*source);
  }
}

void DolphinMessage::MergeFrom(const DolphinMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ddbprotobuf.DolphinMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.form_case()) {
    case kDfScalar: {
      _internal_mutable_df_scalar()->::ddbprotobuf::Scalar::MergeFrom(from._internal_df_scalar());
      break;
    }
    case kDfVector: {
      _internal_mutable_df_vector()->::ddbprotobuf::Vector::MergeFrom(from._internal_df_vector());
      break;
    }
    case kDfTable: {
      _internal_mutable_df_table()->::ddbprotobuf::Table::MergeFrom(from._internal_df_table());
      break;
    }
    case kDfDictionary: {
      _internal_mutable_df_dictionary()->::ddbprotobuf::Dictionary::MergeFrom(from._internal_df_dictionary());
      break;
    }
    case FORM_NOT_SET: {
      break;
    }
  }
}

void DolphinMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ddbprotobuf.DolphinMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DolphinMessage::CopyFrom(const DolphinMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ddbprotobuf.DolphinMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DolphinMessage::IsInitialized() const {
  return true;
}

void DolphinMessage::InternalSwap(DolphinMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(form_, other->form_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DolphinMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dolphindbFast_2eproto_getter, &descriptor_table_dolphindbFast_2eproto_once,
      file_level_metadata_dolphindbFast_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ddbprotobuf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ddbprotobuf::Scalar* Arena::CreateMaybeMessage< ::ddbprotobuf::Scalar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ddbprotobuf::Scalar >(arena);
}
template<> PROTOBUF_NOINLINE ::ddbprotobuf::intVector* Arena::CreateMaybeMessage< ::ddbprotobuf::intVector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ddbprotobuf::intVector >(arena);
}
template<> PROTOBUF_NOINLINE ::ddbprotobuf::longVector* Arena::CreateMaybeMessage< ::ddbprotobuf::longVector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ddbprotobuf::longVector >(arena);
}
template<> PROTOBUF_NOINLINE ::ddbprotobuf::floatVector* Arena::CreateMaybeMessage< ::ddbprotobuf::floatVector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ddbprotobuf::floatVector >(arena);
}
template<> PROTOBUF_NOINLINE ::ddbprotobuf::doubleVector* Arena::CreateMaybeMessage< ::ddbprotobuf::doubleVector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ddbprotobuf::doubleVector >(arena);
}
template<> PROTOBUF_NOINLINE ::ddbprotobuf::stringVector* Arena::CreateMaybeMessage< ::ddbprotobuf::stringVector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ddbprotobuf::stringVector >(arena);
}
template<> PROTOBUF_NOINLINE ::ddbprotobuf::boolVector* Arena::CreateMaybeMessage< ::ddbprotobuf::boolVector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ddbprotobuf::boolVector >(arena);
}
template<> PROTOBUF_NOINLINE ::ddbprotobuf::Vector* Arena::CreateMaybeMessage< ::ddbprotobuf::Vector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ddbprotobuf::Vector >(arena);
}
template<> PROTOBUF_NOINLINE ::ddbprotobuf::Table* Arena::CreateMaybeMessage< ::ddbprotobuf::Table >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ddbprotobuf::Table >(arena);
}
template<> PROTOBUF_NOINLINE ::ddbprotobuf::Dictionary* Arena::CreateMaybeMessage< ::ddbprotobuf::Dictionary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ddbprotobuf::Dictionary >(arena);
}
template<> PROTOBUF_NOINLINE ::ddbprotobuf::DolphinMessage* Arena::CreateMaybeMessage< ::ddbprotobuf::DolphinMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ddbprotobuf::DolphinMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
