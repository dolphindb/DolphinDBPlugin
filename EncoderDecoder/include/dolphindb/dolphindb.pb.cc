// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dolphindb.proto

#include "dolphindb.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace ddbprotobuf {
constexpr Scalar::Scalar(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : is_null_(false)
  , _oneof_case_{}{}
struct ScalarDefaultTypeInternal {
  constexpr ScalarDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ScalarDefaultTypeInternal() {}
  union {
    Scalar _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ScalarDefaultTypeInternal _Scalar_default_instance_;
constexpr Vector::Vector(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : elements_(){}
struct VectorDefaultTypeInternal {
  constexpr VectorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VectorDefaultTypeInternal() {}
  union {
    Vector _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VectorDefaultTypeInternal _Vector_default_instance_;
constexpr Table::Table(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : columns_(){}
struct TableDefaultTypeInternal {
  constexpr TableDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TableDefaultTypeInternal() {}
  union {
    Table _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TableDefaultTypeInternal _Table_default_instance_;
constexpr Dictionary::Dictionary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : keys_(nullptr)
  , values_(nullptr){}
struct DictionaryDefaultTypeInternal {
  constexpr DictionaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DictionaryDefaultTypeInternal() {}
  union {
    Dictionary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DictionaryDefaultTypeInternal _Dictionary_default_instance_;
constexpr DolphinMessage::DolphinMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct DolphinMessageDefaultTypeInternal {
  constexpr DolphinMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DolphinMessageDefaultTypeInternal() {}
  union {
    DolphinMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DolphinMessageDefaultTypeInternal _DolphinMessage_default_instance_;
}  // namespace ddbprotobuf
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dolphindb_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_dolphindb_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dolphindb_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dolphindb_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ddbprotobuf::Scalar, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ddbprotobuf::Scalar, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ddbprotobuf::Scalar, is_null_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ddbprotobuf::Scalar, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ddbprotobuf::Vector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ddbprotobuf::Vector, elements_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ddbprotobuf::Table, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ddbprotobuf::Table, columns_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ddbprotobuf::Dictionary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ddbprotobuf::Dictionary, keys_),
  PROTOBUF_FIELD_OFFSET(::ddbprotobuf::Dictionary, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ddbprotobuf::DolphinMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ddbprotobuf::DolphinMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ddbprotobuf::DolphinMessage, form_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ddbprotobuf::Scalar)},
  { 13, -1, sizeof(::ddbprotobuf::Vector)},
  { 19, -1, sizeof(::ddbprotobuf::Table)},
  { 25, -1, sizeof(::ddbprotobuf::Dictionary)},
  { 32, -1, sizeof(::ddbprotobuf::DolphinMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ddbprotobuf::_Scalar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ddbprotobuf::_Vector_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ddbprotobuf::_Table_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ddbprotobuf::_Dictionary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ddbprotobuf::_DolphinMessage_default_instance_),
};

const char descriptor_table_protodef_dolphindb_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017dolphindb.proto\022\013ddbprotobuf\"\227\001\n\006Scala"
  "r\022\017\n\007is_null\030\001 \001(\010\022\020\n\006dt_int\030\002 \001(\021H\000\022\021\n\007"
  "dt_long\030\003 \001(\022H\000\022\022\n\010dt_float\030\004 \001(\002H\000\022\023\n\td"
  "t_double\030\005 \001(\001H\000\022\023\n\tdt_string\030\006 \001(\tH\000\022\021\n"
  "\007dt_bool\030\007 \001(\010H\000B\006\n\004type\"/\n\006Vector\022%\n\010el"
  "ements\030\001 \003(\0132\023.ddbprotobuf.Scalar\"-\n\005Tab"
  "le\022$\n\007columns\030\001 \003(\0132\023.ddbprotobuf.Vector"
  "\"T\n\nDictionary\022!\n\004keys\030\001 \001(\0132\023.ddbprotob"
  "uf.Vector\022#\n\006values\030\002 \001(\0132\023.ddbprotobuf."
  "Vector\"\306\001\n\016DolphinMessage\022(\n\tdf_scalar\030\001"
  " \001(\0132\023.ddbprotobuf.ScalarH\000\022(\n\tdf_vector"
  "\030\002 \001(\0132\023.ddbprotobuf.VectorH\000\022&\n\010df_tabl"
  "e\030\003 \001(\0132\022.ddbprotobuf.TableH\000\0220\n\rdf_dict"
  "ionary\030\004 \001(\0132\027.ddbprotobuf.DictionaryH\000B"
  "\006\n\004formb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dolphindb_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dolphindb_2eproto = {
  false, false, 575, descriptor_table_protodef_dolphindb_2eproto, "dolphindb.proto", 
  &descriptor_table_dolphindb_2eproto_once, nullptr, 0, 5,
  schemas, file_default_instances, TableStruct_dolphindb_2eproto::offsets,
  file_level_metadata_dolphindb_2eproto, file_level_enum_descriptors_dolphindb_2eproto, file_level_service_descriptors_dolphindb_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_dolphindb_2eproto_getter() {
  return &descriptor_table_dolphindb_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_dolphindb_2eproto(&descriptor_table_dolphindb_2eproto);
namespace ddbprotobuf {

// ===================================================================

class Scalar::_Internal {
 public:
};

Scalar::Scalar(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ddbprotobuf.Scalar)
}
Scalar::Scalar(const Scalar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_null_ = from.is_null_;
  clear_has_type();
  switch (from.type_case()) {
    case kDtInt: {
      _internal_set_dt_int(from._internal_dt_int());
      break;
    }
    case kDtLong: {
      _internal_set_dt_long(from._internal_dt_long());
      break;
    }
    case kDtFloat: {
      _internal_set_dt_float(from._internal_dt_float());
      break;
    }
    case kDtDouble: {
      _internal_set_dt_double(from._internal_dt_double());
      break;
    }
    case kDtString: {
      _internal_set_dt_string(from._internal_dt_string());
      break;
    }
    case kDtBool: {
      _internal_set_dt_bool(from._internal_dt_bool());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ddbprotobuf.Scalar)
}

void Scalar::SharedCtor() {
is_null_ = false;
clear_has_type();
}

Scalar::~Scalar() {
  // @@protoc_insertion_point(destructor:ddbprotobuf.Scalar)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Scalar::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_type()) {
    clear_type();
  }
}

void Scalar::ArenaDtor(void* object) {
  Scalar* _this = reinterpret_cast< Scalar* >(object);
  (void)_this;
}
void Scalar::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Scalar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Scalar::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:ddbprotobuf.Scalar)
  switch (type_case()) {
    case kDtInt: {
      // No need to clear
      break;
    }
    case kDtLong: {
      // No need to clear
      break;
    }
    case kDtFloat: {
      // No need to clear
      break;
    }
    case kDtDouble: {
      // No need to clear
      break;
    }
    case kDtString: {
      type_.dt_string_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kDtBool: {
      // No need to clear
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void Scalar::Clear() {
// @@protoc_insertion_point(message_clear_start:ddbprotobuf.Scalar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_null_ = false;
  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Scalar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_null = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 dt_int = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_dt_int(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint64 dt_long = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_dt_long(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float dt_float = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _internal_set_dt_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // double dt_double = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _internal_set_dt_double(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string dt_string = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_dt_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ddbprotobuf.Scalar.dt_string"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool dt_bool = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _internal_set_dt_bool(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Scalar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddbprotobuf.Scalar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_null = 1;
  if (this->is_null() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_null(), target);
  }

  // sint32 dt_int = 2;
  if (_internal_has_dt_int()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_dt_int(), target);
  }

  // sint64 dt_long = 3;
  if (_internal_has_dt_long()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(3, this->_internal_dt_long(), target);
  }

  // float dt_float = 4;
  if (_internal_has_dt_float()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_dt_float(), target);
  }

  // double dt_double = 5;
  if (_internal_has_dt_double()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_dt_double(), target);
  }

  // string dt_string = 6;
  if (_internal_has_dt_string()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dt_string().data(), static_cast<int>(this->_internal_dt_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ddbprotobuf.Scalar.dt_string");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_dt_string(), target);
  }

  // bool dt_bool = 7;
  if (_internal_has_dt_bool()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_dt_bool(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ddbprotobuf.Scalar)
  return target;
}

size_t Scalar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ddbprotobuf.Scalar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_null = 1;
  if (this->is_null() != 0) {
    total_size += 1 + 1;
  }

  switch (type_case()) {
    // sint32 dt_int = 2;
    case kDtInt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_dt_int());
      break;
    }
    // sint64 dt_long = 3;
    case kDtLong: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
          this->_internal_dt_long());
      break;
    }
    // float dt_float = 4;
    case kDtFloat: {
      total_size += 1 + 4;
      break;
    }
    // double dt_double = 5;
    case kDtDouble: {
      total_size += 1 + 8;
      break;
    }
    // string dt_string = 6;
    case kDtString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dt_string());
      break;
    }
    // bool dt_bool = 7;
    case kDtBool: {
      total_size += 1 + 1;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scalar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ddbprotobuf.Scalar)
  GOOGLE_DCHECK_NE(&from, this);
  const Scalar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Scalar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ddbprotobuf.Scalar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ddbprotobuf.Scalar)
    MergeFrom(*source);
  }
}

void Scalar::MergeFrom(const Scalar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ddbprotobuf.Scalar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_null() != 0) {
    _internal_set_is_null(from._internal_is_null());
  }
  switch (from.type_case()) {
    case kDtInt: {
      _internal_set_dt_int(from._internal_dt_int());
      break;
    }
    case kDtLong: {
      _internal_set_dt_long(from._internal_dt_long());
      break;
    }
    case kDtFloat: {
      _internal_set_dt_float(from._internal_dt_float());
      break;
    }
    case kDtDouble: {
      _internal_set_dt_double(from._internal_dt_double());
      break;
    }
    case kDtString: {
      _internal_set_dt_string(from._internal_dt_string());
      break;
    }
    case kDtBool: {
      _internal_set_dt_bool(from._internal_dt_bool());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void Scalar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ddbprotobuf.Scalar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scalar::CopyFrom(const Scalar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ddbprotobuf.Scalar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scalar::IsInitialized() const {
  return true;
}

void Scalar::InternalSwap(Scalar* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(is_null_, other->is_null_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Scalar::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dolphindb_2eproto_getter, &descriptor_table_dolphindb_2eproto_once,
      file_level_metadata_dolphindb_2eproto[0]);
}

// ===================================================================

class Vector::_Internal {
 public:
};

Vector::Vector(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  elements_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ddbprotobuf.Vector)
}
Vector::Vector(const Vector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      elements_(from.elements_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ddbprotobuf.Vector)
}

void Vector::SharedCtor() {
}

Vector::~Vector() {
  // @@protoc_insertion_point(destructor:ddbprotobuf.Vector)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vector::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector::ArenaDtor(void* object) {
  Vector* _this = reinterpret_cast< Vector* >(object);
  (void)_this;
}
void Vector::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vector::Clear() {
// @@protoc_insertion_point(message_clear_start:ddbprotobuf.Vector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  elements_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ddbprotobuf.Scalar elements = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_elements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vector::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddbprotobuf.Vector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ddbprotobuf.Scalar elements = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_elements_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_elements(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ddbprotobuf.Vector)
  return target;
}

size_t Vector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ddbprotobuf.Vector)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ddbprotobuf.Scalar elements = 1;
  total_size += 1UL * this->_internal_elements_size();
  for (const auto& msg : this->elements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vector::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ddbprotobuf.Vector)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vector>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ddbprotobuf.Vector)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ddbprotobuf.Vector)
    MergeFrom(*source);
  }
}

void Vector::MergeFrom(const Vector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ddbprotobuf.Vector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  elements_.MergeFrom(from.elements_);
}

void Vector::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ddbprotobuf.Vector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector::CopyFrom(const Vector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ddbprotobuf.Vector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector::IsInitialized() const {
  return true;
}

void Vector::InternalSwap(Vector* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  elements_.InternalSwap(&other->elements_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dolphindb_2eproto_getter, &descriptor_table_dolphindb_2eproto_once,
      file_level_metadata_dolphindb_2eproto[1]);
}

// ===================================================================

class Table::_Internal {
 public:
};

Table::Table(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  columns_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ddbprotobuf.Table)
}
Table::Table(const Table& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      columns_(from.columns_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ddbprotobuf.Table)
}

void Table::SharedCtor() {
}

Table::~Table() {
  // @@protoc_insertion_point(destructor:ddbprotobuf.Table)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Table::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Table::ArenaDtor(void* object) {
  Table* _this = reinterpret_cast< Table* >(object);
  (void)_this;
}
void Table::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Table::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Table::Clear() {
// @@protoc_insertion_point(message_clear_start:ddbprotobuf.Table)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columns_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Table::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ddbprotobuf.Vector columns = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_columns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Table::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddbprotobuf.Table)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ddbprotobuf.Vector columns = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_columns_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_columns(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ddbprotobuf.Table)
  return target;
}

size_t Table::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ddbprotobuf.Table)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ddbprotobuf.Vector columns = 1;
  total_size += 1UL * this->_internal_columns_size();
  for (const auto& msg : this->columns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Table::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ddbprotobuf.Table)
  GOOGLE_DCHECK_NE(&from, this);
  const Table* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Table>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ddbprotobuf.Table)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ddbprotobuf.Table)
    MergeFrom(*source);
  }
}

void Table::MergeFrom(const Table& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ddbprotobuf.Table)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columns_.MergeFrom(from.columns_);
}

void Table::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ddbprotobuf.Table)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Table::CopyFrom(const Table& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ddbprotobuf.Table)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Table::IsInitialized() const {
  return true;
}

void Table::InternalSwap(Table* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  columns_.InternalSwap(&other->columns_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Table::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dolphindb_2eproto_getter, &descriptor_table_dolphindb_2eproto_once,
      file_level_metadata_dolphindb_2eproto[2]);
}

// ===================================================================

class Dictionary::_Internal {
 public:
  static const ::ddbprotobuf::Vector& keys(const Dictionary* msg);
  static const ::ddbprotobuf::Vector& values(const Dictionary* msg);
};

const ::ddbprotobuf::Vector&
Dictionary::_Internal::keys(const Dictionary* msg) {
  return *msg->keys_;
}
const ::ddbprotobuf::Vector&
Dictionary::_Internal::values(const Dictionary* msg) {
  return *msg->values_;
}
Dictionary::Dictionary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ddbprotobuf.Dictionary)
}
Dictionary::Dictionary(const Dictionary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_keys()) {
    keys_ = new ::ddbprotobuf::Vector(*from.keys_);
  } else {
    keys_ = nullptr;
  }
  if (from._internal_has_values()) {
    values_ = new ::ddbprotobuf::Vector(*from.values_);
  } else {
    values_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ddbprotobuf.Dictionary)
}

void Dictionary::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&keys_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&values_) -
    reinterpret_cast<char*>(&keys_)) + sizeof(values_));
}

Dictionary::~Dictionary() {
  // @@protoc_insertion_point(destructor:ddbprotobuf.Dictionary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Dictionary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete keys_;
  if (this != internal_default_instance()) delete values_;
}

void Dictionary::ArenaDtor(void* object) {
  Dictionary* _this = reinterpret_cast< Dictionary* >(object);
  (void)_this;
}
void Dictionary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Dictionary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Dictionary::Clear() {
// @@protoc_insertion_point(message_clear_start:ddbprotobuf.Dictionary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && keys_ != nullptr) {
    delete keys_;
  }
  keys_ = nullptr;
  if (GetArenaForAllocation() == nullptr && values_ != nullptr) {
    delete values_;
  }
  values_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Dictionary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ddbprotobuf.Vector keys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_keys(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ddbprotobuf.Vector values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_values(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dictionary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddbprotobuf.Dictionary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ddbprotobuf.Vector keys = 1;
  if (this->has_keys()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::keys(this), target, stream);
  }

  // .ddbprotobuf.Vector values = 2;
  if (this->has_values()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::values(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ddbprotobuf.Dictionary)
  return target;
}

size_t Dictionary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ddbprotobuf.Dictionary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ddbprotobuf.Vector keys = 1;
  if (this->has_keys()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *keys_);
  }

  // .ddbprotobuf.Vector values = 2;
  if (this->has_values()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *values_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dictionary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ddbprotobuf.Dictionary)
  GOOGLE_DCHECK_NE(&from, this);
  const Dictionary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Dictionary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ddbprotobuf.Dictionary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ddbprotobuf.Dictionary)
    MergeFrom(*source);
  }
}

void Dictionary::MergeFrom(const Dictionary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ddbprotobuf.Dictionary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_keys()) {
    _internal_mutable_keys()->::ddbprotobuf::Vector::MergeFrom(from._internal_keys());
  }
  if (from.has_values()) {
    _internal_mutable_values()->::ddbprotobuf::Vector::MergeFrom(from._internal_values());
  }
}

void Dictionary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ddbprotobuf.Dictionary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dictionary::CopyFrom(const Dictionary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ddbprotobuf.Dictionary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dictionary::IsInitialized() const {
  return true;
}

void Dictionary::InternalSwap(Dictionary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Dictionary, values_)
      + sizeof(Dictionary::values_)
      - PROTOBUF_FIELD_OFFSET(Dictionary, keys_)>(
          reinterpret_cast<char*>(&keys_),
          reinterpret_cast<char*>(&other->keys_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Dictionary::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dolphindb_2eproto_getter, &descriptor_table_dolphindb_2eproto_once,
      file_level_metadata_dolphindb_2eproto[3]);
}

// ===================================================================

class DolphinMessage::_Internal {
 public:
  static const ::ddbprotobuf::Scalar& df_scalar(const DolphinMessage* msg);
  static const ::ddbprotobuf::Vector& df_vector(const DolphinMessage* msg);
  static const ::ddbprotobuf::Table& df_table(const DolphinMessage* msg);
  static const ::ddbprotobuf::Dictionary& df_dictionary(const DolphinMessage* msg);
};

const ::ddbprotobuf::Scalar&
DolphinMessage::_Internal::df_scalar(const DolphinMessage* msg) {
  return *msg->form_.df_scalar_;
}
const ::ddbprotobuf::Vector&
DolphinMessage::_Internal::df_vector(const DolphinMessage* msg) {
  return *msg->form_.df_vector_;
}
const ::ddbprotobuf::Table&
DolphinMessage::_Internal::df_table(const DolphinMessage* msg) {
  return *msg->form_.df_table_;
}
const ::ddbprotobuf::Dictionary&
DolphinMessage::_Internal::df_dictionary(const DolphinMessage* msg) {
  return *msg->form_.df_dictionary_;
}
void DolphinMessage::set_allocated_df_scalar(::ddbprotobuf::Scalar* df_scalar) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_form();
  if (df_scalar) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ddbprotobuf::Scalar>::GetOwningArena(df_scalar);
    if (message_arena != submessage_arena) {
      df_scalar = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, df_scalar, submessage_arena);
    }
    set_has_df_scalar();
    form_.df_scalar_ = df_scalar;
  }
  // @@protoc_insertion_point(field_set_allocated:ddbprotobuf.DolphinMessage.df_scalar)
}
void DolphinMessage::set_allocated_df_vector(::ddbprotobuf::Vector* df_vector) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_form();
  if (df_vector) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ddbprotobuf::Vector>::GetOwningArena(df_vector);
    if (message_arena != submessage_arena) {
      df_vector = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, df_vector, submessage_arena);
    }
    set_has_df_vector();
    form_.df_vector_ = df_vector;
  }
  // @@protoc_insertion_point(field_set_allocated:ddbprotobuf.DolphinMessage.df_vector)
}
void DolphinMessage::set_allocated_df_table(::ddbprotobuf::Table* df_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_form();
  if (df_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ddbprotobuf::Table>::GetOwningArena(df_table);
    if (message_arena != submessage_arena) {
      df_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, df_table, submessage_arena);
    }
    set_has_df_table();
    form_.df_table_ = df_table;
  }
  // @@protoc_insertion_point(field_set_allocated:ddbprotobuf.DolphinMessage.df_table)
}
void DolphinMessage::set_allocated_df_dictionary(::ddbprotobuf::Dictionary* df_dictionary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_form();
  if (df_dictionary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ddbprotobuf::Dictionary>::GetOwningArena(df_dictionary);
    if (message_arena != submessage_arena) {
      df_dictionary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, df_dictionary, submessage_arena);
    }
    set_has_df_dictionary();
    form_.df_dictionary_ = df_dictionary;
  }
  // @@protoc_insertion_point(field_set_allocated:ddbprotobuf.DolphinMessage.df_dictionary)
}
DolphinMessage::DolphinMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ddbprotobuf.DolphinMessage)
}
DolphinMessage::DolphinMessage(const DolphinMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_form();
  switch (from.form_case()) {
    case kDfScalar: {
      _internal_mutable_df_scalar()->::ddbprotobuf::Scalar::MergeFrom(from._internal_df_scalar());
      break;
    }
    case kDfVector: {
      _internal_mutable_df_vector()->::ddbprotobuf::Vector::MergeFrom(from._internal_df_vector());
      break;
    }
    case kDfTable: {
      _internal_mutable_df_table()->::ddbprotobuf::Table::MergeFrom(from._internal_df_table());
      break;
    }
    case kDfDictionary: {
      _internal_mutable_df_dictionary()->::ddbprotobuf::Dictionary::MergeFrom(from._internal_df_dictionary());
      break;
    }
    case FORM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ddbprotobuf.DolphinMessage)
}

void DolphinMessage::SharedCtor() {
clear_has_form();
}

DolphinMessage::~DolphinMessage() {
  // @@protoc_insertion_point(destructor:ddbprotobuf.DolphinMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DolphinMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_form()) {
    clear_form();
  }
}

void DolphinMessage::ArenaDtor(void* object) {
  DolphinMessage* _this = reinterpret_cast< DolphinMessage* >(object);
  (void)_this;
}
void DolphinMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DolphinMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DolphinMessage::clear_form() {
// @@protoc_insertion_point(one_of_clear_start:ddbprotobuf.DolphinMessage)
  switch (form_case()) {
    case kDfScalar: {
      if (GetArenaForAllocation() == nullptr) {
        delete form_.df_scalar_;
      }
      break;
    }
    case kDfVector: {
      if (GetArenaForAllocation() == nullptr) {
        delete form_.df_vector_;
      }
      break;
    }
    case kDfTable: {
      if (GetArenaForAllocation() == nullptr) {
        delete form_.df_table_;
      }
      break;
    }
    case kDfDictionary: {
      if (GetArenaForAllocation() == nullptr) {
        delete form_.df_dictionary_;
      }
      break;
    }
    case FORM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FORM_NOT_SET;
}


void DolphinMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ddbprotobuf.DolphinMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_form();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DolphinMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ddbprotobuf.Scalar df_scalar = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_df_scalar(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ddbprotobuf.Vector df_vector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_df_vector(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ddbprotobuf.Table df_table = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_df_table(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ddbprotobuf.Dictionary df_dictionary = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_df_dictionary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DolphinMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddbprotobuf.DolphinMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ddbprotobuf.Scalar df_scalar = 1;
  if (_internal_has_df_scalar()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::df_scalar(this), target, stream);
  }

  // .ddbprotobuf.Vector df_vector = 2;
  if (_internal_has_df_vector()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::df_vector(this), target, stream);
  }

  // .ddbprotobuf.Table df_table = 3;
  if (_internal_has_df_table()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::df_table(this), target, stream);
  }

  // .ddbprotobuf.Dictionary df_dictionary = 4;
  if (_internal_has_df_dictionary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::df_dictionary(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ddbprotobuf.DolphinMessage)
  return target;
}

size_t DolphinMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ddbprotobuf.DolphinMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (form_case()) {
    // .ddbprotobuf.Scalar df_scalar = 1;
    case kDfScalar: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *form_.df_scalar_);
      break;
    }
    // .ddbprotobuf.Vector df_vector = 2;
    case kDfVector: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *form_.df_vector_);
      break;
    }
    // .ddbprotobuf.Table df_table = 3;
    case kDfTable: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *form_.df_table_);
      break;
    }
    // .ddbprotobuf.Dictionary df_dictionary = 4;
    case kDfDictionary: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *form_.df_dictionary_);
      break;
    }
    case FORM_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DolphinMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ddbprotobuf.DolphinMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const DolphinMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DolphinMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ddbprotobuf.DolphinMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ddbprotobuf.DolphinMessage)
    MergeFrom(*source);
  }
}

void DolphinMessage::MergeFrom(const DolphinMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ddbprotobuf.DolphinMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.form_case()) {
    case kDfScalar: {
      _internal_mutable_df_scalar()->::ddbprotobuf::Scalar::MergeFrom(from._internal_df_scalar());
      break;
    }
    case kDfVector: {
      _internal_mutable_df_vector()->::ddbprotobuf::Vector::MergeFrom(from._internal_df_vector());
      break;
    }
    case kDfTable: {
      _internal_mutable_df_table()->::ddbprotobuf::Table::MergeFrom(from._internal_df_table());
      break;
    }
    case kDfDictionary: {
      _internal_mutable_df_dictionary()->::ddbprotobuf::Dictionary::MergeFrom(from._internal_df_dictionary());
      break;
    }
    case FORM_NOT_SET: {
      break;
    }
  }
}

void DolphinMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ddbprotobuf.DolphinMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DolphinMessage::CopyFrom(const DolphinMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ddbprotobuf.DolphinMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DolphinMessage::IsInitialized() const {
  return true;
}

void DolphinMessage::InternalSwap(DolphinMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(form_, other->form_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DolphinMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dolphindb_2eproto_getter, &descriptor_table_dolphindb_2eproto_once,
      file_level_metadata_dolphindb_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ddbprotobuf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ddbprotobuf::Scalar* Arena::CreateMaybeMessage< ::ddbprotobuf::Scalar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ddbprotobuf::Scalar >(arena);
}
template<> PROTOBUF_NOINLINE ::ddbprotobuf::Vector* Arena::CreateMaybeMessage< ::ddbprotobuf::Vector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ddbprotobuf::Vector >(arena);
}
template<> PROTOBUF_NOINLINE ::ddbprotobuf::Table* Arena::CreateMaybeMessage< ::ddbprotobuf::Table >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ddbprotobuf::Table >(arena);
}
template<> PROTOBUF_NOINLINE ::ddbprotobuf::Dictionary* Arena::CreateMaybeMessage< ::ddbprotobuf::Dictionary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ddbprotobuf::Dictionary >(arena);
}
template<> PROTOBUF_NOINLINE ::ddbprotobuf::DolphinMessage* Arena::CreateMaybeMessage< ::ddbprotobuf::DolphinMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ddbprotobuf::DolphinMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
