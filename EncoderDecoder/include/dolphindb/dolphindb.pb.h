// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dolphindb.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dolphindb_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dolphindb_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dolphindb_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dolphindb_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dolphindb_2eproto;
namespace ddbprotobuf {
class Dictionary;
struct DictionaryDefaultTypeInternal;
extern DictionaryDefaultTypeInternal _Dictionary_default_instance_;
class DolphinMessage;
struct DolphinMessageDefaultTypeInternal;
extern DolphinMessageDefaultTypeInternal _DolphinMessage_default_instance_;
class Scalar;
struct ScalarDefaultTypeInternal;
extern ScalarDefaultTypeInternal _Scalar_default_instance_;
class Table;
struct TableDefaultTypeInternal;
extern TableDefaultTypeInternal _Table_default_instance_;
class Vector;
struct VectorDefaultTypeInternal;
extern VectorDefaultTypeInternal _Vector_default_instance_;
}  // namespace ddbprotobuf
PROTOBUF_NAMESPACE_OPEN
template<> ::ddbprotobuf::Dictionary* Arena::CreateMaybeMessage<::ddbprotobuf::Dictionary>(Arena*);
template<> ::ddbprotobuf::DolphinMessage* Arena::CreateMaybeMessage<::ddbprotobuf::DolphinMessage>(Arena*);
template<> ::ddbprotobuf::Scalar* Arena::CreateMaybeMessage<::ddbprotobuf::Scalar>(Arena*);
template<> ::ddbprotobuf::Table* Arena::CreateMaybeMessage<::ddbprotobuf::Table>(Arena*);
template<> ::ddbprotobuf::Vector* Arena::CreateMaybeMessage<::ddbprotobuf::Vector>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ddbprotobuf {

// ===================================================================

class Scalar final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ddbprotobuf.Scalar) */ {
 public:
  inline Scalar() : Scalar(nullptr) {}
  ~Scalar() override;
  explicit constexpr Scalar(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Scalar(const Scalar& from);
  Scalar(Scalar&& from) noexcept
    : Scalar() {
    *this = ::std::move(from);
  }

  inline Scalar& operator=(const Scalar& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scalar& operator=(Scalar&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Scalar& default_instance() {
    return *internal_default_instance();
  }
  enum TypeCase {
    kDtInt = 2,
    kDtLong = 3,
    kDtFloat = 4,
    kDtDouble = 5,
    kDtString = 6,
    kDtBool = 7,
    TYPE_NOT_SET = 0,
  };

  static inline const Scalar* internal_default_instance() {
    return reinterpret_cast<const Scalar*>(
               &_Scalar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Scalar& a, Scalar& b) {
    a.Swap(&b);
  }
  inline void Swap(Scalar* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scalar* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Scalar* New() const final {
    return new Scalar();
  }

  Scalar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Scalar>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Scalar& from);
  void MergeFrom(const Scalar& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scalar* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ddbprotobuf.Scalar";
  }
  protected:
  explicit Scalar(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsNullFieldNumber = 1,
    kDtIntFieldNumber = 2,
    kDtLongFieldNumber = 3,
    kDtFloatFieldNumber = 4,
    kDtDoubleFieldNumber = 5,
    kDtStringFieldNumber = 6,
    kDtBoolFieldNumber = 7,
  };
  // bool is_null = 1;
  void clear_is_null();
  bool is_null() const;
  void set_is_null(bool value);
  private:
  bool _internal_is_null() const;
  void _internal_set_is_null(bool value);
  public:

  // sint32 dt_int = 2;
  bool has_dt_int() const;
  private:
  bool _internal_has_dt_int() const;
  public:
  void clear_dt_int();
  ::PROTOBUF_NAMESPACE_ID::int32 dt_int() const;
  void set_dt_int(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dt_int() const;
  void _internal_set_dt_int(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint64 dt_long = 3;
  bool has_dt_long() const;
  private:
  bool _internal_has_dt_long() const;
  public:
  void clear_dt_long();
  ::PROTOBUF_NAMESPACE_ID::int64 dt_long() const;
  void set_dt_long(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_dt_long() const;
  void _internal_set_dt_long(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float dt_float = 4;
  bool has_dt_float() const;
  private:
  bool _internal_has_dt_float() const;
  public:
  void clear_dt_float();
  float dt_float() const;
  void set_dt_float(float value);
  private:
  float _internal_dt_float() const;
  void _internal_set_dt_float(float value);
  public:

  // double dt_double = 5;
  bool has_dt_double() const;
  private:
  bool _internal_has_dt_double() const;
  public:
  void clear_dt_double();
  double dt_double() const;
  void set_dt_double(double value);
  private:
  double _internal_dt_double() const;
  void _internal_set_dt_double(double value);
  public:

  // string dt_string = 6;
  bool has_dt_string() const;
  private:
  bool _internal_has_dt_string() const;
  public:
  void clear_dt_string();
  const std::string& dt_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dt_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dt_string();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_dt_string();
  void set_allocated_dt_string(std::string* dt_string);
  private:
  const std::string& _internal_dt_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dt_string(const std::string& value);
  std::string* _internal_mutable_dt_string();
  public:

  // bool dt_bool = 7;
  bool has_dt_bool() const;
  private:
  bool _internal_has_dt_bool() const;
  public:
  void clear_dt_bool();
  bool dt_bool() const;
  void set_dt_bool(bool value);
  private:
  bool _internal_dt_bool() const;
  void _internal_set_dt_bool(bool value);
  public:

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:ddbprotobuf.Scalar)
 private:
  class _Internal;
  void set_has_dt_int();
  void set_has_dt_long();
  void set_has_dt_float();
  void set_has_dt_double();
  void set_has_dt_string();
  void set_has_dt_bool();

  inline bool has_type() const;
  inline void clear_has_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool is_null_;
  union TypeUnion {
    constexpr TypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::int32 dt_int_;
    ::PROTOBUF_NAMESPACE_ID::int64 dt_long_;
    float dt_float_;
    double dt_double_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dt_string_;
    bool dt_bool_;
  } type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_dolphindb_2eproto;
};
// -------------------------------------------------------------------

class Vector final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ddbprotobuf.Vector) */ {
 public:
  inline Vector() : Vector(nullptr) {}
  ~Vector() override;
  explicit constexpr Vector(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector(const Vector& from);
  Vector(Vector&& from) noexcept
    : Vector() {
    *this = ::std::move(from);
  }

  inline Vector& operator=(const Vector& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector& operator=(Vector&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector* internal_default_instance() {
    return reinterpret_cast<const Vector*>(
               &_Vector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Vector& a, Vector& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector* New() const final {
    return new Vector();
  }

  Vector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector& from);
  void MergeFrom(const Vector& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ddbprotobuf.Vector";
  }
  protected:
  explicit Vector(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementsFieldNumber = 1,
  };
  // repeated .ddbprotobuf.Scalar elements = 1;
  int elements_size() const;
  private:
  int _internal_elements_size() const;
  public:
  void clear_elements();
  ::ddbprotobuf::Scalar* mutable_elements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ddbprotobuf::Scalar >*
      mutable_elements();
  private:
  const ::ddbprotobuf::Scalar& _internal_elements(int index) const;
  ::ddbprotobuf::Scalar* _internal_add_elements();
  public:
  const ::ddbprotobuf::Scalar& elements(int index) const;
  ::ddbprotobuf::Scalar* add_elements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ddbprotobuf::Scalar >&
      elements() const;

  // @@protoc_insertion_point(class_scope:ddbprotobuf.Vector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ddbprotobuf::Scalar > elements_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dolphindb_2eproto;
};
// -------------------------------------------------------------------

class Table final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ddbprotobuf.Table) */ {
 public:
  inline Table() : Table(nullptr) {}
  ~Table() override;
  explicit constexpr Table(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Table(const Table& from);
  Table(Table&& from) noexcept
    : Table() {
    *this = ::std::move(from);
  }

  inline Table& operator=(const Table& from) {
    CopyFrom(from);
    return *this;
  }
  inline Table& operator=(Table&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Table& default_instance() {
    return *internal_default_instance();
  }
  static inline const Table* internal_default_instance() {
    return reinterpret_cast<const Table*>(
               &_Table_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Table& a, Table& b) {
    a.Swap(&b);
  }
  inline void Swap(Table* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Table* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Table* New() const final {
    return new Table();
  }

  Table* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Table>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Table& from);
  void MergeFrom(const Table& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Table* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ddbprotobuf.Table";
  }
  protected:
  explicit Table(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnsFieldNumber = 1,
  };
  // repeated .ddbprotobuf.Vector columns = 1;
  int columns_size() const;
  private:
  int _internal_columns_size() const;
  public:
  void clear_columns();
  ::ddbprotobuf::Vector* mutable_columns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ddbprotobuf::Vector >*
      mutable_columns();
  private:
  const ::ddbprotobuf::Vector& _internal_columns(int index) const;
  ::ddbprotobuf::Vector* _internal_add_columns();
  public:
  const ::ddbprotobuf::Vector& columns(int index) const;
  ::ddbprotobuf::Vector* add_columns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ddbprotobuf::Vector >&
      columns() const;

  // @@protoc_insertion_point(class_scope:ddbprotobuf.Table)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ddbprotobuf::Vector > columns_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dolphindb_2eproto;
};
// -------------------------------------------------------------------

class Dictionary final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ddbprotobuf.Dictionary) */ {
 public:
  inline Dictionary() : Dictionary(nullptr) {}
  ~Dictionary() override;
  explicit constexpr Dictionary(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Dictionary(const Dictionary& from);
  Dictionary(Dictionary&& from) noexcept
    : Dictionary() {
    *this = ::std::move(from);
  }

  inline Dictionary& operator=(const Dictionary& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dictionary& operator=(Dictionary&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Dictionary& default_instance() {
    return *internal_default_instance();
  }
  static inline const Dictionary* internal_default_instance() {
    return reinterpret_cast<const Dictionary*>(
               &_Dictionary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Dictionary& a, Dictionary& b) {
    a.Swap(&b);
  }
  inline void Swap(Dictionary* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Dictionary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dictionary* New() const final {
    return new Dictionary();
  }

  Dictionary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dictionary>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dictionary& from);
  void MergeFrom(const Dictionary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dictionary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ddbprotobuf.Dictionary";
  }
  protected:
  explicit Dictionary(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 1,
    kValuesFieldNumber = 2,
  };
  // .ddbprotobuf.Vector keys = 1;
  bool has_keys() const;
  private:
  bool _internal_has_keys() const;
  public:
  void clear_keys();
  const ::ddbprotobuf::Vector& keys() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::ddbprotobuf::Vector* release_keys();
  ::ddbprotobuf::Vector* mutable_keys();
  void set_allocated_keys(::ddbprotobuf::Vector* keys);
  private:
  const ::ddbprotobuf::Vector& _internal_keys() const;
  ::ddbprotobuf::Vector* _internal_mutable_keys();
  public:
  void unsafe_arena_set_allocated_keys(
      ::ddbprotobuf::Vector* keys);
  ::ddbprotobuf::Vector* unsafe_arena_release_keys();

  // .ddbprotobuf.Vector values = 2;
  bool has_values() const;
  private:
  bool _internal_has_values() const;
  public:
  void clear_values();
  const ::ddbprotobuf::Vector& values() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::ddbprotobuf::Vector* release_values();
  ::ddbprotobuf::Vector* mutable_values();
  void set_allocated_values(::ddbprotobuf::Vector* values);
  private:
  const ::ddbprotobuf::Vector& _internal_values() const;
  ::ddbprotobuf::Vector* _internal_mutable_values();
  public:
  void unsafe_arena_set_allocated_values(
      ::ddbprotobuf::Vector* values);
  ::ddbprotobuf::Vector* unsafe_arena_release_values();

  // @@protoc_insertion_point(class_scope:ddbprotobuf.Dictionary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ddbprotobuf::Vector* keys_;
  ::ddbprotobuf::Vector* values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dolphindb_2eproto;
};
// -------------------------------------------------------------------

class DolphinMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ddbprotobuf.DolphinMessage) */ {
 public:
  inline DolphinMessage() : DolphinMessage(nullptr) {}
  ~DolphinMessage() override;
  explicit constexpr DolphinMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DolphinMessage(const DolphinMessage& from);
  DolphinMessage(DolphinMessage&& from) noexcept
    : DolphinMessage() {
    *this = ::std::move(from);
  }

  inline DolphinMessage& operator=(const DolphinMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DolphinMessage& operator=(DolphinMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DolphinMessage& default_instance() {
    return *internal_default_instance();
  }
  enum FormCase {
    kDfScalar = 1,
    kDfVector = 2,
    kDfTable = 3,
    kDfDictionary = 4,
    FORM_NOT_SET = 0,
  };

  static inline const DolphinMessage* internal_default_instance() {
    return reinterpret_cast<const DolphinMessage*>(
               &_DolphinMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DolphinMessage& a, DolphinMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DolphinMessage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DolphinMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DolphinMessage* New() const final {
    return new DolphinMessage();
  }

  DolphinMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DolphinMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DolphinMessage& from);
  void MergeFrom(const DolphinMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DolphinMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ddbprotobuf.DolphinMessage";
  }
  protected:
  explicit DolphinMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDfScalarFieldNumber = 1,
    kDfVectorFieldNumber = 2,
    kDfTableFieldNumber = 3,
    kDfDictionaryFieldNumber = 4,
  };
  // .ddbprotobuf.Scalar df_scalar = 1;
  bool has_df_scalar() const;
  private:
  bool _internal_has_df_scalar() const;
  public:
  void clear_df_scalar();
  const ::ddbprotobuf::Scalar& df_scalar() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::ddbprotobuf::Scalar* release_df_scalar();
  ::ddbprotobuf::Scalar* mutable_df_scalar();
  void set_allocated_df_scalar(::ddbprotobuf::Scalar* df_scalar);
  private:
  const ::ddbprotobuf::Scalar& _internal_df_scalar() const;
  ::ddbprotobuf::Scalar* _internal_mutable_df_scalar();
  public:
  void unsafe_arena_set_allocated_df_scalar(
      ::ddbprotobuf::Scalar* df_scalar);
  ::ddbprotobuf::Scalar* unsafe_arena_release_df_scalar();

  // .ddbprotobuf.Vector df_vector = 2;
  bool has_df_vector() const;
  private:
  bool _internal_has_df_vector() const;
  public:
  void clear_df_vector();
  const ::ddbprotobuf::Vector& df_vector() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::ddbprotobuf::Vector* release_df_vector();
  ::ddbprotobuf::Vector* mutable_df_vector();
  void set_allocated_df_vector(::ddbprotobuf::Vector* df_vector);
  private:
  const ::ddbprotobuf::Vector& _internal_df_vector() const;
  ::ddbprotobuf::Vector* _internal_mutable_df_vector();
  public:
  void unsafe_arena_set_allocated_df_vector(
      ::ddbprotobuf::Vector* df_vector);
  ::ddbprotobuf::Vector* unsafe_arena_release_df_vector();

  // .ddbprotobuf.Table df_table = 3;
  bool has_df_table() const;
  private:
  bool _internal_has_df_table() const;
  public:
  void clear_df_table();
  const ::ddbprotobuf::Table& df_table() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::ddbprotobuf::Table* release_df_table();
  ::ddbprotobuf::Table* mutable_df_table();
  void set_allocated_df_table(::ddbprotobuf::Table* df_table);
  private:
  const ::ddbprotobuf::Table& _internal_df_table() const;
  ::ddbprotobuf::Table* _internal_mutable_df_table();
  public:
  void unsafe_arena_set_allocated_df_table(
      ::ddbprotobuf::Table* df_table);
  ::ddbprotobuf::Table* unsafe_arena_release_df_table();

  // .ddbprotobuf.Dictionary df_dictionary = 4;
  bool has_df_dictionary() const;
  private:
  bool _internal_has_df_dictionary() const;
  public:
  void clear_df_dictionary();
  const ::ddbprotobuf::Dictionary& df_dictionary() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::ddbprotobuf::Dictionary* release_df_dictionary();
  ::ddbprotobuf::Dictionary* mutable_df_dictionary();
  void set_allocated_df_dictionary(::ddbprotobuf::Dictionary* df_dictionary);
  private:
  const ::ddbprotobuf::Dictionary& _internal_df_dictionary() const;
  ::ddbprotobuf::Dictionary* _internal_mutable_df_dictionary();
  public:
  void unsafe_arena_set_allocated_df_dictionary(
      ::ddbprotobuf::Dictionary* df_dictionary);
  ::ddbprotobuf::Dictionary* unsafe_arena_release_df_dictionary();

  void clear_form();
  FormCase form_case() const;
  // @@protoc_insertion_point(class_scope:ddbprotobuf.DolphinMessage)
 private:
  class _Internal;
  void set_has_df_scalar();
  void set_has_df_vector();
  void set_has_df_table();
  void set_has_df_dictionary();

  inline bool has_form() const;
  inline void clear_has_form();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union FormUnion {
    constexpr FormUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::ddbprotobuf::Scalar* df_scalar_;
    ::ddbprotobuf::Vector* df_vector_;
    ::ddbprotobuf::Table* df_table_;
    ::ddbprotobuf::Dictionary* df_dictionary_;
  } form_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_dolphindb_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Scalar

// bool is_null = 1;
inline void Scalar::clear_is_null() {
  is_null_ = false;
}
inline bool Scalar::_internal_is_null() const {
  return is_null_;
}
inline bool Scalar::is_null() const {
  // @@protoc_insertion_point(field_get:ddbprotobuf.Scalar.is_null)
  return _internal_is_null();
}
inline void Scalar::_internal_set_is_null(bool value) {
  
  is_null_ = value;
}
inline void Scalar::set_is_null(bool value) {
  _internal_set_is_null(value);
  // @@protoc_insertion_point(field_set:ddbprotobuf.Scalar.is_null)
}

// sint32 dt_int = 2;
inline bool Scalar::_internal_has_dt_int() const {
  return type_case() == kDtInt;
}
inline bool Scalar::has_dt_int() const {
  return _internal_has_dt_int();
}
inline void Scalar::set_has_dt_int() {
  _oneof_case_[0] = kDtInt;
}
inline void Scalar::clear_dt_int() {
  if (_internal_has_dt_int()) {
    type_.dt_int_ = 0;
    clear_has_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Scalar::_internal_dt_int() const {
  if (_internal_has_dt_int()) {
    return type_.dt_int_;
  }
  return 0;
}
inline void Scalar::_internal_set_dt_int(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_dt_int()) {
    clear_type();
    set_has_dt_int();
  }
  type_.dt_int_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Scalar::dt_int() const {
  // @@protoc_insertion_point(field_get:ddbprotobuf.Scalar.dt_int)
  return _internal_dt_int();
}
inline void Scalar::set_dt_int(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dt_int(value);
  // @@protoc_insertion_point(field_set:ddbprotobuf.Scalar.dt_int)
}

// sint64 dt_long = 3;
inline bool Scalar::_internal_has_dt_long() const {
  return type_case() == kDtLong;
}
inline bool Scalar::has_dt_long() const {
  return _internal_has_dt_long();
}
inline void Scalar::set_has_dt_long() {
  _oneof_case_[0] = kDtLong;
}
inline void Scalar::clear_dt_long() {
  if (_internal_has_dt_long()) {
    type_.dt_long_ = int64_t{0};
    clear_has_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Scalar::_internal_dt_long() const {
  if (_internal_has_dt_long()) {
    return type_.dt_long_;
  }
  return int64_t{0};
}
inline void Scalar::_internal_set_dt_long(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_dt_long()) {
    clear_type();
    set_has_dt_long();
  }
  type_.dt_long_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Scalar::dt_long() const {
  // @@protoc_insertion_point(field_get:ddbprotobuf.Scalar.dt_long)
  return _internal_dt_long();
}
inline void Scalar::set_dt_long(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_dt_long(value);
  // @@protoc_insertion_point(field_set:ddbprotobuf.Scalar.dt_long)
}

// float dt_float = 4;
inline bool Scalar::_internal_has_dt_float() const {
  return type_case() == kDtFloat;
}
inline bool Scalar::has_dt_float() const {
  return _internal_has_dt_float();
}
inline void Scalar::set_has_dt_float() {
  _oneof_case_[0] = kDtFloat;
}
inline void Scalar::clear_dt_float() {
  if (_internal_has_dt_float()) {
    type_.dt_float_ = 0;
    clear_has_type();
  }
}
inline float Scalar::_internal_dt_float() const {
  if (_internal_has_dt_float()) {
    return type_.dt_float_;
  }
  return 0;
}
inline void Scalar::_internal_set_dt_float(float value) {
  if (!_internal_has_dt_float()) {
    clear_type();
    set_has_dt_float();
  }
  type_.dt_float_ = value;
}
inline float Scalar::dt_float() const {
  // @@protoc_insertion_point(field_get:ddbprotobuf.Scalar.dt_float)
  return _internal_dt_float();
}
inline void Scalar::set_dt_float(float value) {
  _internal_set_dt_float(value);
  // @@protoc_insertion_point(field_set:ddbprotobuf.Scalar.dt_float)
}

// double dt_double = 5;
inline bool Scalar::_internal_has_dt_double() const {
  return type_case() == kDtDouble;
}
inline bool Scalar::has_dt_double() const {
  return _internal_has_dt_double();
}
inline void Scalar::set_has_dt_double() {
  _oneof_case_[0] = kDtDouble;
}
inline void Scalar::clear_dt_double() {
  if (_internal_has_dt_double()) {
    type_.dt_double_ = 0;
    clear_has_type();
  }
}
inline double Scalar::_internal_dt_double() const {
  if (_internal_has_dt_double()) {
    return type_.dt_double_;
  }
  return 0;
}
inline void Scalar::_internal_set_dt_double(double value) {
  if (!_internal_has_dt_double()) {
    clear_type();
    set_has_dt_double();
  }
  type_.dt_double_ = value;
}
inline double Scalar::dt_double() const {
  // @@protoc_insertion_point(field_get:ddbprotobuf.Scalar.dt_double)
  return _internal_dt_double();
}
inline void Scalar::set_dt_double(double value) {
  _internal_set_dt_double(value);
  // @@protoc_insertion_point(field_set:ddbprotobuf.Scalar.dt_double)
}

// string dt_string = 6;
inline bool Scalar::_internal_has_dt_string() const {
  return type_case() == kDtString;
}
inline bool Scalar::has_dt_string() const {
  return _internal_has_dt_string();
}
inline void Scalar::set_has_dt_string() {
  _oneof_case_[0] = kDtString;
}
inline void Scalar::clear_dt_string() {
  if (_internal_has_dt_string()) {
    type_.dt_string_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_type();
  }
}
inline const std::string& Scalar::dt_string() const {
  // @@protoc_insertion_point(field_get:ddbprotobuf.Scalar.dt_string)
  return _internal_dt_string();
}
template <typename ArgT0, typename... ArgT>
inline void Scalar::set_dt_string(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_dt_string()) {
    clear_type();
    set_has_dt_string();
    type_.dt_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  type_.dt_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ddbprotobuf.Scalar.dt_string)
}
inline std::string* Scalar::mutable_dt_string() {
  // @@protoc_insertion_point(field_mutable:ddbprotobuf.Scalar.dt_string)
  return _internal_mutable_dt_string();
}
inline const std::string& Scalar::_internal_dt_string() const {
  if (_internal_has_dt_string()) {
    return type_.dt_string_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Scalar::_internal_set_dt_string(const std::string& value) {
  if (!_internal_has_dt_string()) {
    clear_type();
    set_has_dt_string();
    type_.dt_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  type_.dt_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Scalar::_internal_mutable_dt_string() {
  if (!_internal_has_dt_string()) {
    clear_type();
    set_has_dt_string();
    type_.dt_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return type_.dt_string_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Scalar::release_dt_string() {
  // @@protoc_insertion_point(field_release:ddbprotobuf.Scalar.dt_string)
  if (_internal_has_dt_string()) {
    clear_has_type();
    return type_.dt_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void Scalar::set_allocated_dt_string(std::string* dt_string) {
  if (has_type()) {
    clear_type();
  }
  if (dt_string != nullptr) {
    set_has_dt_string();
    type_.dt_string_.UnsafeSetDefault(dt_string);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(dt_string);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:ddbprotobuf.Scalar.dt_string)
}

// bool dt_bool = 7;
inline bool Scalar::_internal_has_dt_bool() const {
  return type_case() == kDtBool;
}
inline bool Scalar::has_dt_bool() const {
  return _internal_has_dt_bool();
}
inline void Scalar::set_has_dt_bool() {
  _oneof_case_[0] = kDtBool;
}
inline void Scalar::clear_dt_bool() {
  if (_internal_has_dt_bool()) {
    type_.dt_bool_ = false;
    clear_has_type();
  }
}
inline bool Scalar::_internal_dt_bool() const {
  if (_internal_has_dt_bool()) {
    return type_.dt_bool_;
  }
  return false;
}
inline void Scalar::_internal_set_dt_bool(bool value) {
  if (!_internal_has_dt_bool()) {
    clear_type();
    set_has_dt_bool();
  }
  type_.dt_bool_ = value;
}
inline bool Scalar::dt_bool() const {
  // @@protoc_insertion_point(field_get:ddbprotobuf.Scalar.dt_bool)
  return _internal_dt_bool();
}
inline void Scalar::set_dt_bool(bool value) {
  _internal_set_dt_bool(value);
  // @@protoc_insertion_point(field_set:ddbprotobuf.Scalar.dt_bool)
}

inline bool Scalar::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void Scalar::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline Scalar::TypeCase Scalar::type_case() const {
  return Scalar::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Vector

// repeated .ddbprotobuf.Scalar elements = 1;
inline int Vector::_internal_elements_size() const {
  return elements_.size();
}
inline int Vector::elements_size() const {
  return _internal_elements_size();
}
inline void Vector::clear_elements() {
  elements_.Clear();
}
inline ::ddbprotobuf::Scalar* Vector::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:ddbprotobuf.Vector.elements)
  return elements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ddbprotobuf::Scalar >*
Vector::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:ddbprotobuf.Vector.elements)
  return &elements_;
}
inline const ::ddbprotobuf::Scalar& Vector::_internal_elements(int index) const {
  return elements_.Get(index);
}
inline const ::ddbprotobuf::Scalar& Vector::elements(int index) const {
  // @@protoc_insertion_point(field_get:ddbprotobuf.Vector.elements)
  return _internal_elements(index);
}
inline ::ddbprotobuf::Scalar* Vector::_internal_add_elements() {
  return elements_.Add();
}
inline ::ddbprotobuf::Scalar* Vector::add_elements() {
  // @@protoc_insertion_point(field_add:ddbprotobuf.Vector.elements)
  return _internal_add_elements();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ddbprotobuf::Scalar >&
Vector::elements() const {
  // @@protoc_insertion_point(field_list:ddbprotobuf.Vector.elements)
  return elements_;
}

// -------------------------------------------------------------------

// Table

// repeated .ddbprotobuf.Vector columns = 1;
inline int Table::_internal_columns_size() const {
  return columns_.size();
}
inline int Table::columns_size() const {
  return _internal_columns_size();
}
inline void Table::clear_columns() {
  columns_.Clear();
}
inline ::ddbprotobuf::Vector* Table::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:ddbprotobuf.Table.columns)
  return columns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ddbprotobuf::Vector >*
Table::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:ddbprotobuf.Table.columns)
  return &columns_;
}
inline const ::ddbprotobuf::Vector& Table::_internal_columns(int index) const {
  return columns_.Get(index);
}
inline const ::ddbprotobuf::Vector& Table::columns(int index) const {
  // @@protoc_insertion_point(field_get:ddbprotobuf.Table.columns)
  return _internal_columns(index);
}
inline ::ddbprotobuf::Vector* Table::_internal_add_columns() {
  return columns_.Add();
}
inline ::ddbprotobuf::Vector* Table::add_columns() {
  // @@protoc_insertion_point(field_add:ddbprotobuf.Table.columns)
  return _internal_add_columns();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ddbprotobuf::Vector >&
Table::columns() const {
  // @@protoc_insertion_point(field_list:ddbprotobuf.Table.columns)
  return columns_;
}

// -------------------------------------------------------------------

// Dictionary

// .ddbprotobuf.Vector keys = 1;
inline bool Dictionary::_internal_has_keys() const {
  return this != internal_default_instance() && keys_ != nullptr;
}
inline bool Dictionary::has_keys() const {
  return _internal_has_keys();
}
inline void Dictionary::clear_keys() {
  if (GetArenaForAllocation() == nullptr && keys_ != nullptr) {
    delete keys_;
  }
  keys_ = nullptr;
}
inline const ::ddbprotobuf::Vector& Dictionary::_internal_keys() const {
  const ::ddbprotobuf::Vector* p = keys_;
  return p != nullptr ? *p : reinterpret_cast<const ::ddbprotobuf::Vector&>(
      ::ddbprotobuf::_Vector_default_instance_);
}
inline const ::ddbprotobuf::Vector& Dictionary::keys() const {
  // @@protoc_insertion_point(field_get:ddbprotobuf.Dictionary.keys)
  return _internal_keys();
}
inline void Dictionary::unsafe_arena_set_allocated_keys(
    ::ddbprotobuf::Vector* keys) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(keys_);
  }
  keys_ = keys;
  if (keys) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ddbprotobuf.Dictionary.keys)
}
inline ::ddbprotobuf::Vector* Dictionary::release_keys() {
  
  ::ddbprotobuf::Vector* temp = keys_;
  keys_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ddbprotobuf::Vector* Dictionary::unsafe_arena_release_keys() {
  // @@protoc_insertion_point(field_release:ddbprotobuf.Dictionary.keys)
  
  ::ddbprotobuf::Vector* temp = keys_;
  keys_ = nullptr;
  return temp;
}
inline ::ddbprotobuf::Vector* Dictionary::_internal_mutable_keys() {
  
  if (keys_ == nullptr) {
    auto* p = CreateMaybeMessage<::ddbprotobuf::Vector>(GetArenaForAllocation());
    keys_ = p;
  }
  return keys_;
}
inline ::ddbprotobuf::Vector* Dictionary::mutable_keys() {
  // @@protoc_insertion_point(field_mutable:ddbprotobuf.Dictionary.keys)
  return _internal_mutable_keys();
}
inline void Dictionary::set_allocated_keys(::ddbprotobuf::Vector* keys) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete keys_;
  }
  if (keys) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ddbprotobuf::Vector>::GetOwningArena(keys);
    if (message_arena != submessage_arena) {
      keys = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, keys, submessage_arena);
    }
    
  } else {
    
  }
  keys_ = keys;
  // @@protoc_insertion_point(field_set_allocated:ddbprotobuf.Dictionary.keys)
}

// .ddbprotobuf.Vector values = 2;
inline bool Dictionary::_internal_has_values() const {
  return this != internal_default_instance() && values_ != nullptr;
}
inline bool Dictionary::has_values() const {
  return _internal_has_values();
}
inline void Dictionary::clear_values() {
  if (GetArenaForAllocation() == nullptr && values_ != nullptr) {
    delete values_;
  }
  values_ = nullptr;
}
inline const ::ddbprotobuf::Vector& Dictionary::_internal_values() const {
  const ::ddbprotobuf::Vector* p = values_;
  return p != nullptr ? *p : reinterpret_cast<const ::ddbprotobuf::Vector&>(
      ::ddbprotobuf::_Vector_default_instance_);
}
inline const ::ddbprotobuf::Vector& Dictionary::values() const {
  // @@protoc_insertion_point(field_get:ddbprotobuf.Dictionary.values)
  return _internal_values();
}
inline void Dictionary::unsafe_arena_set_allocated_values(
    ::ddbprotobuf::Vector* values) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(values_);
  }
  values_ = values;
  if (values) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ddbprotobuf.Dictionary.values)
}
inline ::ddbprotobuf::Vector* Dictionary::release_values() {
  
  ::ddbprotobuf::Vector* temp = values_;
  values_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ddbprotobuf::Vector* Dictionary::unsafe_arena_release_values() {
  // @@protoc_insertion_point(field_release:ddbprotobuf.Dictionary.values)
  
  ::ddbprotobuf::Vector* temp = values_;
  values_ = nullptr;
  return temp;
}
inline ::ddbprotobuf::Vector* Dictionary::_internal_mutable_values() {
  
  if (values_ == nullptr) {
    auto* p = CreateMaybeMessage<::ddbprotobuf::Vector>(GetArenaForAllocation());
    values_ = p;
  }
  return values_;
}
inline ::ddbprotobuf::Vector* Dictionary::mutable_values() {
  // @@protoc_insertion_point(field_mutable:ddbprotobuf.Dictionary.values)
  return _internal_mutable_values();
}
inline void Dictionary::set_allocated_values(::ddbprotobuf::Vector* values) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete values_;
  }
  if (values) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ddbprotobuf::Vector>::GetOwningArena(values);
    if (message_arena != submessage_arena) {
      values = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, values, submessage_arena);
    }
    
  } else {
    
  }
  values_ = values;
  // @@protoc_insertion_point(field_set_allocated:ddbprotobuf.Dictionary.values)
}

// -------------------------------------------------------------------

// DolphinMessage

// .ddbprotobuf.Scalar df_scalar = 1;
inline bool DolphinMessage::_internal_has_df_scalar() const {
  return form_case() == kDfScalar;
}
inline bool DolphinMessage::has_df_scalar() const {
  return _internal_has_df_scalar();
}
inline void DolphinMessage::set_has_df_scalar() {
  _oneof_case_[0] = kDfScalar;
}
inline void DolphinMessage::clear_df_scalar() {
  if (_internal_has_df_scalar()) {
    if (GetArenaForAllocation() == nullptr) {
      delete form_.df_scalar_;
    }
    clear_has_form();
  }
}
inline ::ddbprotobuf::Scalar* DolphinMessage::release_df_scalar() {
  // @@protoc_insertion_point(field_release:ddbprotobuf.DolphinMessage.df_scalar)
  if (_internal_has_df_scalar()) {
    clear_has_form();
      ::ddbprotobuf::Scalar* temp = form_.df_scalar_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    form_.df_scalar_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ddbprotobuf::Scalar& DolphinMessage::_internal_df_scalar() const {
  return _internal_has_df_scalar()
      ? *form_.df_scalar_
      : reinterpret_cast< ::ddbprotobuf::Scalar&>(::ddbprotobuf::_Scalar_default_instance_);
}
inline const ::ddbprotobuf::Scalar& DolphinMessage::df_scalar() const {
  // @@protoc_insertion_point(field_get:ddbprotobuf.DolphinMessage.df_scalar)
  return _internal_df_scalar();
}
inline ::ddbprotobuf::Scalar* DolphinMessage::unsafe_arena_release_df_scalar() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ddbprotobuf.DolphinMessage.df_scalar)
  if (_internal_has_df_scalar()) {
    clear_has_form();
    ::ddbprotobuf::Scalar* temp = form_.df_scalar_;
    form_.df_scalar_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DolphinMessage::unsafe_arena_set_allocated_df_scalar(::ddbprotobuf::Scalar* df_scalar) {
  clear_form();
  if (df_scalar) {
    set_has_df_scalar();
    form_.df_scalar_ = df_scalar;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ddbprotobuf.DolphinMessage.df_scalar)
}
inline ::ddbprotobuf::Scalar* DolphinMessage::_internal_mutable_df_scalar() {
  if (!_internal_has_df_scalar()) {
    clear_form();
    set_has_df_scalar();
    form_.df_scalar_ = CreateMaybeMessage< ::ddbprotobuf::Scalar >(GetArenaForAllocation());
  }
  return form_.df_scalar_;
}
inline ::ddbprotobuf::Scalar* DolphinMessage::mutable_df_scalar() {
  // @@protoc_insertion_point(field_mutable:ddbprotobuf.DolphinMessage.df_scalar)
  return _internal_mutable_df_scalar();
}

// .ddbprotobuf.Vector df_vector = 2;
inline bool DolphinMessage::_internal_has_df_vector() const {
  return form_case() == kDfVector;
}
inline bool DolphinMessage::has_df_vector() const {
  return _internal_has_df_vector();
}
inline void DolphinMessage::set_has_df_vector() {
  _oneof_case_[0] = kDfVector;
}
inline void DolphinMessage::clear_df_vector() {
  if (_internal_has_df_vector()) {
    if (GetArenaForAllocation() == nullptr) {
      delete form_.df_vector_;
    }
    clear_has_form();
  }
}
inline ::ddbprotobuf::Vector* DolphinMessage::release_df_vector() {
  // @@protoc_insertion_point(field_release:ddbprotobuf.DolphinMessage.df_vector)
  if (_internal_has_df_vector()) {
    clear_has_form();
      ::ddbprotobuf::Vector* temp = form_.df_vector_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    form_.df_vector_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ddbprotobuf::Vector& DolphinMessage::_internal_df_vector() const {
  return _internal_has_df_vector()
      ? *form_.df_vector_
      : reinterpret_cast< ::ddbprotobuf::Vector&>(::ddbprotobuf::_Vector_default_instance_);
}
inline const ::ddbprotobuf::Vector& DolphinMessage::df_vector() const {
  // @@protoc_insertion_point(field_get:ddbprotobuf.DolphinMessage.df_vector)
  return _internal_df_vector();
}
inline ::ddbprotobuf::Vector* DolphinMessage::unsafe_arena_release_df_vector() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ddbprotobuf.DolphinMessage.df_vector)
  if (_internal_has_df_vector()) {
    clear_has_form();
    ::ddbprotobuf::Vector* temp = form_.df_vector_;
    form_.df_vector_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DolphinMessage::unsafe_arena_set_allocated_df_vector(::ddbprotobuf::Vector* df_vector) {
  clear_form();
  if (df_vector) {
    set_has_df_vector();
    form_.df_vector_ = df_vector;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ddbprotobuf.DolphinMessage.df_vector)
}
inline ::ddbprotobuf::Vector* DolphinMessage::_internal_mutable_df_vector() {
  if (!_internal_has_df_vector()) {
    clear_form();
    set_has_df_vector();
    form_.df_vector_ = CreateMaybeMessage< ::ddbprotobuf::Vector >(GetArenaForAllocation());
  }
  return form_.df_vector_;
}
inline ::ddbprotobuf::Vector* DolphinMessage::mutable_df_vector() {
  // @@protoc_insertion_point(field_mutable:ddbprotobuf.DolphinMessage.df_vector)
  return _internal_mutable_df_vector();
}

// .ddbprotobuf.Table df_table = 3;
inline bool DolphinMessage::_internal_has_df_table() const {
  return form_case() == kDfTable;
}
inline bool DolphinMessage::has_df_table() const {
  return _internal_has_df_table();
}
inline void DolphinMessage::set_has_df_table() {
  _oneof_case_[0] = kDfTable;
}
inline void DolphinMessage::clear_df_table() {
  if (_internal_has_df_table()) {
    if (GetArenaForAllocation() == nullptr) {
      delete form_.df_table_;
    }
    clear_has_form();
  }
}
inline ::ddbprotobuf::Table* DolphinMessage::release_df_table() {
  // @@protoc_insertion_point(field_release:ddbprotobuf.DolphinMessage.df_table)
  if (_internal_has_df_table()) {
    clear_has_form();
      ::ddbprotobuf::Table* temp = form_.df_table_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    form_.df_table_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ddbprotobuf::Table& DolphinMessage::_internal_df_table() const {
  return _internal_has_df_table()
      ? *form_.df_table_
      : reinterpret_cast< ::ddbprotobuf::Table&>(::ddbprotobuf::_Table_default_instance_);
}
inline const ::ddbprotobuf::Table& DolphinMessage::df_table() const {
  // @@protoc_insertion_point(field_get:ddbprotobuf.DolphinMessage.df_table)
  return _internal_df_table();
}
inline ::ddbprotobuf::Table* DolphinMessage::unsafe_arena_release_df_table() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ddbprotobuf.DolphinMessage.df_table)
  if (_internal_has_df_table()) {
    clear_has_form();
    ::ddbprotobuf::Table* temp = form_.df_table_;
    form_.df_table_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DolphinMessage::unsafe_arena_set_allocated_df_table(::ddbprotobuf::Table* df_table) {
  clear_form();
  if (df_table) {
    set_has_df_table();
    form_.df_table_ = df_table;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ddbprotobuf.DolphinMessage.df_table)
}
inline ::ddbprotobuf::Table* DolphinMessage::_internal_mutable_df_table() {
  if (!_internal_has_df_table()) {
    clear_form();
    set_has_df_table();
    form_.df_table_ = CreateMaybeMessage< ::ddbprotobuf::Table >(GetArenaForAllocation());
  }
  return form_.df_table_;
}
inline ::ddbprotobuf::Table* DolphinMessage::mutable_df_table() {
  // @@protoc_insertion_point(field_mutable:ddbprotobuf.DolphinMessage.df_table)
  return _internal_mutable_df_table();
}

// .ddbprotobuf.Dictionary df_dictionary = 4;
inline bool DolphinMessage::_internal_has_df_dictionary() const {
  return form_case() == kDfDictionary;
}
inline bool DolphinMessage::has_df_dictionary() const {
  return _internal_has_df_dictionary();
}
inline void DolphinMessage::set_has_df_dictionary() {
  _oneof_case_[0] = kDfDictionary;
}
inline void DolphinMessage::clear_df_dictionary() {
  if (_internal_has_df_dictionary()) {
    if (GetArenaForAllocation() == nullptr) {
      delete form_.df_dictionary_;
    }
    clear_has_form();
  }
}
inline ::ddbprotobuf::Dictionary* DolphinMessage::release_df_dictionary() {
  // @@protoc_insertion_point(field_release:ddbprotobuf.DolphinMessage.df_dictionary)
  if (_internal_has_df_dictionary()) {
    clear_has_form();
      ::ddbprotobuf::Dictionary* temp = form_.df_dictionary_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    form_.df_dictionary_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ddbprotobuf::Dictionary& DolphinMessage::_internal_df_dictionary() const {
  return _internal_has_df_dictionary()
      ? *form_.df_dictionary_
      : reinterpret_cast< ::ddbprotobuf::Dictionary&>(::ddbprotobuf::_Dictionary_default_instance_);
}
inline const ::ddbprotobuf::Dictionary& DolphinMessage::df_dictionary() const {
  // @@protoc_insertion_point(field_get:ddbprotobuf.DolphinMessage.df_dictionary)
  return _internal_df_dictionary();
}
inline ::ddbprotobuf::Dictionary* DolphinMessage::unsafe_arena_release_df_dictionary() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ddbprotobuf.DolphinMessage.df_dictionary)
  if (_internal_has_df_dictionary()) {
    clear_has_form();
    ::ddbprotobuf::Dictionary* temp = form_.df_dictionary_;
    form_.df_dictionary_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DolphinMessage::unsafe_arena_set_allocated_df_dictionary(::ddbprotobuf::Dictionary* df_dictionary) {
  clear_form();
  if (df_dictionary) {
    set_has_df_dictionary();
    form_.df_dictionary_ = df_dictionary;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ddbprotobuf.DolphinMessage.df_dictionary)
}
inline ::ddbprotobuf::Dictionary* DolphinMessage::_internal_mutable_df_dictionary() {
  if (!_internal_has_df_dictionary()) {
    clear_form();
    set_has_df_dictionary();
    form_.df_dictionary_ = CreateMaybeMessage< ::ddbprotobuf::Dictionary >(GetArenaForAllocation());
  }
  return form_.df_dictionary_;
}
inline ::ddbprotobuf::Dictionary* DolphinMessage::mutable_df_dictionary() {
  // @@protoc_insertion_point(field_mutable:ddbprotobuf.DolphinMessage.df_dictionary)
  return _internal_mutable_df_dictionary();
}

inline bool DolphinMessage::has_form() const {
  return form_case() != FORM_NOT_SET;
}
inline void DolphinMessage::clear_has_form() {
  _oneof_case_[0] = FORM_NOT_SET;
}
inline DolphinMessage::FormCase DolphinMessage::form_case() const {
  return DolphinMessage::FormCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ddbprotobuf

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dolphindb_2eproto
